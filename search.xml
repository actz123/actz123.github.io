<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>01背包</title>
    <url>/2024/02/22/01%E8%83%8C%E5%8C%85/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/01%E8%83%8C%E5%8C%85/image-20240222143137210.png'><img src="/./../imgs/01%E8%83%8C%E5%8C%85/image-20240222143137210.png" alt="image-20240222143137210"><img src="/./../imgs/01%E8%83%8C%E5%8C%85/image-20240222143144426.png" alt="image-20240222143144426" class='item-img' data-src='/./../imgs/01%E8%83%8C%E5%8C%85/image-20240222143144426.png'><img src="/./../imgs/01%E8%83%8C%E5%8C%85/image-20240222143144426.png" alt="image-20240222143144426"><img src="/./../imgs/01%E8%83%8C%E5%8C%85/image-20240222143201565.png" alt="image-20240222143201565" class='item-img' data-src='/./../imgs/01%E8%83%8C%E5%8C%85/image-20240222143201565.png'><img src="/./../imgs/01%E8%83%8C%E5%8C%85/image-20240222143201565.png" alt="image-20240222143201565"><img src="/./../imgs/01%E8%83%8C%E5%8C%85/image-20240222143219350.png" alt="image-20240222143219350" class='item-img' data-src='/./../imgs/01%E8%83%8C%E5%8C%85/image-20240222143219350.png'><img src="/./../imgs/01%E8%83%8C%E5%8C%85/image-20240222143219350.png" alt="image-20240222143219350"><img src="/./../imgs/01%E8%83%8C%E5%8C%85/image-20240222143235203.png" alt="image-20240222143235203" class='item-img' data-src='/./../imgs/01%E8%83%8C%E5%8C%85/image-20240222143235203.png'><img src="/./../imgs/01%E8%83%8C%E5%8C%85/image-20240222143235203.png" alt="image-20240222143235203"><img src="/./../imgs/01%E8%83%8C%E5%8C%85/image-20240222143249102.png" alt="image-20240222143249102" class='item-img' data-src='/./../imgs/01%E8%83%8C%E5%8C%85/image-20240222143249102.png'><img src="/./../imgs/01%E8%83%8C%E5%8C%85/image-20240222143249102.png" alt="image-20240222143249102"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第四章：动态规划</category>
        <category>背包问题</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>DFS-剪枝</title>
    <url>/2024/02/22/DFS-%E5%89%AA%E6%9E%9D/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/DFS-%E5%89%AA%E6%9E%9D/image-20240222113035894.png'><img src="/./../imgs/DFS-%E5%89%AA%E6%9E%9D/image-20240222113035894.png" alt="image-20240222113035894"><img src="/./../imgs/DFS-%E5%89%AA%E6%9E%9D/image-20240222113040668.png" alt="image-20240222113040668" class='item-img' data-src='/./../imgs/DFS-%E5%89%AA%E6%9E%9D/image-20240222113040668.png'><img src="/./../imgs/DFS-%E5%89%AA%E6%9E%9D/image-20240222113040668.png" alt="image-20240222113040668"><img src="/./../imgs/DFS-%E5%89%AA%E6%9E%9D/image-20240222113049192.png" alt="image-20240222113049192" class='item-img' data-src='/./../imgs/DFS-%E5%89%AA%E6%9E%9D/image-20240222113049192.png'><img src="/./../imgs/DFS-%E5%89%AA%E6%9E%9D/image-20240222113049192.png" alt="image-20240222113049192"><img src="/./../imgs/DFS-%E5%89%AA%E6%9E%9D/image-20240222113057612.png" alt="image-20240222113057612"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第三章：搜索</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>DFS-基础</title>
    <url>/2024/02/22/DFS-%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/DFS-%E5%9F%BA%E7%A1%80/image-20240222112707429.png'><img src="/./../imgs/DFS-%E5%9F%BA%E7%A1%80/image-20240222112707429.png" alt="image-20240222112707429"><img src="/./../imgs/DFS-%E5%9F%BA%E7%A1%80/image-20240222112712615.png" alt="image-20240222112712615" class='item-img' data-src='/./../imgs/DFS-%E5%9F%BA%E7%A1%80/image-20240222112712615.png'><img src="/./../imgs/DFS-%E5%9F%BA%E7%A1%80/image-20240222112712615.png" alt="image-20240222112712615"><img src="/./../imgs/DFS-%E5%9F%BA%E7%A1%80/image-20240222112723680.png" alt="image-20240222112723680" class='item-img' data-src='/./../imgs/DFS-%E5%9F%BA%E7%A1%80/image-20240222112723680.png'><img src="/./../imgs/DFS-%E5%9F%BA%E7%A1%80/image-20240222112723680.png" alt="image-20240222112723680"><img src="/./../imgs/DFS-%E5%9F%BA%E7%A1%80/image-20240222112733382.png" alt="image-20240222112733382" class='item-img' data-src='/./../imgs/DFS-%E5%9F%BA%E7%A1%80/image-20240222112733382.png'><img src="/./../imgs/DFS-%E5%9F%BA%E7%A1%80/image-20240222112733382.png" alt="image-20240222112733382"><img src="/./../imgs/DFS-%E5%9F%BA%E7%A1%80/image-20240222112741922.png" alt="image-20240222112741922" class='item-img' data-src='/./../imgs/DFS-%E5%9F%BA%E7%A1%80/image-20240222112741922.png'><img src="/./../imgs/DFS-%E5%9F%BA%E7%A1%80/image-20240222112741922.png" alt="image-20240222112741922"><img src="/./../imgs/DFS-%E5%9F%BA%E7%A1%80/image-20240222112805799.png" alt="image-20240222112805799" class='item-img' data-src='/./../imgs/DFS-%E5%9F%BA%E7%A1%80/image-20240222112805799.png'><img src="/./../imgs/DFS-%E5%9F%BA%E7%A1%80/image-20240222112805799.png" alt="image-20240222112805799"><img src="/./../imgs/DFS-%E5%9F%BA%E7%A1%80/image-20240222112815688.png" alt="image-20240222112815688"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第三章：搜索</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>DFS-回溯</title>
    <url>/2024/02/22/DFS-%E5%9B%9E%E6%BA%AF/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/DFS-%E5%9B%9E%E6%BA%AF/image-20240222112858876.png'><img src="/./../imgs/DFS-%E5%9B%9E%E6%BA%AF/image-20240222112858876.png" alt="image-20240222112858876"><img src="/./../imgs/DFS-%E5%9B%9E%E6%BA%AF/image-20240222112903690.png" alt="image-20240222112903690" class='item-img' data-src='/./../imgs/DFS-%E5%9B%9E%E6%BA%AF/image-20240222112903690.png'><img src="/./../imgs/DFS-%E5%9B%9E%E6%BA%AF/image-20240222112903690.png" alt="image-20240222112903690"><img src="/./../imgs/DFS-%E5%9B%9E%E6%BA%AF/image-20240222112913112.png" alt="image-20240222112913112" class='item-img' data-src='/./../imgs/DFS-%E5%9B%9E%E6%BA%AF/image-20240222112913112.png'><img src="/./../imgs/DFS-%E5%9B%9E%E6%BA%AF/image-20240222112913112.png" alt="image-20240222112913112"><img src="/./../imgs/DFS-%E5%9B%9E%E6%BA%AF/image-20240222112921580.png" alt="image-20240222112921580" class='item-img' data-src='/./../imgs/DFS-%E5%9B%9E%E6%BA%AF/image-20240222112921580.png'><img src="/./../imgs/DFS-%E5%9B%9E%E6%BA%AF/image-20240222112921580.png" alt="image-20240222112921580"><img src="/./../imgs/DFS-%E5%9B%9E%E6%BA%AF/image-20240222112930367.png" alt="image-20240222112930367" class='item-img' data-src='/./../imgs/DFS-%E5%9B%9E%E6%BA%AF/image-20240222112930367.png'><img src="/./../imgs/DFS-%E5%9B%9E%E6%BA%AF/image-20240222112930367.png" alt="image-20240222112930367"><img src="/./../imgs/DFS-%E5%9B%9E%E6%BA%AF/image-20240222112938763.png" alt="image-20240222112938763" class='item-img' data-src='/./../imgs/DFS-%E5%9B%9E%E6%BA%AF/image-20240222112938763.png'><img src="/./../imgs/DFS-%E5%9B%9E%E6%BA%AF/image-20240222112938763.png" alt="image-20240222112938763"><img src="/./../imgs/DFS-%E5%9B%9E%E6%BA%AF/image-20240222112946650.png" alt="image-20240222112946650" class='item-img' data-src='/./../imgs/DFS-%E5%9B%9E%E6%BA%AF/image-20240222112946650.png'><img src="/./../imgs/DFS-%E5%9B%9E%E6%BA%AF/image-20240222112946650.png" alt="image-20240222112946650"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第三章：搜索</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>LCS</title>
    <url>/2024/02/22/LCS/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/LCS/image-20240222142941134.png'><img src="/./../imgs/LCS/image-20240222142941134.png" alt="image-20240222142941134"><img src="/./../imgs/LCS/image-20240222143000232.png" alt="image-20240222143000232" class='item-img' data-src='/./../imgs/LCS/image-20240222143000232.png'><img src="/./../imgs/LCS/image-20240222143000232.png" alt="image-20240222143000232"><img src="/./../imgs/LCS/image-20240222143028066.png" alt="image-20240222143028066"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第四章：动态规划</category>
        <category>动态规划基础</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>LIS</title>
    <url>/2024/02/22/LIS/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/LIS/image-20240222142750287.png'><img src="/./../imgs/LIS/image-20240222142750287.png" alt="image-20240222142750287"><img src="/./../imgs/LIS/image-20240222142758466.png" alt="image-20240222142758466" class='item-img' data-src='/./../imgs/LIS/image-20240222142758466.png'><img src="/./../imgs/LIS/image-20240222142758466.png" alt="image-20240222142758466"><img src="/./../imgs/LIS/image-20240222142812794.png" alt="image-20240222142812794" class='item-img' data-src='/./../imgs/LIS/image-20240222142812794.png'><img src="/./../imgs/LIS/image-20240222142812794.png" alt="image-20240222142812794"><img src="/./../imgs/LIS/image-20240222142841071.png" alt="image-20240222142841071"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第四章：动态规划</category>
        <category>动态规划基础</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>Python开发环境与基础知识</title>
    <url>/2024/02/21/Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240221212645001.png'><img src="/./../imgs/Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240221212645001.png" alt="image-20240221212645001"></p>
<p class='item-img' data-src='/./../imgs/Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240221212703666.png'><img src="/./../imgs/Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240221212703666.png" alt="image-20240221212703666"></p>
<p class='item-img' data-src='/./../imgs/Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240221212715849.png'><img src="/./../imgs/Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240221212715849.png" alt="image-20240221212715849"></p>
<p class='item-img' data-src='/./../imgs/Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240221212728371.png'><img src="/./../imgs/Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240221212728371.png" alt="image-20240221212728371"></p>
<p class='item-img' data-src='/./../imgs/Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240221212739932.png'><img src="/./../imgs/Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240221212739932.png" alt="image-20240221212739932"></p>
<p class='item-img' data-src='/./../imgs/Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240221212759396.png'><img src="/./../imgs/Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240221212759396.png" alt="image-20240221212759396"></p>
<p class='item-img' data-src='/./../imgs/Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240221212810735.png'><img src="/./../imgs/Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240221212810735.png" alt="image-20240221212810735"></p>
<p class='item-img' data-src='/./../imgs/Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240221212824944.png'><img src="/./../imgs/Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240221212824944.png" alt="image-20240221212824944"></p>
<p class='item-img' data-src='/./../imgs/Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240221213119364.png'><img src="/./../imgs/Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240221213119364.png" alt="image-20240221213119364"></p>
<p class='item-img' data-src='/./../imgs/Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240221213130189.png'><img src="/./../imgs/Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240221213130189.png" alt="image-20240221213130189"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第一章：语言基础</category>
        <category>编程基础</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>Python输入输出</title>
    <url>/2024/02/21/Python%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/Python%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/image-20240221213902685.png'><img src="/./../imgs/Python%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/image-20240221213902685.png" alt="image-20240221213902685"></p>
<p class='item-img' data-src='/./../imgs/Python%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/image-20240221213915397.png'><img src="/./../imgs/Python%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/image-20240221213915397.png" alt="image-20240221213915397"><img src="/./../imgs/Python%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/image-20240221213925703.png" alt="image-20240221213925703"></p>
<p class='item-img' data-src='/./../imgs/Python%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/image-20240221213937602.png'><img src="/./../imgs/Python%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/image-20240221213937602.png" alt="image-20240221213937602"><img src="/./../imgs/Python%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/image-20240221213947577.png" alt="image-20240221213947577" class='item-img' data-src='/./../imgs/Python%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/image-20240221213947577.png'><img src="/./../imgs/Python%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/image-20240221213947577.png" alt="image-20240221213947577"></p>
<p class='item-img' data-src='/./../imgs/Python%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/image-20240221214008221.png'><img src="/./../imgs/Python%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/image-20240221214008221.png" alt="image-20240221214008221"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第一章：语言基础</category>
        <category>编程基础</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>collections</title>
    <url>/2024/02/21/collections/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/collections/image-20240221223509574.png'><img src="/./../imgs/collections/image-20240221223509574.png" alt="image-20240221223509574"><img src="/./../imgs/collections/image-20240221223515065.png" alt="image-20240221223515065" class='item-img' data-src='/./../imgs/collections/image-20240221223515065.png'><img src="/./../imgs/collections/image-20240221223515065.png" alt="image-20240221223515065"><img src="/./../imgs/collections/image-20240221223522902.png" alt="image-20240221223522902" class='item-img' data-src='/./../imgs/collections/image-20240221223522902.png'><img src="/./../imgs/collections/image-20240221223522902.png" alt="image-20240221223522902"><img src="/./../imgs/collections/image-20240221223531621.png" alt="image-20240221223531621" class='item-img' data-src='/./../imgs/collections/image-20240221223531621.png'><img src="/./../imgs/collections/image-20240221223531621.png" alt="image-20240221223531621"><img src="/./../imgs/collections/image-20240221223539036.png" alt="image-20240221223539036" class='item-img' data-src='/./../imgs/collections/image-20240221223539036.png'><img src="/./../imgs/collections/image-20240221223539036.png" alt="image-20240221223539036"><img src="/./../imgs/collections/image-20240221223549009.png" alt="image-20240221223549009" class='item-img' data-src='/./../imgs/collections/image-20240221223549009.png'><img src="/./../imgs/collections/image-20240221223549009.png" alt="image-20240221223549009"><img src="/./../imgs/collections/image-20240221223605696.png" alt="image-20240221223605696" class='item-img' data-src='/./../imgs/collections/image-20240221223605696.png'><img src="/./../imgs/collections/image-20240221223605696.png" alt="image-20240221223605696"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第一章：语言基础</category>
        <category>函数</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>for语句</title>
    <url>/2024/02/21/for%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/for%E8%AF%AD%E5%8F%A5/image-20240221215544745.png'><img src="/./../imgs/for%E8%AF%AD%E5%8F%A5/image-20240221215544745.png" alt="image-20240221215544745"><img src="/./../imgs/for%E8%AF%AD%E5%8F%A5/image-20240221215550340.png" alt="image-20240221215550340" class='item-img' data-src='/./../imgs/for%E8%AF%AD%E5%8F%A5/image-20240221215550340.png'><img src="/./../imgs/for%E8%AF%AD%E5%8F%A5/image-20240221215550340.png" alt="image-20240221215550340"><img src="/./../imgs/for%E8%AF%AD%E5%8F%A5/image-20240221215600726.png" alt="image-20240221215600726" class='item-img' data-src='/./../imgs/for%E8%AF%AD%E5%8F%A5/image-20240221215600726.png'><img src="/./../imgs/for%E8%AF%AD%E5%8F%A5/image-20240221215600726.png" alt="image-20240221215600726"><img src="/./../imgs/for%E8%AF%AD%E5%8F%A5/image-20240221215609988.png" alt="image-20240221215609988" class='item-img' data-src='/./../imgs/for%E8%AF%AD%E5%8F%A5/image-20240221215609988.png'><img src="/./../imgs/for%E8%AF%AD%E5%8F%A5/image-20240221215609988.png" alt="image-20240221215609988"><img src="/./../imgs/for%E8%AF%AD%E5%8F%A5/image-20240221215623189.png" alt="image-20240221215623189" class='item-img' data-src='/./../imgs/for%E8%AF%AD%E5%8F%A5/image-20240221215623189.png'><img src="/./../imgs/for%E8%AF%AD%E5%8F%A5/image-20240221215623189.png" alt="image-20240221215623189"><img src="/./../imgs/for%E8%AF%AD%E5%8F%A5/image-20240221215634954.png" alt="image-20240221215634954" class='item-img' data-src='/./../imgs/for%E8%AF%AD%E5%8F%A5/image-20240221215634954.png'><img src="/./../imgs/for%E8%AF%AD%E5%8F%A5/image-20240221215634954.png" alt="image-20240221215634954"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第一章：语言基础</category>
        <category>循环结构</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>functool</title>
    <url>/2024/02/21/functool/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/functool/image-20240221223812753.png'><img src="/./../imgs/functool/image-20240221223812753.png" alt="image-20240221223812753"><img src="/./../imgs/functool/image-20240221223816838.png" alt="image-20240221223816838" class='item-img' data-src='/./../imgs/functool/image-20240221223816838.png'><img src="/./../imgs/functool/image-20240221223816838.png" alt="image-20240221223816838"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第一章：语言基础</category>
        <category>函数</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>heapq</title>
    <url>/2024/02/21/heapq/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/heapq/image-20240221223705829.png'><img src="/./../imgs/heapq/image-20240221223705829.png" alt="image-20240221223705829"><img src="/./../imgs/heapq/image-20240221223714290.png" alt="image-20240221223714290" class='item-img' data-src='/./../imgs/heapq/image-20240221223714290.png'><img src="/./../imgs/heapq/image-20240221223714290.png" alt="image-20240221223714290"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第一章：语言基础</category>
        <category>函数</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/02/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>itertools</title>
    <url>/2024/02/21/itertools/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/itertools/image-20240221223900522.png'><img src="/./../imgs/itertools/image-20240221223900522.png" alt="image-20240221223900522"><img src="/./../imgs/itertools/image-20240221223905143.png" alt="image-20240221223905143" class='item-img' data-src='/./../imgs/itertools/image-20240221223905143.png'><img src="/./../imgs/itertools/image-20240221223905143.png" alt="image-20240221223905143"><img src="/./../imgs/itertools/image-20240221223915443.png" alt="image-20240221223915443" class='item-img' data-src='/./../imgs/itertools/image-20240221223915443.png'><img src="/./../imgs/itertools/image-20240221223915443.png" alt="image-20240221223915443"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第一章：语言基础</category>
        <category>函数</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>math</title>
    <url>/2024/02/21/math/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/math/image-20240221223402991.png'><img src="/./../imgs/math/image-20240221223402991.png" alt="image-20240221223402991"><img src="/./../imgs/math/image-20240221223407450.png" alt="image-20240221223407450" class='item-img' data-src='/./../imgs/math/image-20240221223407450.png'><img src="/./../imgs/math/image-20240221223407450.png" alt="image-20240221223407450"><img src="/./../imgs/math/image-20240221223416965.png" alt="image-20240221223416965"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第一章：语言基础</category>
        <category>函数</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>while语句</title>
    <url>/2024/02/21/while%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/while%E8%AF%AD%E5%8F%A5/image-20240221220037419.png'><img src="/./../imgs/while%E8%AF%AD%E5%8F%A5/image-20240221220037419.png" alt="image-20240221220037419"><img src="/./../imgs/while%E8%AF%AD%E5%8F%A5/image-20240221220042444.png" alt="image-20240221220042444" class='item-img' data-src='/./../imgs/while%E8%AF%AD%E5%8F%A5/image-20240221220042444.png'><img src="/./../imgs/while%E8%AF%AD%E5%8F%A5/image-20240221220042444.png" alt="image-20240221220042444"><img src="/./../imgs/while%E8%AF%AD%E5%8F%A5/image-20240221220052301.png" alt="image-20240221220052301" class='item-img' data-src='/./../imgs/while%E8%AF%AD%E5%8F%A5/image-20240221220052301.png'><img src="/./../imgs/while%E8%AF%AD%E5%8F%A5/image-20240221220052301.png" alt="image-20240221220052301"><img src="/./../imgs/while%E8%AF%AD%E5%8F%A5/image-20240221220102132.png" alt="image-20240221220102132" class='item-img' data-src='/./../imgs/while%E8%AF%AD%E5%8F%A5/image-20240221220102132.png'><img src="/./../imgs/while%E8%AF%AD%E5%8F%A5/image-20240221220102132.png" alt="image-20240221220102132"><img src="/./../imgs/while%E8%AF%AD%E5%8F%A5/image-20240221220111657.png" alt="image-20240221220111657" class='item-img' data-src='/./../imgs/while%E8%AF%AD%E5%8F%A5/image-20240221220111657.png'><img src="/./../imgs/while%E8%AF%AD%E5%8F%A5/image-20240221220111657.png" alt="image-20240221220111657"><img src="/./../imgs/while%E8%AF%AD%E5%8F%A5/image-20240221220139888.png" alt="image-20240221220139888"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第一章：语言基础</category>
        <category>循环结构</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>if语句</title>
    <url>/2024/02/21/if%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/if%E8%AF%AD%E5%8F%A5/image-20240221215311297.png'><img src="/./../imgs/if%E8%AF%AD%E5%8F%A5/image-20240221215311297.png" alt="image-20240221215311297"></p>
<p class='item-img' data-src='/./../imgs/if%E8%AF%AD%E5%8F%A5/image-20240221215317245.png'><img src="/./../imgs/if%E8%AF%AD%E5%8F%A5/image-20240221215317245.png" alt="image-20240221215317245"></p>
<p class='item-img' data-src='/./../imgs/if%E8%AF%AD%E5%8F%A5/image-20240221215323353.png'><img src="/./../imgs/if%E8%AF%AD%E5%8F%A5/image-20240221215323353.png" alt="image-20240221215323353"></p>
<p class='item-img' data-src='/./../imgs/if%E8%AF%AD%E5%8F%A5/image-20240221215328782.png'><img src="/./../imgs/if%E8%AF%AD%E5%8F%A5/image-20240221215328782.png" alt="image-20240221215328782"></p>
<p class='item-img' data-src='/./../imgs/if%E8%AF%AD%E5%8F%A5/image-20240221215334767.png'><img src="/./../imgs/if%E8%AF%AD%E5%8F%A5/image-20240221215334767.png" alt="image-20240221215334767"></p>
<p class='item-img' data-src='/./../imgs/if%E8%AF%AD%E5%8F%A5/image-20240221215340285.png'><img src="/./../imgs/if%E8%AF%AD%E5%8F%A5/image-20240221215340285.png" alt="image-20240221215340285"></p>
<p class='item-img' data-src='/./../imgs/if%E8%AF%AD%E5%8F%A5/image-20240221215345522.png'><img src="/./../imgs/if%E8%AF%AD%E5%8F%A5/image-20240221215345522.png" alt="image-20240221215345522"></p>
<p class='item-img' data-src='/./../imgs/if%E8%AF%AD%E5%8F%A5/image-20240221215351310.png'><img src="/./../imgs/if%E8%AF%AD%E5%8F%A5/image-20240221215351310.png" alt="image-20240221215351310"></p>
<p class='item-img' data-src='/./../imgs/if%E8%AF%AD%E5%8F%A5/image-20240221215359903.png'><img src="/./../imgs/if%E8%AF%AD%E5%8F%A5/image-20240221215359903.png" alt="image-20240221215359903"></p>
<p class='item-img' data-src='/./../imgs/if%E8%AF%AD%E5%8F%A5/image-20240221215405317.png'><img src="/./../imgs/if%E8%AF%AD%E5%8F%A5/image-20240221215405317.png" alt="image-20240221215405317"><img src="/./../imgs/if%E8%AF%AD%E5%8F%A5/image-20240221215411133.png" alt="image-20240221215411133" class='item-img' data-src='/./../imgs/if%E8%AF%AD%E5%8F%A5/image-20240221215411133.png'><img src="/./../imgs/if%E8%AF%AD%E5%8F%A5/image-20240221215411133.png" alt="image-20240221215411133"><img src="/./../imgs/if%E8%AF%AD%E5%8F%A5/image-20240221215432876.png" alt="image-20240221215432876"></p>
<p class='item-img' data-src='/./../imgs/if%E8%AF%AD%E5%8F%A5/image-20240221215444985.png'><img src="/./../imgs/if%E8%AF%AD%E5%8F%A5/image-20240221215444985.png" alt="image-20240221215444985"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第一章：语言基础</category>
        <category>选择结构</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>二分</title>
    <url>/2024/02/21/%E4%BA%8C%E5%88%86/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E4%BA%8C%E5%88%86/image-20240221231437377.png'><img src="/./../imgs/%E4%BA%8C%E5%88%86/image-20240221231437377.png" alt="image-20240221231437377"><img src="/./../imgs/%E4%BA%8C%E5%88%86/image-20240221231443219.png" alt="image-20240221231443219" class='item-img' data-src='/./../imgs/%E4%BA%8C%E5%88%86/image-20240221231443219.png'><img src="/./../imgs/%E4%BA%8C%E5%88%86/image-20240221231443219.png" alt="image-20240221231443219"><img src="/./../imgs/%E4%BA%8C%E5%88%86/image-20240221231452303.png" alt="image-20240221231452303" class='item-img' data-src='/./../imgs/%E4%BA%8C%E5%88%86/image-20240221231452303.png'><img src="/./../imgs/%E4%BA%8C%E5%88%86/image-20240221231452303.png" alt="image-20240221231452303"><img src="/./../imgs/%E4%BA%8C%E5%88%86/image-20240221231502178.png" alt="image-20240221231502178" class='item-img' data-src='/./../imgs/%E4%BA%8C%E5%88%86/image-20240221231502178.png'><img src="/./../imgs/%E4%BA%8C%E5%88%86/image-20240221231502178.png" alt="image-20240221231502178"><img src="/./../imgs/%E4%BA%8C%E5%88%86/image-20240221231511234.png" alt="image-20240221231511234" class='item-img' data-src='/./../imgs/%E4%BA%8C%E5%88%86/image-20240221231511234.png'><img src="/./../imgs/%E4%BA%8C%E5%88%86/image-20240221231511234.png" alt="image-20240221231511234"><img src="/./../imgs/%E4%BA%8C%E5%88%86/image-20240221231523253.png" alt="image-20240221231523253" class='item-img' data-src='/./../imgs/%E4%BA%8C%E5%88%86/image-20240221231523253.png'><img src="/./../imgs/%E4%BA%8C%E5%88%86/image-20240221231523253.png" alt="image-20240221231523253"><img src="/./../imgs/%E4%BA%8C%E5%88%86/image-20240221231531987.png" alt="image-20240221231531987" class='item-img' data-src='/./../imgs/%E4%BA%8C%E5%88%86/image-20240221231531987.png'><img src="/./../imgs/%E4%BA%8C%E5%88%86/image-20240221231531987.png" alt="image-20240221231531987"><img src="/./../imgs/%E4%BA%8C%E5%88%86/image-20240221231540455.png" alt="image-20240221231540455" class='item-img' data-src='/./../imgs/%E4%BA%8C%E5%88%86/image-20240221231540455.png'><img src="/./../imgs/%E4%BA%8C%E5%88%86/image-20240221231540455.png" alt="image-20240221231540455"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第二章：基础算法</category>
        <category>基础算法</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>二分查找</title>
    <url>/2024/02/21/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/image-20240221224457642.png'><img src="/./../imgs/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/image-20240221224457642.png" alt="image-20240221224457642"><img src="/./../imgs/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/image-20240221224502553.png" alt="image-20240221224502553" class='item-img' data-src='/./../imgs/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/image-20240221224502553.png'><img src="/./../imgs/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/image-20240221224502553.png" alt="image-20240221224502553"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第一章：语言基础</category>
        <category>实践应用</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>二维DP</title>
    <url>/2024/02/22/%E4%BA%8C%E7%BB%B4DP/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E4%BA%8C%E7%BB%B4DP/image-20240222142525119.png'><img src="/./../imgs/%E4%BA%8C%E7%BB%B4DP/image-20240222142525119.png" alt="image-20240222142525119"><img src="/./../imgs/%E4%BA%8C%E7%BB%B4DP/image-20240222142533229.png" alt="image-20240222142533229" class='item-img' data-src='/./../imgs/%E4%BA%8C%E7%BB%B4DP/image-20240222142533229.png'><img src="/./../imgs/%E4%BA%8C%E7%BB%B4DP/image-20240222142533229.png" alt="image-20240222142533229"><img src="/./../imgs/%E4%BA%8C%E7%BB%B4DP/image-20240222142553990.png" alt="image-20240222142553990" class='item-img' data-src='/./../imgs/%E4%BA%8C%E7%BB%B4DP/image-20240222142553990.png'><img src="/./../imgs/%E4%BA%8C%E7%BB%B4DP/image-20240222142553990.png" alt="image-20240222142553990"><img src="/./../imgs/%E4%BA%8C%E7%BB%B4DP/image-20240222142618973.png" alt="image-20240222142618973" class='item-img' data-src='/./../imgs/%E4%BA%8C%E7%BB%B4DP/image-20240222142618973.png'><img src="/./../imgs/%E4%BA%8C%E7%BB%B4DP/image-20240222142618973.png" alt="image-20240222142618973"><img src="/./../imgs/%E4%BA%8C%E7%BB%B4DP/image-20240222142637123.png" alt="image-20240222142637123" class='item-img' data-src='/./../imgs/%E4%BA%8C%E7%BB%B4DP/image-20240222142637123.png'><img src="/./../imgs/%E4%BA%8C%E7%BB%B4DP/image-20240222142637123.png" alt="image-20240222142637123"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第四章：动态规划</category>
        <category>动态规划基础</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>二维费用背包&amp;分组背包</title>
    <url>/2024/02/22/%E4%BA%8C%E7%BB%B4%E8%B4%B9%E7%94%A8%E8%83%8C%E5%8C%85-%E5%88%86%E7%BB%84%E8%83%8C%E5%8C%85/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E4%BA%8C%E7%BB%B4%E8%B4%B9%E7%94%A8%E8%83%8C%E5%8C%85-%E5%88%86%E7%BB%84%E8%83%8C%E5%8C%85/image-20240222143838988.png'><img src="/./../imgs/%E4%BA%8C%E7%BB%B4%E8%B4%B9%E7%94%A8%E8%83%8C%E5%8C%85-%E5%88%86%E7%BB%84%E8%83%8C%E5%8C%85/image-20240222143838988.png" alt="image-20240222143838988"><img src="/./../imgs/%E4%BA%8C%E7%BB%B4%E8%B4%B9%E7%94%A8%E8%83%8C%E5%8C%85-%E5%88%86%E7%BB%84%E8%83%8C%E5%8C%85/image-20240222143845529.png" alt="image-20240222143845529" class='item-img' data-src='/./../imgs/%E4%BA%8C%E7%BB%B4%E8%B4%B9%E7%94%A8%E8%83%8C%E5%8C%85-%E5%88%86%E7%BB%84%E8%83%8C%E5%8C%85/image-20240222143845529.png'><img src="/./../imgs/%E4%BA%8C%E7%BB%B4%E8%B4%B9%E7%94%A8%E8%83%8C%E5%8C%85-%E5%88%86%E7%BB%84%E8%83%8C%E5%8C%85/image-20240222143845529.png" alt="image-20240222143845529"><img src="/./../imgs/%E4%BA%8C%E7%BB%B4%E8%B4%B9%E7%94%A8%E8%83%8C%E5%8C%85-%E5%88%86%E7%BB%84%E8%83%8C%E5%8C%85/image-20240222143858208.png" alt="image-20240222143858208" class='item-img' data-src='/./../imgs/%E4%BA%8C%E7%BB%B4%E8%B4%B9%E7%94%A8%E8%83%8C%E5%8C%85-%E5%88%86%E7%BB%84%E8%83%8C%E5%8C%85/image-20240222143858208.png'><img src="/./../imgs/%E4%BA%8C%E7%BB%B4%E8%B4%B9%E7%94%A8%E8%83%8C%E5%8C%85-%E5%88%86%E7%BB%84%E8%83%8C%E5%8C%85/image-20240222143858208.png" alt="image-20240222143858208"><img src="/./../imgs/%E4%BA%8C%E7%BB%B4%E8%B4%B9%E7%94%A8%E8%83%8C%E5%8C%85-%E5%88%86%E7%BB%84%E8%83%8C%E5%8C%85/image-20240222143910382.png" alt="image-20240222143910382" class='item-img' data-src='/./../imgs/%E4%BA%8C%E7%BB%B4%E8%B4%B9%E7%94%A8%E8%83%8C%E5%8C%85-%E5%88%86%E7%BB%84%E8%83%8C%E5%8C%85/image-20240222143910382.png'><img src="/./../imgs/%E4%BA%8C%E7%BB%B4%E8%B4%B9%E7%94%A8%E8%83%8C%E5%8C%85-%E5%88%86%E7%BB%84%E8%83%8C%E5%8C%85/image-20240222143910382.png" alt="image-20240222143910382"><img src="/./../imgs/%E4%BA%8C%E7%BB%B4%E8%B4%B9%E7%94%A8%E8%83%8C%E5%8C%85-%E5%88%86%E7%BB%84%E8%83%8C%E5%8C%85/image-20240222143923600.png" alt="image-20240222143923600" class='item-img' data-src='/./../imgs/%E4%BA%8C%E7%BB%B4%E8%B4%B9%E7%94%A8%E8%83%8C%E5%8C%85-%E5%88%86%E7%BB%84%E8%83%8C%E5%8C%85/image-20240222143923600.png'><img src="/./../imgs/%E4%BA%8C%E7%BB%B4%E8%B4%B9%E7%94%A8%E8%83%8C%E5%8C%85-%E5%88%86%E7%BB%84%E8%83%8C%E5%8C%85/image-20240222143923600.png" alt="image-20240222143923600"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第四章：动态规划</category>
        <category>背包问题</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>位运算</title>
    <url>/2024/02/21/%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E4%BD%8D%E8%BF%90%E7%AE%97/image-20240221232040286.png'><img src="/./../imgs/%E4%BD%8D%E8%BF%90%E7%AE%97/image-20240221232040286.png" alt="image-20240221232040286"><img src="/./../imgs/%E4%BD%8D%E8%BF%90%E7%AE%97/image-20240221232047084.png" alt="image-20240221232047084" class='item-img' data-src='/./../imgs/%E4%BD%8D%E8%BF%90%E7%AE%97/image-20240221232047084.png'><img src="/./../imgs/%E4%BD%8D%E8%BF%90%E7%AE%97/image-20240221232047084.png" alt="image-20240221232047084"><img src="/./../imgs/%E4%BD%8D%E8%BF%90%E7%AE%97/image-20240221232056347.png" alt="image-20240221232056347" class='item-img' data-src='/./../imgs/%E4%BD%8D%E8%BF%90%E7%AE%97/image-20240221232056347.png'><img src="/./../imgs/%E4%BD%8D%E8%BF%90%E7%AE%97/image-20240221232056347.png" alt="image-20240221232056347"><img src="/./../imgs/%E4%BD%8D%E8%BF%90%E7%AE%97/image-20240221232104286.png" alt="image-20240221232104286" class='item-img' data-src='/./../imgs/%E4%BD%8D%E8%BF%90%E7%AE%97/image-20240221232104286.png'><img src="/./../imgs/%E4%BD%8D%E8%BF%90%E7%AE%97/image-20240221232104286.png" alt="image-20240221232104286"><img src="/./../imgs/%E4%BD%8D%E8%BF%90%E7%AE%97/image-20240221232113412.png" alt="image-20240221232113412" class='item-img' data-src='/./../imgs/%E4%BD%8D%E8%BF%90%E7%AE%97/image-20240221232113412.png'><img src="/./../imgs/%E4%BD%8D%E8%BF%90%E7%AE%97/image-20240221232113412.png" alt="image-20240221232113412"><img src="/./../imgs/%E4%BD%8D%E8%BF%90%E7%AE%97/image-20240221232120744.png" alt="image-20240221232120744" class='item-img' data-src='/./../imgs/%E4%BD%8D%E8%BF%90%E7%AE%97/image-20240221232120744.png'><img src="/./../imgs/%E4%BD%8D%E8%BF%90%E7%AE%97/image-20240221232120744.png" alt="image-20240221232120744"><img src="/./../imgs/%E4%BD%8D%E8%BF%90%E7%AE%97/image-20240221232129019.png" alt="image-20240221232129019" class='item-img' data-src='/./../imgs/%E4%BD%8D%E8%BF%90%E7%AE%97/image-20240221232129019.png'><img src="/./../imgs/%E4%BD%8D%E8%BF%90%E7%AE%97/image-20240221232129019.png" alt="image-20240221232129019"><img src="/./../imgs/%E4%BD%8D%E8%BF%90%E7%AE%97/image-20240221232136340.png" alt="image-20240221232136340" class='item-img' data-src='/./../imgs/%E4%BD%8D%E8%BF%90%E7%AE%97/image-20240221232136340.png'><img src="/./../imgs/%E4%BD%8D%E8%BF%90%E7%AE%97/image-20240221232136340.png" alt="image-20240221232136340"><img src="/./../imgs/%E4%BD%8D%E8%BF%90%E7%AE%97/image-20240221232143331.png" alt="image-20240221232143331"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第二章：基础算法</category>
        <category>基础算法</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>倍增</title>
    <url>/2024/02/21/%E5%80%8D%E5%A2%9E/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E5%80%8D%E5%A2%9E/image-20240221231630731.png'><img src="/./../imgs/%E5%80%8D%E5%A2%9E/image-20240221231630731.png" alt="image-20240221231630731"><img src="/./../imgs/%E5%80%8D%E5%A2%9E/image-20240221231635708.png" alt="image-20240221231635708" class='item-img' data-src='/./../imgs/%E5%80%8D%E5%A2%9E/image-20240221231635708.png'><img src="/./../imgs/%E5%80%8D%E5%A2%9E/image-20240221231635708.png" alt="image-20240221231635708"><img src="/./../imgs/%E5%80%8D%E5%A2%9E/image-20240221231646300.png" alt="image-20240221231646300" class='item-img' data-src='/./../imgs/%E5%80%8D%E5%A2%9E/image-20240221231646300.png'><img src="/./../imgs/%E5%80%8D%E5%A2%9E/image-20240221231646300.png" alt="image-20240221231646300"><img src="/./../imgs/%E5%80%8D%E5%A2%9E/image-20240221231657609.png" alt="image-20240221231657609" class='item-img' data-src='/./../imgs/%E5%80%8D%E5%A2%9E/image-20240221231657609.png'><img src="/./../imgs/%E5%80%8D%E5%A2%9E/image-20240221231657609.png" alt="image-20240221231657609"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第二章：基础算法</category>
        <category>基础算法</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>冒泡排序</title>
    <url>/2024/02/21/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/image-20240221224844137.png'><img src="/./../imgs/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/image-20240221224844137.png" alt="image-20240221224844137"><img src="/./../imgs/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/image-20240221224848717.png" alt="image-20240221224848717" class='item-img' data-src='/./../imgs/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/image-20240221224848717.png'><img src="/./../imgs/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/image-20240221224848717.png" alt="image-20240221224848717"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第二章：基础算法</category>
        <category>排序</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>函数定义与使用</title>
    <url>/2024/02/21/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240221223144476.png'><img src="/./../imgs/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240221223144476.png" alt="image-20240221223144476"><img src="/./../imgs/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240221223149837.png" alt="image-20240221223149837" class='item-img' data-src='/./../imgs/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240221223149837.png'><img src="/./../imgs/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240221223149837.png" alt="image-20240221223149837"><img src="/./../imgs/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240221223158102.png" alt="image-20240221223158102" class='item-img' data-src='/./../imgs/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240221223158102.png'><img src="/./../imgs/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240221223158102.png" alt="image-20240221223158102"><img src="/./../imgs/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240221223210243.png" alt="image-20240221223210243" class='item-img' data-src='/./../imgs/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240221223210243.png'><img src="/./../imgs/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240221223210243.png" alt="image-20240221223210243"><img src="/./../imgs/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240221223217636.png" alt="image-20240221223217636" class='item-img' data-src='/./../imgs/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240221223217636.png'><img src="/./../imgs/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240221223217636.png" alt="image-20240221223217636"><img src="/./../imgs/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240221223237797.png" alt="image-20240221223237797" class='item-img' data-src='/./../imgs/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240221223237797.png'><img src="/./../imgs/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240221223237797.png" alt="image-20240221223237797"><img src="/./../imgs/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240221223247214.png" alt="image-20240221223247214" class='item-img' data-src='/./../imgs/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240221223247214.png'><img src="/./../imgs/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240221223247214.png" alt="image-20240221223247214"><img src="/./../imgs/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240221223255767.png" alt="image-20240221223255767" class='item-img' data-src='/./../imgs/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240221223255767.png'><img src="/./../imgs/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240221223255767.png" alt="image-20240221223255767"><img src="/./../imgs/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240221223303374.png" alt="image-20240221223303374" class='item-img' data-src='/./../imgs/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240221223303374.png'><img src="/./../imgs/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240221223303374.png" alt="image-20240221223303374"><img src="/./../imgs/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240221223312710.png" alt="image-20240221223312710"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第一章：语言基础</category>
        <category>函数</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>列表和元组</title>
    <url>/2024/02/21/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221220549989.png'><img src="/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221220549989.png" alt="image-20240221220549989"><img src="/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221220803586.png" alt="image-20240221220803586" class='item-img' data-src='/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221220803586.png'><img src="/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221220803586.png" alt="image-20240221220803586"><img src="/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221220820075.png" alt="image-20240221220820075" class='item-img' data-src='/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221220820075.png'><img src="/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221220820075.png" alt="image-20240221220820075"><img src="/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221220828733.png" alt="image-20240221220828733" class='item-img' data-src='/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221220828733.png'><img src="/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221220828733.png" alt="image-20240221220828733"><img src="/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221220836720.png" alt="image-20240221220836720" class='item-img' data-src='/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221220836720.png'><img src="/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221220836720.png" alt="image-20240221220836720"><img src="/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221220845617.png" alt="image-20240221220845617" class='item-img' data-src='/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221220845617.png'><img src="/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221220845617.png" alt="image-20240221220845617"><img src="/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221220852872.png" alt="image-20240221220852872" class='item-img' data-src='/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221220852872.png'><img src="/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221220852872.png" alt="image-20240221220852872"><img src="/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221220859777.png" alt="image-20240221220859777" class='item-img' data-src='/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221220859777.png'><img src="/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221220859777.png" alt="image-20240221220859777"><img src="/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221220908800.png" alt="image-20240221220908800" class='item-img' data-src='/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221220908800.png'><img src="/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221220908800.png" alt="image-20240221220908800"><img src="/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221220927749.png" alt="image-20240221220927749" class='item-img' data-src='/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221220927749.png'><img src="/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221220927749.png" alt="image-20240221220927749"><img src="/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221221236243.png" alt="image-20240221221236243" class='item-img' data-src='/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221221236243.png'><img src="/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221221236243.png" alt="image-20240221221236243"><img src="/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221221245011.png" alt="image-20240221221245011" class='item-img' data-src='/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221221245011.png'><img src="/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221221245011.png" alt="image-20240221221245011"><img src="/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221221254515.png" alt="image-20240221221254515" class='item-img' data-src='/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221221254515.png'><img src="/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221221254515.png" alt="image-20240221221254515"><img src="/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221221301606.png" alt="image-20240221221301606" class='item-img' data-src='/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221221301606.png'><img src="/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221221301606.png" alt="image-20240221221301606"><img src="/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221221330471.png" alt="image-20240221221330471" class='item-img' data-src='/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221221330471.png'><img src="/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221221330471.png" alt="image-20240221221330471"><img src="/./../imgs/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/image-20240221221340593.png" alt="image-20240221221340593"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第一章：语言基础</category>
        <category>基础数据结构</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>单调队列优多重背包</title>
    <url>/2024/02/22/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85/image-20240222143542527.png'><img src="/./../imgs/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85/image-20240222143542527.png" alt="image-20240222143542527"><img src="/./../imgs/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85/image-20240222143549813.png" alt="image-20240222143549813" class='item-img' data-src='/./../imgs/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85/image-20240222143549813.png'><img src="/./../imgs/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85/image-20240222143549813.png" alt="image-20240222143549813"><img src="/./../imgs/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85/image-20240222143604684.png" alt="image-20240222143604684" class='item-img' data-src='/./../imgs/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85/image-20240222143604684.png'><img src="/./../imgs/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85/image-20240222143604684.png" alt="image-20240222143604684"><img src="/./../imgs/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85/image-20240222143737279.png" alt="image-20240222143737279" class='item-img' data-src='/./../imgs/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85/image-20240222143737279.png'><img src="/./../imgs/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85/image-20240222143737279.png" alt="image-20240222143737279"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第四章：动态规划</category>
        <category>背包问题</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>前缀和</title>
    <url>/2024/02/21/%E5%89%8D%E7%BC%80%E5%92%8C/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E5%89%8D%E7%BC%80%E5%92%8C/image-20240221230643240.png'><img src="/./../imgs/%E5%89%8D%E7%BC%80%E5%92%8C/image-20240221230643240.png" alt="image-20240221230643240"><img src="/./../imgs/%E5%89%8D%E7%BC%80%E5%92%8C/image-20240221230646984.png" alt="image-20240221230646984" class='item-img' data-src='/./../imgs/%E5%89%8D%E7%BC%80%E5%92%8C/image-20240221230646984.png'><img src="/./../imgs/%E5%89%8D%E7%BC%80%E5%92%8C/image-20240221230646984.png" alt="image-20240221230646984"><img src="/./../imgs/%E5%89%8D%E7%BC%80%E5%92%8C/image-20240221230653707.png" alt="image-20240221230653707" class='item-img' data-src='/./../imgs/%E5%89%8D%E7%BC%80%E5%92%8C/image-20240221230653707.png'><img src="/./../imgs/%E5%89%8D%E7%BC%80%E5%92%8C/image-20240221230653707.png" alt="image-20240221230653707"><img src="/./../imgs/%E5%89%8D%E7%BC%80%E5%92%8C/image-20240221230701367.png" alt="image-20240221230701367" class='item-img' data-src='/./../imgs/%E5%89%8D%E7%BC%80%E5%92%8C/image-20240221230701367.png'><img src="/./../imgs/%E5%89%8D%E7%BC%80%E5%92%8C/image-20240221230701367.png" alt="image-20240221230701367"><img src="/./../imgs/%E5%89%8D%E7%BC%80%E5%92%8C/image-20240221230713537.png" alt="image-20240221230713537" class='item-img' data-src='/./../imgs/%E5%89%8D%E7%BC%80%E5%92%8C/image-20240221230713537.png'><img src="/./../imgs/%E5%89%8D%E7%BC%80%E5%92%8C/image-20240221230713537.png" alt="image-20240221230713537"><img src="/./../imgs/%E5%89%8D%E7%BC%80%E5%92%8C/image-20240221230720730.png" alt="image-20240221230720730" class='item-img' data-src='/./../imgs/%E5%89%8D%E7%BC%80%E5%92%8C/image-20240221230720730.png'><img src="/./../imgs/%E5%89%8D%E7%BC%80%E5%92%8C/image-20240221230720730.png" alt="image-20240221230720730"><img src="/./../imgs/%E5%89%8D%E7%BC%80%E5%92%8C/image-20240221230735025.png" alt="image-20240221230735025" class='item-img' data-src='/./../imgs/%E5%89%8D%E7%BC%80%E5%92%8C/image-20240221230735025.png'><img src="/./../imgs/%E5%89%8D%E7%BC%80%E5%92%8C/image-20240221230735025.png" alt="image-20240221230735025"><img src="/./../imgs/%E5%89%8D%E7%BC%80%E5%92%8C/image-20240221230742844.png" alt="image-20240221230742844"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第二章：基础算法</category>
        <category>基础算法</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>基础算法</title>
    <url>/2024/02/21/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/image-20240221225955641.png'><img src="/./../imgs/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/image-20240221225955641.png" alt="image-20240221225955641"><img src="/./../imgs/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/image-20240221230000345.png" alt="image-20240221230000345" class='item-img' data-src='/./../imgs/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/image-20240221230000345.png'><img src="/./../imgs/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/image-20240221230000345.png" alt="image-20240221230000345"><img src="/./../imgs/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/image-20240221230009161.png" alt="image-20240221230009161" class='item-img' data-src='/./../imgs/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/image-20240221230009161.png'><img src="/./../imgs/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/image-20240221230009161.png" alt="image-20240221230009161"><img src="/./../imgs/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/image-20240221230017951.png" alt="image-20240221230017951" class='item-img' data-src='/./../imgs/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/image-20240221230017951.png'><img src="/./../imgs/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/image-20240221230017951.png" alt="image-20240221230017951"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第二章：基础算法</category>
        <category>基础算法</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>双指针</title>
    <url>/2024/02/21/%E5%8F%8C%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E5%8F%8C%E6%8C%87%E9%92%88/image-20240221231249785.png'><img src="/./../imgs/%E5%8F%8C%E6%8C%87%E9%92%88/image-20240221231249785.png" alt="image-20240221231249785"><img src="/./../imgs/%E5%8F%8C%E6%8C%87%E9%92%88/image-20240221231254077.png" alt="image-20240221231254077" class='item-img' data-src='/./../imgs/%E5%8F%8C%E6%8C%87%E9%92%88/image-20240221231254077.png'><img src="/./../imgs/%E5%8F%8C%E6%8C%87%E9%92%88/image-20240221231254077.png" alt="image-20240221231254077"><img src="/./../imgs/%E5%8F%8C%E6%8C%87%E9%92%88/image-20240221231301782.png" alt="image-20240221231301782" class='item-img' data-src='/./../imgs/%E5%8F%8C%E6%8C%87%E9%92%88/image-20240221231301782.png'><img src="/./../imgs/%E5%8F%8C%E6%8C%87%E9%92%88/image-20240221231301782.png" alt="image-20240221231301782"><img src="/./../imgs/%E5%8F%8C%E6%8C%87%E9%92%88/image-20240221231309946.png" alt="image-20240221231309946" class='item-img' data-src='/./../imgs/%E5%8F%8C%E6%8C%87%E9%92%88/image-20240221231309946.png'><img src="/./../imgs/%E5%8F%8C%E6%8C%87%E9%92%88/image-20240221231309946.png" alt="image-20240221231309946"><img src="/./../imgs/%E5%8F%8C%E6%8C%87%E9%92%88/image-20240221231319111.png" alt="image-20240221231319111" class='item-img' data-src='/./../imgs/%E5%8F%8C%E6%8C%87%E9%92%88/image-20240221231319111.png'><img src="/./../imgs/%E5%8F%8C%E6%8C%87%E9%92%88/image-20240221231319111.png" alt="image-20240221231319111">  <img src="/./../imgs/%E5%8F%8C%E6%8C%87%E9%92%88/image-20240221231346490.png" alt="image-20240221231346490" class='item-img' data-src='/./../imgs/%E5%8F%8C%E6%8C%87%E9%92%88/image-20240221231346490.png'><img src="/./../imgs/%E5%8F%8C%E6%8C%87%E9%92%88/image-20240221231346490.png" alt="image-20240221231346490"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第二章：基础算法</category>
        <category>基础算法</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>字典</title>
    <url>/2024/02/21/%E5%AD%97%E5%85%B8/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E5%AD%97%E5%85%B8/image-20240221222346041.png'><img src="/./../imgs/%E5%AD%97%E5%85%B8/image-20240221222346041.png" alt="image-20240221222346041"><img src="/./../imgs/%E5%AD%97%E5%85%B8/image-20240221222351366.png" alt="image-20240221222351366" class='item-img' data-src='/./../imgs/%E5%AD%97%E5%85%B8/image-20240221222351366.png'><img src="/./../imgs/%E5%AD%97%E5%85%B8/image-20240221222351366.png" alt="image-20240221222351366"><img src="/./../imgs/%E5%AD%97%E5%85%B8/image-20240221222358745.png" alt="image-20240221222358745" class='item-img' data-src='/./../imgs/%E5%AD%97%E5%85%B8/image-20240221222358745.png'><img src="/./../imgs/%E5%AD%97%E5%85%B8/image-20240221222358745.png" alt="image-20240221222358745"><img src="/./../imgs/%E5%AD%97%E5%85%B8/image-20240221222405543.png" alt="image-20240221222405543" class='item-img' data-src='/./../imgs/%E5%AD%97%E5%85%B8/image-20240221222405543.png'><img src="/./../imgs/%E5%AD%97%E5%85%B8/image-20240221222405543.png" alt="image-20240221222405543"><img src="/./../imgs/%E5%AD%97%E5%85%B8/image-20240221222413703.png" alt="image-20240221222413703" class='item-img' data-src='/./../imgs/%E5%AD%97%E5%85%B8/image-20240221222413703.png'><img src="/./../imgs/%E5%AD%97%E5%85%B8/image-20240221222413703.png" alt="image-20240221222413703"><img src="/./../imgs/%E5%AD%97%E5%85%B8/image-20240221222423129.png" alt="image-20240221222423129" class='item-img' data-src='/./../imgs/%E5%AD%97%E5%85%B8/image-20240221222423129.png'><img src="/./../imgs/%E5%AD%97%E5%85%B8/image-20240221222423129.png" alt="image-20240221222423129">	<img src="/./../imgs/%E5%AD%97%E5%85%B8/image-20240221222432037.png" alt="image-20240221222432037" class='item-img' data-src='/./../imgs/%E5%AD%97%E5%85%B8/image-20240221222432037.png'><img src="/./../imgs/%E5%AD%97%E5%85%B8/image-20240221222432037.png" alt="image-20240221222432037"><img src="/./../imgs/%E5%AD%97%E5%85%B8/image-20240221222439828.png" alt="image-20240221222439828" class='item-img' data-src='/./../imgs/%E5%AD%97%E5%85%B8/image-20240221222439828.png'><img src="/./../imgs/%E5%AD%97%E5%85%B8/image-20240221222439828.png" alt="image-20240221222439828"><img src="/./../imgs/%E5%AD%97%E5%85%B8/image-20240221222446914.png" alt="image-20240221222446914" class='item-img' data-src='/./../imgs/%E5%AD%97%E5%85%B8/image-20240221222446914.png'><img src="/./../imgs/%E5%AD%97%E5%85%B8/image-20240221222446914.png" alt="image-20240221222446914"><img src="/./../imgs/%E5%AD%97%E5%85%B8/image-20240221222455280.png" alt="image-20240221222455280" class='item-img' data-src='/./../imgs/%E5%AD%97%E5%85%B8/image-20240221222455280.png'><img src="/./../imgs/%E5%AD%97%E5%85%B8/image-20240221222455280.png" alt="image-20240221222455280"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第一章：语言基础</category>
        <category>基础数据结构</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串</title>
    <url>/2024/02/21/%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221221426266.png'><img src="/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221221426266.png" alt="image-20240221221426266"><img src="/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221221431505.png" alt="image-20240221221431505" class='item-img' data-src='/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221221431505.png'><img src="/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221221431505.png" alt="image-20240221221431505"><img src="/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221221441127.png" alt="image-20240221221441127" class='item-img' data-src='/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221221441127.png'><img src="/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221221441127.png" alt="image-20240221221441127"><img src="/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221221449788.png" alt="image-20240221221449788" class='item-img' data-src='/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221221449788.png'><img src="/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221221449788.png" alt="image-20240221221449788"><img src="/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221222130526.png" alt="image-20240221222130526" class='item-img' data-src='/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221222130526.png'><img src="/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221222130526.png" alt="image-20240221222130526"><img src="/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221222140218.png" alt="image-20240221222140218" class='item-img' data-src='/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221222140218.png'><img src="/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221222140218.png" alt="image-20240221222140218"><img src="/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221222147579.png" alt="image-20240221222147579" class='item-img' data-src='/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221222147579.png'><img src="/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221222147579.png" alt="image-20240221222147579"><img src="/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221222155712.png" alt="image-20240221222155712" class='item-img' data-src='/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221222155712.png'><img src="/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221222155712.png" alt="image-20240221222155712"><img src="/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221222203657.png" alt="image-20240221222203657" class='item-img' data-src='/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221222203657.png'><img src="/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221222203657.png" alt="image-20240221222203657"><img src="/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221222211491.png" alt="image-20240221222211491" class='item-img' data-src='/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221222211491.png'><img src="/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221222211491.png" alt="image-20240221222211491"><img src="/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221222219995.png" alt="image-20240221222219995" class='item-img' data-src='/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221222219995.png'><img src="/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221222219995.png" alt="image-20240221222219995"><img src="/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221222227854.png" alt="image-20240221222227854" class='item-img' data-src='/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221222227854.png'><img src="/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221222227854.png" alt="image-20240221222227854"><img src="/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221222236617.png" alt="image-20240221222236617" class='item-img' data-src='/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221222236617.png'><img src="/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221222236617.png" alt="image-20240221222236617"><img src="/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221222244639.png" alt="image-20240221222244639" class='item-img' data-src='/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221222244639.png'><img src="/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221222244639.png" alt="image-20240221222244639"><img src="/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221222251528.png" alt="image-20240221222251528" class='item-img' data-src='/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221222251528.png'><img src="/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221222251528.png" alt="image-20240221222251528"><img src="/./../imgs/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240221222300550.png" alt="image-20240221222300550"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第一章：语言基础</category>
        <category>基础数据结构</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>差分</title>
    <url>/2024/02/21/%E5%B7%AE%E5%88%86/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E5%B7%AE%E5%88%86/image-20240221230846735.png'><img src="/./../imgs/%E5%B7%AE%E5%88%86/image-20240221230846735.png" alt="image-20240221230846735"><img src="/./../imgs/%E5%B7%AE%E5%88%86/image-20240221230850787.png" alt="image-20240221230850787" class='item-img' data-src='/./../imgs/%E5%B7%AE%E5%88%86/image-20240221230850787.png'><img src="/./../imgs/%E5%B7%AE%E5%88%86/image-20240221230850787.png" alt="image-20240221230850787"><img src="/./../imgs/%E5%B7%AE%E5%88%86/image-20240221230859239.png" alt="image-20240221230859239" class='item-img' data-src='/./../imgs/%E5%B7%AE%E5%88%86/image-20240221230859239.png'><img src="/./../imgs/%E5%B7%AE%E5%88%86/image-20240221230859239.png" alt="image-20240221230859239"><img src="/./../imgs/%E5%B7%AE%E5%88%86/image-20240221230906987.png" alt="image-20240221230906987" class='item-img' data-src='/./../imgs/%E5%B7%AE%E5%88%86/image-20240221230906987.png'><img src="/./../imgs/%E5%B7%AE%E5%88%86/image-20240221230906987.png" alt="image-20240221230906987"><img src="/./../imgs/%E5%B7%AE%E5%88%86/image-20240221230914034.png" alt="image-20240221230914034" class='item-img' data-src='/./../imgs/%E5%B7%AE%E5%88%86/image-20240221230914034.png'><img src="/./../imgs/%E5%B7%AE%E5%88%86/image-20240221230914034.png" alt="image-20240221230914034"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第二章：基础算法</category>
        <category>基础算法</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>常用库函数</title>
    <url>/2024/02/21/%E5%B8%B8%E7%94%A8%E5%BA%93%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E5%B8%B8%E7%94%A8%E5%BA%93%E5%87%BD%E6%95%B0/image-20240221224152255.png'><img src="/./../imgs/%E5%B8%B8%E7%94%A8%E5%BA%93%E5%87%BD%E6%95%B0/image-20240221224152255.png" alt="image-20240221224152255"><img src="/./../imgs/%E5%B8%B8%E7%94%A8%E5%BA%93%E5%87%BD%E6%95%B0/image-20240221224157569.png" alt="image-20240221224157569" class='item-img' data-src='/./../imgs/%E5%B8%B8%E7%94%A8%E5%BA%93%E5%87%BD%E6%95%B0/image-20240221224157569.png'><img src="/./../imgs/%E5%B8%B8%E7%94%A8%E5%BA%93%E5%87%BD%E6%95%B0/image-20240221224157569.png" alt="image-20240221224157569"><img src="/./../imgs/%E5%B8%B8%E7%94%A8%E5%BA%93%E5%87%BD%E6%95%B0/image-20240221224211031.png" alt="image-20240221224211031" class='item-img' data-src='/./../imgs/%E5%B8%B8%E7%94%A8%E5%BA%93%E5%87%BD%E6%95%B0/image-20240221224211031.png'><img src="/./../imgs/%E5%B8%B8%E7%94%A8%E5%BA%93%E5%87%BD%E6%95%B0/image-20240221224211031.png" alt="image-20240221224211031"><img src="/./../imgs/%E5%B8%B8%E7%94%A8%E5%BA%93%E5%87%BD%E6%95%B0/image-20240221224220419.png" alt="image-20240221224220419" class='item-img' data-src='/./../imgs/%E5%B8%B8%E7%94%A8%E5%BA%93%E5%87%BD%E6%95%B0/image-20240221224220419.png'><img src="/./../imgs/%E5%B8%B8%E7%94%A8%E5%BA%93%E5%87%BD%E6%95%B0/image-20240221224220419.png" alt="image-20240221224220419"><img src="/./../imgs/%E5%B8%B8%E7%94%A8%E5%BA%93%E5%87%BD%E6%95%B0/image-20240221224230648.png" alt="image-20240221224230648" class='item-img' data-src='/./../imgs/%E5%B8%B8%E7%94%A8%E5%BA%93%E5%87%BD%E6%95%B0/image-20240221224230648.png'><img src="/./../imgs/%E5%B8%B8%E7%94%A8%E5%BA%93%E5%87%BD%E6%95%B0/image-20240221224230648.png" alt="image-20240221224230648"><img src="/./../imgs/%E5%B8%B8%E7%94%A8%E5%BA%93%E5%87%BD%E6%95%B0/image-20240221224242810.png" alt="image-20240221224242810"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第一章：语言基础</category>
        <category>类的定义和使用</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>完全背包</title>
    <url>/2024/02/22/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/image-20240222143338159.png'><img src="/./../imgs/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/image-20240222143338159.png" alt="image-20240222143338159"><img src="/./../imgs/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/image-20240222143345476.png" alt="image-20240222143345476" class='item-img' data-src='/./../imgs/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/image-20240222143345476.png'><img src="/./../imgs/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/image-20240222143345476.png" alt="image-20240222143345476"><img src="/./../imgs/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/image-20240222143358926.png" alt="image-20240222143358926" class='item-img' data-src='/./../imgs/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/image-20240222143358926.png'><img src="/./../imgs/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/image-20240222143358926.png" alt="image-20240222143358926"><img src="/./../imgs/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/image-20240222143422627.png" alt="image-20240222143422627" class='item-img' data-src='/./../imgs/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/image-20240222143422627.png'><img src="/./../imgs/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/image-20240222143422627.png" alt="image-20240222143422627"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第四章：动态规划</category>
        <category>背包问题</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>归并排序</title>
    <url>/2024/02/21/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/image-20240221225209102.png'><img src="/./../imgs/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/image-20240221225209102.png" alt="image-20240221225209102"><img src="/./../imgs/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/image-20240221225213139.png" alt="image-20240221225213139" class='item-img' data-src='/./../imgs/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/image-20240221225213139.png'><img src="/./../imgs/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/image-20240221225213139.png" alt="image-20240221225213139"><img src="/./../imgs/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/image-20240221225225147.png" alt="image-20240221225225147" class='item-img' data-src='/./../imgs/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/image-20240221225225147.png'><img src="/./../imgs/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/image-20240221225225147.png" alt="image-20240221225225147"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第二章：基础算法</category>
        <category>排序</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>常量、变量与运算符</title>
    <url>/2024/02/21/%E5%B8%B8%E9%87%8F%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E5%B8%B8%E9%87%8F%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20240221214110296.png'><img src="/./../imgs/%E5%B8%B8%E9%87%8F%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20240221214110296.png" alt="image-20240221214110296"><img src="/./../imgs/%E5%B8%B8%E9%87%8F%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20240221214126383.png" alt="image-20240221214126383"></p>
<p class='item-img' data-src='/./../imgs/%E5%B8%B8%E9%87%8F%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20240221214134728.png'><img src="/./../imgs/%E5%B8%B8%E9%87%8F%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20240221214134728.png" alt="image-20240221214134728"></p>
<p class='item-img' data-src='/./../imgs/%E5%B8%B8%E9%87%8F%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20240221214200076.png'><img src="/./../imgs/%E5%B8%B8%E9%87%8F%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20240221214200076.png" alt="image-20240221214200076"></p>
<p class='item-img' data-src='/./../imgs/%E5%B8%B8%E9%87%8F%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20240221214210558.png'><img src="/./../imgs/%E5%B8%B8%E9%87%8F%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20240221214210558.png" alt="image-20240221214210558"></p>
<p class='item-img' data-src='/./../imgs/%E5%B8%B8%E9%87%8F%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20240221214219520.png'><img src="/./../imgs/%E5%B8%B8%E9%87%8F%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20240221214219520.png" alt="image-20240221214219520"></p>
<p class='item-img' data-src='/./../imgs/%E5%B8%B8%E9%87%8F%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20240221214229793.png'><img src="/./../imgs/%E5%B8%B8%E9%87%8F%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20240221214229793.png" alt="image-20240221214229793"></p>
<p class='item-img' data-src='/./../imgs/%E5%B8%B8%E9%87%8F%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20240221214237176.png'><img src="/./../imgs/%E5%B8%B8%E9%87%8F%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20240221214237176.png" alt="image-20240221214237176"></p>
<p class='item-img' data-src='/./../imgs/%E5%B8%B8%E9%87%8F%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20240221214246396.png'><img src="/./../imgs/%E5%B8%B8%E9%87%8F%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20240221214246396.png" alt="image-20240221214246396"><img src="/./../imgs/%E5%B8%B8%E9%87%8F%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20240221214254820.png" alt="image-20240221214254820"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第一章：语言基础</category>
        <category>编程基础</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>循环嵌套</title>
    <url>/2024/02/21/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220238457.png'><img src="/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220238457.png" alt="image-20240221220238457"><img src="/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220245943.png" alt="image-20240221220245943" class='item-img' data-src='/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220245943.png'><img src="/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220245943.png" alt="image-20240221220245943"><img src="/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220254228.png" alt="image-20240221220254228" class='item-img' data-src='/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220254228.png'><img src="/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220254228.png" alt="image-20240221220254228"><img src="/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220303143.png" alt="image-20240221220303143" class='item-img' data-src='/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220303143.png'><img src="/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220303143.png" alt="image-20240221220303143"><img src="/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220311467.png" alt="image-20240221220311467" class='item-img' data-src='/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220311467.png'><img src="/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220311467.png" alt="image-20240221220311467"><img src="/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220332012.png" alt="image-20240221220332012" class='item-img' data-src='/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220332012.png'><img src="/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220332012.png" alt="image-20240221220332012"><img src="/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220340486.png" alt="image-20240221220340486" class='item-img' data-src='/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220340486.png'><img src="/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220340486.png" alt="image-20240221220340486"><img src="/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220348968.png" alt="image-20240221220348968" class='item-img' data-src='/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220348968.png'><img src="/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220348968.png" alt="image-20240221220348968"><img src="/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220357488.png" alt="image-20240221220357488" class='item-img' data-src='/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220357488.png'><img src="/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220357488.png" alt="image-20240221220357488"><img src="/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220405574.png" alt="image-20240221220405574" class='item-img' data-src='/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220405574.png'><img src="/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220405574.png" alt="image-20240221220405574"><img src="/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220412797.png" alt="image-20240221220412797" class='item-img' data-src='/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220412797.png'><img src="/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220412797.png" alt="image-20240221220412797"><img src="/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220420419.png" alt="image-20240221220420419" class='item-img' data-src='/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220420419.png'><img src="/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220420419.png" alt="image-20240221220420419"><img src="/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220427069.png" alt="image-20240221220427069" class='item-img' data-src='/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220427069.png'><img src="/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220427069.png" alt="image-20240221220427069"><img src="/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220436736.png" alt="image-20240221220436736" class='item-img' data-src='/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220436736.png'><img src="/./../imgs/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/image-20240221220436736.png" alt="image-20240221220436736"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第一章：语言基础</category>
        <category>循环结构</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>手算与思维题</title>
    <url>/2024/02/22/%E6%89%8B%E7%AE%97%E4%B8%8E%E6%80%9D%E7%BB%B4%E9%A2%98/</url>
    <content><![CDATA[<h1 id="手算与思维题"><a href="#手算与思维题" class="headerlink" title="手算与思维题"></a>手算与思维题</h1><p>课程伊始，我们先要讲一下蓝桥杯相关的注意事项。</p>
<h2 id="比赛流程"><a href="#比赛流程" class="headerlink" title="比赛流程"></a>比赛流程</h2><h3 id="赛程："><a href="#赛程：" class="headerlink" title="赛程："></a>赛程：</h3><ul>
<li>省赛</li>
<li>决赛</li>
</ul>
<p>省赛一等奖参加决赛</p>
<p>比赛时长 44 小时</p>
<h3 id="竞赛形式："><a href="#竞赛形式：" class="headerlink" title="竞赛形式："></a>竞赛形式：</h3><ul>
<li>个人赛，一人一机，全程机考</li>
<li>答题过程中无法访问互联网</li>
<li>不允许携带任何电子、纸质资料</li>
</ul>
<h3 id="参赛选手机器环境"><a href="#参赛选手机器环境" class="headerlink" title="参赛选手机器环境"></a>参赛选手机器环境</h3><ul>
<li>X86 兼容机器，内存不小于 1G，硬盘不小于 60G 操作系统：Windows7、Windows8 或 Windows10。</li>
<li>C&#x2F;C++ 开发环境：Dev-cpp 5.4.0 C&#x2F;C++ API 帮助文档</li>
<li>Java 开发环境：JDK 1.8 Eclipse-java-2020-06 API 帮助文档</li>
<li>Python 环境：Python 3.8.6 IDLE（Python 自带编辑器）</li>
</ul>
<h3 id="题型"><a href="#题型" class="headerlink" title="题型"></a>题型</h3><ul>
<li>结果填空 把答案直接通过网页提交，不要书写多余的内容。填空题每题 55 分。</li>
<li>程序设计 每道题目多个测试数据，20%∼40%20%∼40% 是弱测试数据，其他是强测试数据。 题量大、时间紧张，难题往往不会做或来不及用高效算法编码，此时可以用暴力方法编程得 20%∼40%20%∼40% 的分数。 程序设计题每题 10% 25%10% 25% 分。</li>
</ul>
<h3 id="评分方式"><a href="#评分方式" class="headerlink" title="评分方式"></a>评分方式</h3><p>评分：全部使用机器自动评分</p>
<p><strong>对于结果填空题，题目保证只有唯一解，选手的结果只有和解完全相同才得分，出现格式错误或有多余内容时不得分。</strong></p>
<p>对于编程大题，评测系统将使用多个评测数据来测试程序。每个评测数据有对应的分数。选手所提交的程序将分别用每个评测数据作为输入来运行。对于某个评测数据，如果选手程序的输出与正确答案是匹配的，则选手获得该评测数据的分数。</p>
<h2 id="知识点梳理"><a href="#知识点梳理" class="headerlink" title="知识点梳理"></a>知识点梳理</h2><p>（1）思维题（杂题）：不需要算法和数据结构，只需要逻辑、推理的题目，难度可难可易。考察思维能力和编码能力，只能通过大量做题来提高。</p>
<p>（2）BFS 搜索和 DFS 搜索：也就是暴力搜索。这是非常基本的算法，是基础中的基础。</p>
<p>（3）动态规划：线性 DP，以及一些 DP 应用，例如状态压缩 DP、树形 DP 等。</p>
<p>（4）简单数学和简单数论。</p>
<p>（5）简单的字符串处理、输入输出，简单图论。</p>
<p>（6）基本算法：例如排序、排列、二分、倍增、差分、贪心。</p>
<p>（7）基本数据结构：队列、栈、链表、二叉树等。</p>
<h2 id="技巧：手算"><a href="#技巧：手算" class="headerlink" title="技巧：手算"></a>技巧：手算</h2><ul>
<li>应用场合：填空题</li>
<li>手算的目的：减少做题时间，省下时间做编程题。</li>
</ul>
<p>手段：</p>
<ul>
<li>不编码，或者只做部分编码</li>
<li>用推理获得答案</li>
<li>用软件工具帮助计算</li>
</ul>
<p>方法：</p>
<ul>
<li>巧用编辑器</li>
<li>心算手数</li>
<li>巧用 Excel</li>
<li>巧用 Python</li>
</ul>
<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="1-门牌制作-2020-年第十一届蓝桥杯省赛，填空题"><a href="#1-门牌制作-2020-年第十一届蓝桥杯省赛，填空题" class="headerlink" title="1. 门牌制作 2020 年第十一届蓝桥杯省赛，填空题"></a><a href="https://www.lanqiao.cn/problems/592/learning/">1. 门牌制作 2020 年第十一届蓝桥杯省赛，填空题</a></h4><p><strong>问题描述：</strong> 从 11 到 20202020 的所有数字中，共有多少个 22？</p>
<ul>
<li>先编码连续打印出 11 ∼∼ 20202020 这 20202020 个数字</li>
<li>然后粘贴到任何一个编辑器中</li>
<li>选查询或替换功能，查找或替换字符 “22”，共 624624 次，就是答案。</li>
</ul>
<p><strong>简单直接，不用思考</strong></p>
<h4 id="2-迷宫-2017-年第八届蓝桥杯省赛，填空题"><a href="#2-迷宫-2017-年第八届蓝桥杯省赛，填空题" class="headerlink" title="2. 迷宫 2017 年第八届蓝桥杯省赛，填空题"></a><a href="https://www.lanqiao.cn/problems/641/learning/">2. 迷宫 2017 年第八届蓝桥杯省赛，填空题</a></h4><p><strong>问题描述：</strong> 给出一个迷宫，问迷宫内的人有多少能走出来。迷宫如右图所示：每个位置上有一个人，共 100100 人。每个位置有指示牌，<em>L</em> 表示向左走，<em>R</em> 表示向右走，<em>U</em> 表示向上走，<em>D</em> 表示向下走。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">UDDLUULRUL</span><br><span class="line">UURLLLRRRU</span><br><span class="line">RRUURLDLRD</span><br><span class="line">RUDDDDUUUU</span><br><span class="line">URUDLLRRUU</span><br><span class="line">DURLRLDLRL</span><br><span class="line">ULLURLLRDU</span><br><span class="line">RDLULLRDDD</span><br><span class="line">UUDDUDUDLL</span><br><span class="line">ULRDLUURRR</span><br></pre></td></tr></table></figure>

<ul>
<li>正解：DFS 搜索，编码 10 分钟。</li>
<li>技巧：直接用手画图标记 3-5 分钟。</li>
</ul>
<h4 id="3-迷宫-2017-年第八届蓝桥杯省赛，填空题"><a href="#3-迷宫-2017-年第八届蓝桥杯省赛，填空题" class="headerlink" title="3. 迷宫 2017 年第八届蓝桥杯省赛，填空题"></a><a href="https://www.lanqiao.cn/problems/611/learning/">3. 迷宫 2017 年第八届蓝桥杯省赛，填空题</a></h4><p><strong>问题描述：</strong> 整个 20 世纪（19011901 年 11 月 11 日至 20002000 年 1212 月 3131 日之间），一共有多少个星期一？</p>
<p><strong>思路：</strong> 用 Excel，在一个格子里输入日期 19011901 年 11 月 11 日，另一个格子输入 20002000 年 1212 月 3131 日，然后两个格子相减得 3652436524 天，除以 77 得 5217.75217.7 周。</p>
<p>再看 19011901 年 11 月 11 日是星期几。</p>
<p>用 Excel 点 19011901 年 11 月 11 日这一格的“设置单元格式-数字-日期-星期三”，点击“确定”，得“星期二”，即 19011901 年 11 月 11 日是星期二，3652436524 是 52175217 周多几天，最后几天没有星期一，说明答案就是 52175217。</p>
<p>也可以直接利用 Excel“单元格格式”对话框得出 20002000 年 1212 月 3131 日刚好是星期天，从星期二至星期天之间没有星期一。</p>
<h3 id="巧用-Python"><a href="#巧用-Python" class="headerlink" title="巧用 Python"></a>巧用 Python</h3><p><strong>填空题遇到字符、大数字、日期问题，Python 是首选。</strong></p>
<p>•即使参加 C&#x2F;C++、Java 组比赛，也要学一些 Python，以方便手算，或用来做对比测试。</p>
<p>•这几种语言的编译器，在比赛机器上都有。</p>
<p>•写 Python 代码既简单又快，代码长度一般比 C&#x2F;C++、Java 短很多。例如 30 行的 C++代码，用 Python 写只需要 20 行。</p>
<p><a href="https://www.lanqiao.cn/problems/611/learning/">3. 迷宫 2017 年第八届蓝桥杯省赛，填空题</a></p>
<p><strong>问题描述：</strong> 整个 20 世纪(1901 年 1 月 1 日至 2000 年 12 月 31 日之间)，一共有多少个星期一？</p>
<p><strong>直接用 Python datetime 库求解，第 4 行可以输出某个日期是星期几。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span>*</span><br><span class="line">dt1=datetime(<span class="number">1901</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">dt2=datetime(<span class="number">2000</span>,<span class="number">12</span>,<span class="number">31</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dt1.weekday())</span><br><span class="line"><span class="comment"># 周一为0，周二为1...</span></span><br><span class="line"></span><br><span class="line">td=dt2-dt1</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(td.days//<span class="number">7</span>)</span><br></pre></td></tr></table></figure>

<p>相对应的使用 C++同样可以完成，但是编码复杂：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> res;</span><br><span class="line"><span class="comment">//先判断润年</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_r</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">     <span class="keyword">if</span>((n % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; n % <span class="number">100</span> != <span class="number">0</span>) || n % <span class="number">400</span> == <span class="number">0</span>)</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1901</span>;i &lt;= <span class="number">2000</span>;i ++)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">is_r</span>(i)) res += <span class="number">366</span>;</span><br><span class="line">        <span class="keyword">else</span> res += <span class="number">365</span>;</span><br><span class="line">    <span class="type">int</span> x = res / <span class="number">7</span>;</span><br><span class="line">    cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.lanqiao.cn/problems/612/learning/">4. 乘积尾零 2018 年第九届蓝桥杯省赛</a></p>
<p>【问题描述】 给出 100100 个整数（这里省略题目给的 100100 个数），问它们乘积的末尾有多少个零。</p>
<p>最简单题解：</p>
<ul>
<li>直接连乘：几千位的大数</li>
<li>然后统计末尾的 00</li>
</ul>
<p class='item-img' data-src='/./../imgs/%E6%89%8B%E7%AE%97%E4%B8%8E%E6%80%9D%E7%BB%B4%E9%A2%98/236f300ccb9673d4fc3b0c7790de774a-0.png'><img src="/./../imgs/%E6%89%8B%E7%AE%97%E4%B8%8E%E6%80%9D%E7%BB%B4%E9%A2%98/236f300ccb9673d4fc3b0c7790de774a-0.png" alt="图片描述"></p>
<p>但是 C++ 装不下这么大的数字，所以要进行处理：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt2=<span class="number">0</span>,cnt5=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)   &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">10</span>;j++)     &#123;</span><br><span class="line">            <span class="type">int</span> x;</span><br><span class="line">            cin&gt;&gt;x;</span><br><span class="line">            <span class="keyword">while</span> (x%<span class="number">2</span>==<span class="number">0</span>) cnt2++,x/=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">while</span> (x%<span class="number">5</span>==<span class="number">0</span>) cnt5++,x/=<span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">min</span>(cnt2,cnt5)&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现编码时间变长了，如果填空题且 Java 学的好一点的，可以直接 Python 编程出结果。</p>
<h2 id="思维题"><a href="#思维题" class="headerlink" title="思维题"></a>思维题</h2><ul>
<li>不需要涉及某种算法的题目。</li>
<li>只要学过编程语言，就能够解答。</li>
<li>主要考核学生的思维、逻辑和编码能力，强调脑筋急转弯的解决方式。</li>
<li>这类题目包括模拟题、构造题、思维题以及找规律题，统称为“思维题（杂题）”。</li>
<li>每年蓝桥杯都会设置这类题目，而且可能有多道，是考试中的重要得分点。</li>
<li>杂题涵盖了各种难度，有些可能相对简单，而另一些可能相对较难。</li>
</ul>
<p><a href="https://www.lanqiao.cn/problems/174/learning/">5. 付账问题 2018 年第九届蓝桥杯省赛，lanqiaoOJ 题号 174</a></p>
<p>【题目描述】</p>
<p>现在有 <em>n</em> 个人出去吃饭，他们总共消费了 <em>S</em> 元。其中第 <em>i</em> 个人带了 <em>a**i</em>元。幸运的是，所有人带的钱的总数是足够付账的，但现在问题来了：每个人分别要出多少钱呢？</p>
<p>为了公平起见，我们希望在总付钱量恰好为 <em>S</em> 的前提下，最后每个人付的钱的标准差最小。这里我们约定，每个人支付的钱数可以是任意非负实数，即可以不是 1 分钱的整数倍。你需要输出最小的标准差是多少。</p>
<p>标准差的介绍：标准差是多个数与它们平均数差值的平方平均数，一般用于刻画这些数之间的”偏差有多大”。形式化地说，设第 <em>i</em> 个人付的钱为 <em>b**i</em> 元，那么标准差为 :</p>
<p>1Σ&#x3D;1(−1Σ&#x3D;1)2<em>n</em>1Σ<em>i</em>&#x3D;1<em>n</em>(<em>b**i</em>−<em>n</em>1Σ<em>i</em>&#x3D;1<em>n<strong>b</strong>i</em>)2</p>
<p><strong>解决思路：</strong></p>
<p>如果每个人携带的钱足够多，每个人平均支付相同的金额，即 &#x3D;&#x3D;avg<em>b**i</em>&#x3D;<em>n**S</em>&#x3D;avg，那么标准差 <em>X</em> 为 00。</p>
<p>然而，总会有人的钱不够，这时我们考虑两种情况：</p>
<p>（1）第 <em>i</em> 个人携带的钱不足以达到平均数 avgavg，那么他只能支付他所携带的全部钱 <em>a**i</em>。</p>
<p>（2）第 <em>i</em> 个人携带的钱超过平均数 avgavg，那么他可以支付多一些。</p>
<p><strong>解决步骤：</strong></p>
<p>（1）对 <em>a**i</em> 进行从小到大的排序；</p>
<p>（2）前一部分人的钱不足以支付平均数，因此他们每个人支付所有携带的钱；</p>
<p>（3）从总支付数中减去前一部分人支付的钱，得到剩余金额 ′<em>S</em>′，以及后一部分人的平均支付数 avg′avg′。</p>
<p>（4）后一部分人携带的钱较多，他们可以支付多一些。这部分人又可以分为两类：</p>
<ul>
<li>（i）相对富裕但仍然不足以支付 avg′avg′ 的人，他们需要支付所有携带的钱；</li>
<li>（ii）非常富裕的人，无论如何摊分，他们都有余额。</li>
</ul>
<p>由于前面一部分人不足以支付 avgavg，因此后面足够支付 avg′avg′ 的人不能只支付 avgavg。相反，他们应该尽可能地每个人支付相同的金额。</p>
<p>因为有人支付不足，总有人支付过多，由于是标准差（方差的平方根），因此每个人支付的金额差距越小越好。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">5e5</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[M];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;  <span class="type">long</span> <span class="type">long</span> s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %lld&quot;</span>,&amp;n,&amp;s);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)  <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a[i]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);       <span class="comment">//排序，从小到大</span></span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> avg = <span class="number">1.0</span>*s/n;  <span class="comment">//平均值</span></span><br><span class="line">    <span class="type">double</span> sum = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]*(n+<span class="number">1</span>-i) &lt; s)&#123;</span><br><span class="line"><span class="comment">//需要把钱全拿出的人：</span></span><br><span class="line"><span class="comment">//（1）钱不够平均数的，（2）钱够平均数，但也不是很多的</span></span><br><span class="line">            sum += (a[i]-avg)*(a[i]-avg);</span><br><span class="line">            s -= a[i];            <span class="comment">//更新剩余钱数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;      </span><br><span class="line"><span class="comment">//不用把钱全拿出的人：非常有钱，不管怎么平均都够</span></span><br><span class="line">            <span class="type">double</span> cur_avg = <span class="number">1.0</span>*s/(n+<span class="number">1</span>-i);    </span><br><span class="line"><span class="comment">//更新平均出钱数</span></span><br><span class="line">            sum += (cur_avg-avg)*(cur_avg-avg)*(n+<span class="number">1</span>-i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.4lf&quot;</span>,<span class="built_in">sqrt</span>(sum/n));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">from math <span class="keyword">import</span> *</span><br><span class="line">n, s = <span class="built_in">map</span>(<span class="type">int</span>,<span class="built_in">input</span>().<span class="built_in">split</span>())</span><br><span class="line">a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="type">int</span>,<span class="built_in">input</span>().<span class="built_in">split</span>()))</span><br><span class="line">a.<span class="built_in">sort</span>()</span><br><span class="line">avg = s/n</span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i in <span class="built_in">range</span>(n):</span><br><span class="line">     <span class="keyword">if</span> a[i]*(n-i) &lt; s:</span><br><span class="line">          sum += <span class="built_in">pow</span>(a[i]-avg,<span class="number">2</span>)</span><br><span class="line">          s -= a[i]</span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">          cur_avg = s/(n-i);      #更新平均出钱数</span><br><span class="line">          sum += <span class="built_in">pow</span>(cur_avg-avg,<span class="number">2</span>)*(n-i)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:.4f&#125;&quot;</span>.format(<span class="built_in">sqrt</span>(sum/(n))))</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        <span class="type">long</span> S;</span><br><span class="line">        <span class="type">double</span> ans=<span class="number">0</span>,avg;</span><br><span class="line">        Scanner input=<span class="keyword">new</span> <span class="built_in">Scanner</span>(System.in);</span><br><span class="line">        n=input.<span class="built_in">nextInt</span>();</span><br><span class="line">        S=input.<span class="built_in">nextLong</span>();</span><br><span class="line">        <span class="type">long</span> a[]=<span class="keyword">new</span> <span class="type">long</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)        </span><br><span class="line">            a[i]=input.<span class="built_in">nextLong</span>();</span><br><span class="line">        Arrays.<span class="built_in">sort</span>(a);</span><br><span class="line">        avg=(<span class="type">double</span>)S/n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(S&lt;=(n-i)*a[i]) &#123;</span><br><span class="line">                ans += (n-i)*Math.<span class="built_in">pow</span>((<span class="type">double</span>)S/(n-i)-avg,<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans += Math.<span class="built_in">pow</span>(a[i]-avg,<span class="number">2</span>);</span><br><span class="line">            S -= a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.<span class="built_in">printf</span>(<span class="string">&quot;%.4f\n&quot;</span>,Math.<span class="built_in">sqrt</span>(ans/n));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>蓝桥杯冲刺营</category>
        <category>1.手算和思维题</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序</title>
    <url>/2024/02/21/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/image-20240221225112243.png'><img src="/./../imgs/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/image-20240221225112243.png" alt="image-20240221225112243"><img src="/./../imgs/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/image-20240221225121627.png" alt="image-20240221225121627" class='item-img' data-src='/./../imgs/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/image-20240221225121627.png'><img src="/./../imgs/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/image-20240221225121627.png" alt="image-20240221225121627"><img src="/./../imgs/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/image-20240221225129479.png" alt="image-20240221225129479"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第二章：基础算法</category>
        <category>排序</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>插入排序</title>
    <url>/2024/02/21/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/image-20240221225024861.png'><img src="/./../imgs/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/image-20240221225024861.png" alt="image-20240221225024861"><img src="/./../imgs/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/image-20240221225028438.png" alt="image-20240221225028438" class='item-img' data-src='/./../imgs/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/image-20240221225028438.png'><img src="/./../imgs/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/image-20240221225028438.png" alt="image-20240221225028438"><img src="/./../imgs/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/image-20240221225036107.png" alt="image-20240221225036107"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第二章：基础算法</category>
        <category>排序</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>日期和时间</title>
    <url>/2024/02/21/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/image-20240221222711369.png'><img src="/./../imgs/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/image-20240221222711369.png" alt="image-20240221222711369"><img src="/./../imgs/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/image-20240221222720228.png" alt="image-20240221222720228" class='item-img' data-src='/./../imgs/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/image-20240221222720228.png'><img src="/./../imgs/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/image-20240221222720228.png" alt="image-20240221222720228"><img src="/./../imgs/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/image-20240221222731177.png" alt="image-20240221222731177" class='item-img' data-src='/./../imgs/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/image-20240221222731177.png'><img src="/./../imgs/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/image-20240221222731177.png" alt="image-20240221222731177"><img src="/./../imgs/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/image-20240221222740641.png" alt="image-20240221222740641" class='item-img' data-src='/./../imgs/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/image-20240221222740641.png'><img src="/./../imgs/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/image-20240221222740641.png" alt="image-20240221222740641"><img src="/./../imgs/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/image-20240221222748410.png" alt="image-20240221222748410" class='item-img' data-src='/./../imgs/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/image-20240221222748410.png'><img src="/./../imgs/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/image-20240221222748410.png" alt="image-20240221222748410"><img src="/./../imgs/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/image-20240221222755872.png" alt="image-20240221222755872" class='item-img' data-src='/./../imgs/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/image-20240221222755872.png'><img src="/./../imgs/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/image-20240221222755872.png" alt="image-20240221222755872"><img src="/./../imgs/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/image-20240221222811801.png" alt="image-20240221222811801" class='item-img' data-src='/./../imgs/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/image-20240221222811801.png'><img src="/./../imgs/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/image-20240221222811801.png" alt="image-20240221222811801"><img src="/./../imgs/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/image-20240221222821439.png" alt="image-20240221222821439" class='item-img' data-src='/./../imgs/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/image-20240221222821439.png'><img src="/./../imgs/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/image-20240221222821439.png" alt="image-20240221222821439"><img src="/./../imgs/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/image-20240221222828542.png" alt="image-20240221222828542" class='item-img' data-src='/./../imgs/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/image-20240221222828542.png'><img src="/./../imgs/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/image-20240221222828542.png" alt="image-20240221222828542"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第一章：语言基础</category>
        <category>基础数据结构</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>条件表达式和逻辑表达式</title>
    <url>/2024/02/21/%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E9%80%BB%E8%BE%91%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E9%80%BB%E8%BE%91%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20240221214552432.png'><img src="/./../imgs/%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E9%80%BB%E8%BE%91%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20240221214552432.png" alt="image-20240221214552432"><img src="/./../imgs/%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E9%80%BB%E8%BE%91%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20240221214559882.png" alt="image-20240221214559882" class='item-img' data-src='/./../imgs/%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E9%80%BB%E8%BE%91%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20240221214559882.png'><img src="/./../imgs/%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E9%80%BB%E8%BE%91%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20240221214559882.png" alt="image-20240221214559882"><img src="/./../imgs/%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E9%80%BB%E8%BE%91%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20240221214615485.png" alt="image-20240221214615485" class='item-img' data-src='/./../imgs/%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E9%80%BB%E8%BE%91%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20240221214615485.png'><img src="/./../imgs/%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E9%80%BB%E8%BE%91%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20240221214615485.png" alt="image-20240221214615485"><img src="/./../imgs/%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E9%80%BB%E8%BE%91%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20240221214628337.png" alt="image-20240221214628337" class='item-img' data-src='/./../imgs/%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E9%80%BB%E8%BE%91%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20240221214628337.png'><img src="/./../imgs/%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E9%80%BB%E8%BE%91%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20240221214628337.png" alt="image-20240221214628337"><img src="/./../imgs/%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E9%80%BB%E8%BE%91%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20240221214638568.png" alt="image-20240221214638568"></p>
<p class='item-img' data-src='/./../imgs/%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E9%80%BB%E8%BE%91%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20240221214945674.png'><img src="/./../imgs/%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E9%80%BB%E8%BE%91%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20240221214945674.png" alt="image-20240221214945674"><img src="/./../imgs/%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E9%80%BB%E8%BE%91%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20240221214951805.png" alt="image-20240221214951805" class='item-img' data-src='/./../imgs/%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E9%80%BB%E8%BE%91%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20240221214951805.png'><img src="/./../imgs/%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E9%80%BB%E8%BE%91%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20240221214951805.png" alt="image-20240221214951805"><img src="/./../imgs/%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E9%80%BB%E8%BE%91%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20240221215009459.png" alt="image-20240221215009459"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第一章：语言基础</category>
        <category>选择结构</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>构造</title>
    <url>/2024/02/21/%E6%9E%84%E9%80%A0/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231746186.png'><img src="/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231746186.png" alt="image-20240221231746186"><img src="/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231750489.png" alt="image-20240221231750489" class='item-img' data-src='/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231750489.png'><img src="/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231750489.png" alt="image-20240221231750489"><img src="/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231758895.png" alt="image-20240221231758895" class='item-img' data-src='/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231758895.png'><img src="/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231758895.png" alt="image-20240221231758895"><img src="/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231807922.png" alt="image-20240221231807922" class='item-img' data-src='/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231807922.png'><img src="/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231807922.png" alt="image-20240221231807922"><img src="/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231816852.png" alt="image-20240221231816852" class='item-img' data-src='/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231816852.png'><img src="/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231816852.png" alt="image-20240221231816852"><img src="/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231824987.png" alt="image-20240221231824987" class='item-img' data-src='/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231824987.png'><img src="/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231824987.png" alt="image-20240221231824987"><img src="/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231834468.png" alt="image-20240221231834468" class='item-img' data-src='/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231834468.png'><img src="/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231834468.png" alt="image-20240221231834468"><img src="/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231842519.png" alt="image-20240221231842519" class='item-img' data-src='/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231842519.png'><img src="/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231842519.png" alt="image-20240221231842519"><img src="/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231851420.png" alt="image-20240221231851420" class='item-img' data-src='/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231851420.png'><img src="/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231851420.png" alt="image-20240221231851420"><img src="/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231859563.png" alt="image-20240221231859563" class='item-img' data-src='/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231859563.png'><img src="/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231859563.png" alt="image-20240221231859563"><img src="/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231907099.png" alt="image-20240221231907099" class='item-img' data-src='/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231907099.png'><img src="/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231907099.png" alt="image-20240221231907099"><img src="/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231916184.png" alt="image-20240221231916184" class='item-img' data-src='/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231916184.png'><img src="/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231916184.png" alt="image-20240221231916184"><img src="/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231924830.png" alt="image-20240221231924830" class='item-img' data-src='/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231924830.png'><img src="/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231924830.png" alt="image-20240221231924830"><img src="/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231932884.png" alt="image-20240221231932884" class='item-img' data-src='/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231932884.png'><img src="/./../imgs/%E6%9E%84%E9%80%A0/image-20240221231932884.png" alt="image-20240221231932884"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第二章：基础算法</category>
        <category>基础算法</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>搜索算法</title>
    <url>/2024/02/22/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h1><p>Depth First Search 即 DFS，意为深度优先搜索，是所有的搜索手段之一。它是从某个状态开始，不断进行状态转移，直到不能转移后，向后回退，一直到遍历完所有的状态。</p>
<p>本章题目难度较大，请大家仔细研读讲解和代码。</p>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>1.DFS 算法设计原理与实现方法 2.经典题型精讲</p>
<h2 id="深度优先搜索基本概念"><a href="#深度优先搜索基本概念" class="headerlink" title="深度优先搜索基本概念"></a>深度优先搜索基本概念</h2><p>作为搜索算法的一种，DFS 主要是用于解决 <code>NP</code> 完全问题。但是，深度优先搜索算法的时间复杂度较高，深度优先搜索是 (!)<em>O</em>(<em>n</em>!) 的阶乘级算法，它的效率非常低，在数据规模变大时，此算法就难以解决当前的问题了。</p>
<p>所以搜索算法使用于状态节点较小规模的问题。</p>
<h2 id="DFS-的设计步骤"><a href="#DFS-的设计步骤" class="headerlink" title="DFS 的设计步骤"></a>DFS 的设计步骤</h2><p>按照定义设计：</p>
<ol>
<li>确定该题目的状态（包括边界）</li>
<li>找到状态转移方式</li>
<li>找到问题的出口，计数或者某个状态</li>
<li>设计搜索</li>
</ol>
<p>伪代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">check</span><span class="params">(参数)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(满足条件)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">pd</span><span class="params">(参数)</span>&#123;</span><br><span class="line">    相应操作</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> step)</span></span><br><span class="line">&#123;</span><br><span class="line">        判断边界pd()</span><br><span class="line">        &#123;</span><br><span class="line">            不在边界内，即回溯</span><br><span class="line">        &#125;</span><br><span class="line">        尝试每一种可能</span><br><span class="line">        &#123;</span><br><span class="line">               满足check条件</span><br><span class="line"></span><br><span class="line">               标记</span><br><span class="line"></span><br><span class="line">               继续下一步dfs(step+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">               恢复初始状态（回溯的时候要用到）</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="DFS-题目讲解"><a href="#DFS-题目讲解" class="headerlink" title="DFS 题目讲解"></a>DFS 题目讲解</h2><h3 id="状态搜索代表：-N-皇后问题"><a href="#状态搜索代表：-N-皇后问题" class="headerlink" title="状态搜索代表： N 皇后问题"></a>状态搜索代表： N 皇后问题</h3><p><a href="https://www.lanqiao.cn/problems/1508/learning/">题目链接</a></p>
<p>难度: 简单</p>
<p>标签: DFS</p>
<p><strong>题目描述:</strong></p>
<p>在 ×<em>N</em>×<em>N</em> 的方格棋盘放置了 <em>N</em> 个皇后，使得它们不相互攻击（即任意 22 个皇后不允许处在同一排，同一列，也不允许处在与棋盘边框成 4545 角的斜线上。你的任务是，对于给定的 <em>N</em>，求出有多少种合法的放置方法。</p>
<p><strong>输入描述:</strong></p>
<p>输入中有一个正整数 ≤10<em>N</em>≤10，表示棋盘和皇后的数量</p>
<p><strong>输出描述:</strong></p>
<p>为一个正整数，表示对应输入行的皇后的不同放置数量。</p>
<p><strong>输入输出样例:</strong></p>
<p><strong>示例:</strong></p>
<p><strong>输入:</strong></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure>

<p><strong>输出:</strong></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure>

<p><strong>运行限制:</strong></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">最大运行时间：1s</span><br><span class="line">最大运行内存: 256M</span><br></pre></td></tr></table></figure>

<p><strong>解题思路:</strong></p>
<p>下面是用递归的深度优先搜索求解 <em>n</em> 皇后问题的算法描述：</p>
<p>这里用一个 ×<em>N</em>×<em>N</em> 的矩阵来表示棋盘，但是我们不需要定义这样的数组，只要心中有 ×<em>N</em>×<em>N</em> 的期盼即可。</p>
<ol>
<li><p><strong>算法开始：</strong></p>
<p>当前行设为第一行，当前列设为第一列，从第一行第一列开始搜索，即只能让皇后从第一行放到第 <em>n</em> 行。</p>
<p>这样在每次判断是否满足情况时我们不用去判断是否皇后在相同行。</p>
<p>我们只用判断之前的 11 到 −1<em>a</em>−1 个皇后的位置和当前第 <em>a</em> 个皇后的位置是否属于同一列或者斜线，判断是否同一列。</p>
</li>
<li><p><strong>判断边界：</strong></p>
<p>在当前行，当前列的位置上判断是否满足条件(即保证经过这一点的行,列与斜线上都没有两个皇后)，若不满足，跳到第 55 步，即不符合边界条件。</p>
<p>首先说一下，什么叫不符合边界条件，不只是跳出了搜索范围，剪枝也可以从这里开始，比如这里不满足条件，向下继续搜索也不会再有结果。</p>
<p>这可以理解为超出边界的剪枝，我们的边界只得可能存在解的范围，这里已经超出有解的范围，必然要被踢出。</p>
<p>判断条件：</p>
<p>我们用数组 []&#x3D;<em>x</em>[<em>a</em>]&#x3D;<em>i</em> 来表示第 <em>a</em> 个皇后的位置在第 <em>a</em> 行第 <em>i</em> 列，我们不用考虑是否在同一行的问题你，我们只用判断之前的 11 到 −1<em>a</em>−1 个皇后的位置和当前第 <em>a</em> 个皇后的位置是否属于同一列或者斜线。</p>
<p>判断是否属于同一列： 就判断 []<em>x</em>[<em>a</em>] 是否等于 []<em>x</em>[<em>i</em>]; 判断是否属于同一斜线：等同于判断行之差是否等于列之差也，即 ([]−[])≠(−)<em>a<strong>b</strong>s</em>(<em>x</em>[<em>k</em>]−<em>x</em>[<em>i</em>])&#x3D;<em>a<strong>b</strong>s</em>(<em>k</em>−<em>i</em>)。</p>
</li>
<li><p><strong>搜索过程：</strong></p>
<p>调用 <code>Check</code> 函数。</p>
<p>如果 边界条件，就继续调用放下一个皇后的位置</p>
</li>
<li><p><strong><code>Check</code> 函数:</strong></p>
<p>如果当搜索到第 +1<em>N</em>+1 行的时候，即代表前 <em>N</em> 行已经搜索完了，所以这个时候正好求出了一个解，记录加一。</p>
</li>
<li><p>在当前位置上不满足条件的情形，进行回溯。</p>
</li>
</ol>
<p>C++ 语言描述:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> x[<span class="number">15</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> sum,n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">PD</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(k-i)==<span class="built_in">abs</span>(x[k]-x[i]))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x[k]==x[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//即判断是否符合条件来放,i表示皇后所在的行数，x[i]表示所在的列数，</span></span><br><span class="line">        <span class="comment">//所以前面那个条件用来判断两个皇后是否在对角线上,后面用来判断是否在同一列上。</span></span><br><span class="line">        <span class="comment">//行数不需要判断，因为他们本身的i就代表的是行数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(a&gt;n)</span><br><span class="line">        sum++;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFS</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">check</span>(a))</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            x[a]=i;</span><br><span class="line">                <span class="comment">//第a个皇后放的列数</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">PD</span>(a))</span><br><span class="line">                    <span class="comment">//判断是否能放这步</span></span><br><span class="line">                <span class="built_in">DFS</span>(a+<span class="number">1</span>);</span><br><span class="line">                    <span class="comment">//能的话进行下一个皇后的放置</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">continue</span> ;</span><br><span class="line">                    <span class="comment">//不能就下一列</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="comment">//表示几个皇后</span></span><br><span class="line">    <span class="built_in">DFS</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//每次都从第一个皇后开始</span></span><br><span class="line">    cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Python 语言描述：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"> x = [<span class="number">0</span>] * <span class="number">15</span></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pd</span>(<span class="params">k</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, k):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(k - i) == <span class="built_in">abs</span>(x[k] - x[i]):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> x[k] == x[i]:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="comment"># 即判断是否符合条件来放,i表示皇后所在的行数，x[i]表示所在的列数，</span></span><br><span class="line">        <span class="comment"># 所以前面那个条件用来判断两个皇后是否在对角线上,后面用来判断是否在同一列上。</span></span><br><span class="line">        <span class="comment"># 行数不需要判断，因为他们本身的i就代表的是行数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">if</span> a &gt; n:</span><br><span class="line">        <span class="keyword">global</span> <span class="built_in">sum</span></span><br><span class="line">        <span class="built_in">sum</span> += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DFS</span>(<span class="params">a</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> check(a):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            x[a] = i</span><br><span class="line">            <span class="comment"># 第a个皇后放的列数</span></span><br><span class="line">            <span class="keyword">if</span> pd(a):</span><br><span class="line">                <span class="comment"># 判断是否能放这步</span></span><br><span class="line">                DFS(a + <span class="number">1</span>)</span><br><span class="line">                <span class="comment"># 能的话进行下一个皇后的放置</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">                <span class="comment">#   不能就下一列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="comment"># 不能就下一列</span></span><br><span class="line">    DFS(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 每次都从第一个皇后开始</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure>

<p>Java 语言描述:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.abs;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> x[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">15</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> sum, n;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">PD</span><span class="params">(<span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (abs(k - i) == abs(x[k] - x[i]))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (x[k] == x[i])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//即判断是否符合条件来放,i表示皇后所在的行数，x[i]表示所在的列数，</span></span><br><span class="line">            <span class="comment">//所以前面那个条件用来判断两个皇后是否在对角线上,后面用来判断是否在同一列上。</span></span><br><span class="line">            <span class="comment">//行数不需要判断，因为他们本身的i就代表的是行数</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (a &gt; n)</span><br><span class="line">            sum++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">DFS</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (check(a))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                x[a] = i;</span><br><span class="line">                <span class="comment">//第a个皇后放的列数</span></span><br><span class="line">                <span class="keyword">if</span> (PD(a))</span><br><span class="line">                    <span class="comment">//判断是否能放这步</span></span><br><span class="line">                    DFS(a + <span class="number">1</span>);</span><br><span class="line">                    <span class="comment">//能的话进行下一个皇后的放置</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">//不能就下一列</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        n = in.nextInt();</span><br><span class="line">        <span class="comment">//表示几个皇后</span></span><br><span class="line">        DFS(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//每次都从第一个皇后开始</span></span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="图的路径搜索代表-路径之谜"><a href="#图的路径搜索代表-路径之谜" class="headerlink" title="图的路径搜索代表-路径之谜"></a>图的路径搜索代表-路径之谜</h3><p><a href="https://www.lanqiao.cn/problems/89/learning/">题目链接</a></p>
<p>难度: 中等</p>
<p>标签: DFS, 2016, 国赛</p>
<p><strong>题目描述:</strong></p>
<p>小明冒充 <em>X</em> 星球的骑士，进入了一个奇怪的城堡。</p>
<p>城堡里边什么都没有，只有方形石头铺成的地面。</p>
<p>假设城堡地面是 ×<em>n</em>×<em>n</em> 个方格。如下图所示。</p>
<p class='item-img' data-src='/./../imgs/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/uid1580206-20210202-1612248935564.png'><img src="/./../imgs/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/uid1580206-20210202-1612248935564.png" alt="地图"></p>
<p>按习俗，骑士要从西北角走到东南角。可以横向或纵向移动，但不能斜着走，也不能跳跃。每走到一个新方格，就要向正北方和正西方各射一箭。（城堡的西墙和北墙内各有 <em>n</em> 个靶子）同一个方格只允许经过一次。但不必走完所有的方格。如果只给出靶子上箭的数目，你能推断出骑士的行走路线吗？有时是可以的，比如上图中的例子。</p>
<p>本题的要求就是已知箭靶数字，求骑士的行走路径（测试数据保证路径唯一）</p>
<p><strong>输入:</strong></p>
<p>第一行一个整数 <em>N</em> (0≤≤200≤<em>N</em>≤20)，表示地面有 ×<em>N</em>×<em>N</em> 个方格。</p>
<p>第二行 <em>N</em> 个整数，空格分开，表示北边的箭靶上的数字（自西向东）</p>
<p>第三行 <em>N</em> 个整数，空格分开，表示西边的箭靶上的数字（自北向南）</p>
<p><strong>输出：</strong></p>
<p>输出一行若干个整数，表示骑士路径。</p>
<p>为了方便表示，我们约定每个小格子用一个数字代表，从西北角开始编号: 0,1,2,3 ⋯⋯</p>
<p><strong>输入输出样例：</strong></p>
<p>输入</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">2 4 3 4</span><br><span class="line">4 3 3 3</span><br></pre></td></tr></table></figure>

<p>比如，上图中的方块编号为：</p>
<table>
<thead>
<tr>
<th>箭靶</th>
<th>2</th>
<th>4</th>
<th>3</th>
<th>4</th>
</tr>
</thead>
<tbody><tr>
<td>4</td>
<td>0</td>
<td>1</td>
<td>2</td>
<td>3</td>
</tr>
<tr>
<td>3</td>
<td>4</td>
<td>5</td>
<td>6</td>
<td>7</td>
</tr>
<tr>
<td>3</td>
<td>8</td>
<td>9</td>
<td>10</td>
<td>11</td>
</tr>
<tr>
<td>3</td>
<td>12</td>
<td>13</td>
<td>14</td>
<td>15</td>
</tr>
</tbody></table>
<p>输出</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">0 4 5 1 2 3 7 11 10 9 13 14 15</span><br></pre></td></tr></table></figure>

<p><strong>运行限制:</strong></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">最大运行时间：1s</span><br><span class="line">最大运行内存: 128M</span><br></pre></td></tr></table></figure>

<p><strong>解题思路:</strong></p>
<p>这里用一个 ×<em>N</em>×<em>N</em> 的矩阵来表示城堡的位置，横向、纵向标号 1−1−<em>N</em>。</p>
<p>我们采用逆推法，既然原题目是走到哪里射一支箭，那我们就走到那里之后拔一支箭，如果最后得到所有的靶子上都没有箭了，由于题目的路径唯一，那就证明我们找到了题目所要求的路径。</p>
<ol>
<li><p>算法开始：</p>
<p>当前行设为第一行，当前列设为第一列，从第一行第一列开始搜索。</p>
<p>然后从左上角初始位置，按照题目意思进行寻路。</p>
</li>
<li><p>判断边界：</p>
<p>在当前行，当前列的位置上判断是否满足条件，若不满足，跳到第 55 步，即不符合边界条件。 判断条件如下：</p>
<ul>
<li>[][]<em>f<strong>l</strong>a**g</em>[<em>x</em>][<em>y</em>]&#x3D;&#x3D;1 标记数组已经被标记,已被走过，不能再走，超出边界</li>
<li>&lt;1<em>x</em>&lt;1 从左侧走出方格。</li>
<li><blockquote>
<p><em>x</em>&gt;<em>n</em> 从右侧走出方格。</p>
</blockquote>
</li>
<li>&lt;1<em>y</em>&lt;1 从上侧走出方格。</li>
<li><blockquote>
<p><em>y</em>&gt;<em>n</em> 从下侧走出方格。</p>
</blockquote>
</li>
<li>[]&lt;&#x3D;0<em>c<strong>o</strong>l</em>[<em>x</em>]&lt;&#x3D;0 没走到右下角，箭用完了。</li>
<li>[]&lt;&#x3D;0<em>r<strong>o</strong>l</em>[<em>y</em>]&lt;&#x3D;0 没走到右下角，箭用完了</li>
</ul>
</li>
<li><p>搜索过程：</p>
<p>调用 <code>Check</code> 函数。 如果边界条件满足，就继续调用搜索，找到下一步的位置</p>
</li>
<li><p>check(参数):</p>
<p>如果当搜索到 &#x3D;,&#x3D;<em>x</em>&#x3D;<em>n</em>,<em>y</em>&#x3D;<em>n</em> 时，且靶子上的箭都没了，按就找到了答案。</p>
<p>按照题目输出即可。</p>
</li>
<li><p>在当前位置上不满足条件的情形，进行回溯，并还原现场</p>
</li>
</ol>
<p>C++ 语言描述:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">PII</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> first;</span><br><span class="line">    <span class="type">int</span> second;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">30</span>;</span><br><span class="line"><span class="type">int</span> rol[N];</span><br><span class="line"><span class="type">int</span> col[N];</span><br><span class="line"><span class="type">int</span> n;<span class="comment">//格子数 长宽从1到n</span></span><br><span class="line"><span class="type">bool</span> flag[N][N]; <span class="comment">//用来标记是否走过</span></span><br><span class="line">vector&lt;PII&gt; res;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//---------图的路径搜索常用方向移动表示-------</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>]= &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> dy[<span class="number">4</span>]= &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两两组合形成上下左右四个方向</span></span><br><span class="line"><span class="comment">//      1------------------&gt; x</span></span><br><span class="line"><span class="comment">//      |</span></span><br><span class="line"><span class="comment">//      |</span></span><br><span class="line"><span class="comment">//      |</span></span><br><span class="line"><span class="comment">//      |</span></span><br><span class="line"><span class="comment">//      |</span></span><br><span class="line"><span class="comment">//      |</span></span><br><span class="line"><span class="comment">//      |</span></span><br><span class="line"><span class="comment">//      ↓</span></span><br><span class="line"><span class="comment">//      y</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// dx[0]=0 dy[0]=1 那么代表向下的方向</span></span><br><span class="line"><span class="comment">// dx[1]=1 dy[1]=0 那么代表向右的方向</span></span><br><span class="line"><span class="comment">// dx[2]=-1 dy[0]=0 那么代表向左的方向</span></span><br><span class="line"><span class="comment">// dx[3]=0 dy[1]=-1 那么代表向上的方向</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span>  <span class="title">check</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> <span class="comment">//判断走过的路径的箭靶数是否与目标相同</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==n &amp;&amp; y==n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(col[i]!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果箭靶上的数目不为0，根据逆推，我们通过当前路径得不到箭靶上的结果</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(rol[i]!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果箭靶上的数目不为0，根据逆推，我们通过当前路径得不到箭靶上的结果</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;res.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x=res[i].first;</span><br><span class="line">            <span class="comment">//x 轴坐标</span></span><br><span class="line">            <span class="type">int</span> y=res[i].second;</span><br><span class="line">            <span class="comment">//y 轴坐标</span></span><br><span class="line">            <span class="type">int</span> sum=n*(x<span class="number">-1</span>)+y<span class="number">-1</span> ;</span><br><span class="line">            <span class="comment">// 通过计算的到为题目要求的坐标系</span></span><br><span class="line">            cout &lt;&lt;sum&lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 成功终止</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//继续搜索</span></span><br><span class="line">    <span class="comment">//关于终止还是继续我们交给判定即可</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pd</span><span class="params">(<span class="type">int</span> x2,<span class="type">int</span> y2)</span> <span class="comment">//边界判断</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(flag[x2][y2]==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//已被走过，不能再走，超出边界</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x2&lt;<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//从左侧走出方格</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x2&gt;n)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//从右侧走出方格</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(y2&lt;<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//从上侧走出方格</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(y2&gt;n)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//从下侧走出方格</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(col[x2]&lt;=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//没走到右下角，箭用完了</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(rol[y2]&lt;=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//没走到右下角，箭用完了</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//符合边界条件，可以继续执行搜索</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">check</span>(x,y))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">        <span class="comment">//包含不符合规则的地方，回溯，用于剪枝</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> xt=dx[i]+x;</span><br><span class="line">            <span class="type">int</span> yt=dy[i]+y;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">pd</span>(xt,yt))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span> ;</span><br><span class="line">                <span class="comment">//不符合要求继续换方向搜索</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//因为要进行位置转移，我们给它起个名字，叫作案现场</span></span><br><span class="line">                <span class="comment">//比如向下移动</span></span><br><span class="line">                flag[xt][yt]=<span class="literal">true</span>;</span><br><span class="line">                col[xt]--;</span><br><span class="line">                rol[yt]--;</span><br><span class="line">                res.<span class="built_in">push_back</span>(&#123;xt,yt&#125;);</span><br><span class="line">                <span class="built_in">dfs</span>(xt,yt);</span><br><span class="line">                <span class="comment">//搜索回溯后，因为没有找到正确答案，所以要回复作案现场，返回到搜索之前</span></span><br><span class="line">                res.<span class="built_in">pop_back</span>();</span><br><span class="line">                flag[xt][yt]=<span class="literal">false</span>;</span><br><span class="line">                col[xt]++;</span><br><span class="line">                rol[yt]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        cin &gt;&gt; rol[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        cin &gt;&gt; col[i];</span><br><span class="line">    flag[<span class="number">1</span>][<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line">    col[<span class="number">1</span>]--;</span><br><span class="line">    rol[<span class="number">1</span>]--;</span><br><span class="line">    res.<span class="built_in">push_back</span>(&#123;<span class="number">1</span>,<span class="number">1</span>&#125;);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Python 语言描述:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">0</span></span><br><span class="line">flag = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">27</span>)]</span><br><span class="line">resX = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>)]</span><br><span class="line">resY = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>)]</span><br><span class="line">resCount = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------图的路径搜索常用方向移动表示-------</span></span><br><span class="line"></span><br><span class="line">dx = [<span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">dy = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两两组合形成上下左右四个方向</span></span><br><span class="line"><span class="comment">#      1------------------&gt; x</span></span><br><span class="line"><span class="comment">#      |</span></span><br><span class="line"><span class="comment">#      |</span></span><br><span class="line"><span class="comment">#      |</span></span><br><span class="line"><span class="comment">#      |</span></span><br><span class="line"><span class="comment">#      |</span></span><br><span class="line"><span class="comment">#      |</span></span><br><span class="line"><span class="comment">#      |</span></span><br><span class="line"><span class="comment">#      ↓</span></span><br><span class="line"><span class="comment">#      y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dx[0]=0 dy[0]=1 那么代表向下的方向</span></span><br><span class="line"><span class="comment"># dx[1]=1 dy[1]=0 那么代表向右的方向</span></span><br><span class="line"><span class="comment"># dx[2]=-1 dy[0]=0 那么代表向左的方向</span></span><br><span class="line"><span class="comment"># dx[3]=0 dy[1]=-1 那么代表向上的方向</span></span><br><span class="line"><span class="comment"># --------------------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    <span class="keyword">if</span> x == n &amp; y == n:</span><br><span class="line">        <span class="comment"># print(&quot;check point1&quot;)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> (col[i] != <span class="number">0</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="comment"># 如果箭靶上的数目不为0，根据逆推，我们通过当前路径得不到箭靶上的结果</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> (rol[i] != <span class="number">0</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, resCount):</span><br><span class="line">            x2 = resX[i]</span><br><span class="line">            <span class="comment"># x 轴坐标</span></span><br><span class="line">            y2 = resY[i]</span><br><span class="line">            <span class="comment"># y 轴坐标</span></span><br><span class="line">            <span class="built_in">sum</span> = n * (x2 - <span class="number">1</span>) + y2 - <span class="number">1</span></span><br><span class="line">            <span class="comment"># 通过计算的到为题目要求的坐标系</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">sum</span>, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 成功终止</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>  <span class="comment"># 继续搜索</span></span><br><span class="line">        <span class="comment"># 关于终止还是继续我们交给判定即可</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pd</span>(<span class="params">x2, y2</span>):</span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    <span class="comment"># print(&quot;x2 :&quot;, x2,&quot;y2 :&quot;, y2, &quot; n &quot;, n)</span></span><br><span class="line">    <span class="keyword">if</span> flag[x2][y2] == <span class="number">1</span>:</span><br><span class="line">        <span class="comment"># print(&quot;checkPoint3&quot;)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 已被走过，不能再走，超出边界</span></span><br><span class="line">    <span class="keyword">elif</span> x2 &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="comment"># print(&quot;checkPoint5&quot;)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment"># 从左侧走出方格</span></span><br><span class="line">    <span class="keyword">elif</span> x2 &gt; n:</span><br><span class="line">        <span class="comment"># print(&quot;checkPoint6&quot;)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment"># 从右侧走出方格</span></span><br><span class="line">    <span class="keyword">elif</span> col[x2] &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># print(&quot;checkPoint8&quot;)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment"># 没走到右下角，箭用完了</span></span><br><span class="line">    <span class="keyword">elif</span> y2 &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="comment"># print(&quot;checkPoint7&quot;)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment"># 从上侧走出方格</span></span><br><span class="line">    <span class="keyword">elif</span> y2 &gt; n:</span><br><span class="line">        <span class="comment"># print(&quot;y2 :&quot;,y2,&quot; n &quot;,n)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment"># 从下侧走出方格</span></span><br><span class="line">    <span class="keyword">elif</span> rol[y2] &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># print(&quot;checkPoint9&quot;)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment"># 没走到右下角，箭用完了</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 符合边界条件，可以继续执行搜索</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check(x, y):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 包含不符合规则的地方，回溯，用于剪枝</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">            xt = dx[i] + x</span><br><span class="line">            yt = dy[i] + y</span><br><span class="line">            <span class="comment"># print(xt, yt)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> pd(xt, yt):</span><br><span class="line">                <span class="comment"># print(&quot;CheckPoint&quot;, xt, yt)</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">                <span class="comment"># 不符合要求继续换方向搜索</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 因为要进行位置转移，我们给它起个名字，叫作案现场</span></span><br><span class="line">                <span class="comment"># 比如向下移动</span></span><br><span class="line">                col[xt] -= <span class="number">1</span></span><br><span class="line">                rol[yt] -= <span class="number">1</span></span><br><span class="line">                flag[xt][yt] = <span class="number">1</span></span><br><span class="line">                <span class="keyword">global</span> resCount</span><br><span class="line">                resX[resCount] = xt</span><br><span class="line">                resY[resCount] = yt</span><br><span class="line">                resCount += <span class="number">1</span></span><br><span class="line">                <span class="comment"># print(&quot;---------123-------&quot;)</span></span><br><span class="line">                <span class="comment"># print(flag)</span></span><br><span class="line">                <span class="comment"># print(&quot;----------------&quot;)</span></span><br><span class="line">                dfs(xt, yt)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 搜索回溯后，因为没有找到正确答案，所以要回复作案现场，返回到搜索之前</span></span><br><span class="line"></span><br><span class="line">                resCount -= <span class="number">1</span></span><br><span class="line">                flag[xt][yt] = <span class="number">0</span></span><br><span class="line">                <span class="comment"># print(&quot;--------321--------&quot;)</span></span><br><span class="line">                <span class="comment"># print(flag)</span></span><br><span class="line">                <span class="comment"># print(&quot;----------------&quot;)</span></span><br><span class="line">                col[xt] += <span class="number">1</span></span><br><span class="line">                rol[yt] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="comment"># print(&quot;----------------&quot;)</span></span><br><span class="line">    <span class="comment"># print(flag)</span></span><br><span class="line">    <span class="comment"># print(&quot;----------------&quot;)</span></span><br><span class="line">    rol = <span class="built_in">input</span>().split()</span><br><span class="line">    rol = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, rol))</span><br><span class="line">    rol = [<span class="number">0</span>] + rol</span><br><span class="line">    col = <span class="built_in">input</span>().split()</span><br><span class="line">    col = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, col))</span><br><span class="line">    col = [<span class="number">0</span>] + col</span><br><span class="line">    flag[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    <span class="comment"># print(&quot;----------------&quot;)</span></span><br><span class="line">    <span class="comment"># print(flag)</span></span><br><span class="line">    <span class="comment"># print(&quot;----------------&quot;)</span></span><br><span class="line">    col[<span class="number">1</span>] -= <span class="number">1</span></span><br><span class="line">    rol[<span class="number">1</span>] -= <span class="number">1</span></span><br><span class="line">    resX[resCount] = <span class="number">1</span></span><br><span class="line">    resY[resCount] = <span class="number">1</span></span><br><span class="line">    resCount += <span class="number">1</span></span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>然而需要注意的是上面代码会超时，我们要对其进行优化，因为同样的计算 Python 运行时间相比 C++ 要长很多，这里给 C++ 和 Python 相同的时间，确实是难为 Python 了。 因为上面是为了给大家系统的将一个框架，而这道题目的时间复杂度相对较高，Python 的运行时间是 C++ 10 倍甚至几十倍，这个题目，同样的复杂度，Python 给的时间是不好通过这个题目的，我优化了十几遍，确实通过不了。</p>
<p>Java 语言描述:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.abs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> rol[]=<span class="keyword">new</span> <span class="title class_">int</span> [N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> col[]=<span class="keyword">new</span> <span class="title class_">int</span> [N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> n;<span class="comment">//格子数 长宽从1到n</span></span><br><span class="line">    <span class="keyword">static</span>  <span class="type">boolean</span> flag[][]=<span class="keyword">new</span> <span class="title class_">boolean</span>[N][N]; <span class="comment">//用来标记是否走过</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> resX[]=<span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> resY[]=<span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> resCount=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------图的路径搜索常用方向移动表示-------</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> dx[]= &#123;<span class="number">0</span>,<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">static</span>  <span class="type">int</span> dy[]= &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,-<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两两组合形成上下左右四个方向</span></span><br><span class="line"><span class="comment">//      1------------------&gt; x</span></span><br><span class="line"><span class="comment">//      |</span></span><br><span class="line"><span class="comment">//      |</span></span><br><span class="line"><span class="comment">//      |</span></span><br><span class="line"><span class="comment">//      |</span></span><br><span class="line"><span class="comment">//      |</span></span><br><span class="line"><span class="comment">//      |</span></span><br><span class="line"><span class="comment">//      |</span></span><br><span class="line"><span class="comment">//      ↓</span></span><br><span class="line"><span class="comment">//      y</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// dx[0]=0 dy[0]=1 那么代表向下的方向</span></span><br><span class="line"><span class="comment">// dx[1]=1 dy[1]=0 那么代表向右的方向</span></span><br><span class="line"><span class="comment">// dx[2]=-1 dy[0]=0 那么代表向左的方向</span></span><br><span class="line"><span class="comment">// dx[3]=0 dy[1]=-1 那么代表向上的方向</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span>  <span class="title function_">check</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> <span class="comment">//判断走过的路径的箭靶数是否与目标相同</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x==n &amp;&amp; y==n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(col[i]!=<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//如果箭靶上的数目不为0，根据逆推，我们通过当前路径得不到箭靶上的结果</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(rol[i]!=<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//如果箭靶上的数目不为0，根据逆推，我们通过当前路径得不到箭靶上的结果</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;resCount; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> x2= resX[i];</span><br><span class="line">                <span class="comment">//x 轴坐标</span></span><br><span class="line">                <span class="type">int</span> y2=resY[i];</span><br><span class="line">                <span class="comment">//y 轴坐标</span></span><br><span class="line">                <span class="type">int</span> sum=n*(x2-<span class="number">1</span>)+y2-<span class="number">1</span> ;</span><br><span class="line">                <span class="comment">// 通过计算的到为题目要求的坐标系</span></span><br><span class="line">                System.out.print(sum+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">// 成功终止</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//继续搜索</span></span><br><span class="line">        <span class="comment">//关于终止还是继续我们交给判定即可</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">pd</span><span class="params">(<span class="type">int</span> x2,<span class="type">int</span> y2)</span> <span class="comment">//边界判断</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(flag[x2][y2] )</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//已被走过，不能再走，超出边界</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x2&lt;<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//从左侧走出方格</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x2&gt;n)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//从右侧走出方格</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(y2&lt;<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//从上侧走出方格</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(y2&gt;n)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//从下侧走出方格</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(col[x2]&lt;=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//没走到右下角，箭用完了</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(rol[y2]&lt;=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//没走到右下角，箭用完了</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//符合边界条件，可以继续执行搜索</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!check(x,y))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">            <span class="comment">//包含不符合规则的地方，回溯，用于剪枝</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> xt=dx[i]+x;</span><br><span class="line">                <span class="type">int</span> yt=dy[i]+y;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(!pd(xt,yt))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span> ;</span><br><span class="line">                    <span class="comment">//不符合要求继续换方向搜索</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//因为要进行位置转移，我们给它起个名字，叫作案现场</span></span><br><span class="line">                    <span class="comment">//比如向下移动</span></span><br><span class="line">                    flag[xt][yt]=<span class="literal">true</span>;</span><br><span class="line">                    col[xt]--;</span><br><span class="line">                    rol[yt]--;</span><br><span class="line">                    resX[resCount]=xt;</span><br><span class="line">                    resY[resCount++]=yt;</span><br><span class="line">                    dfs(xt,yt);</span><br><span class="line">                    <span class="comment">//搜索回溯后，因为没有找到正确答案，所以要回复作案现场，返回到搜索之前</span></span><br><span class="line">                    resCount--;</span><br><span class="line">                    flag[xt][yt]=<span class="literal">false</span>;</span><br><span class="line">                    col[xt]++;</span><br><span class="line">                    rol[yt]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        n = in.nextInt();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">            rol[i]=in.nextInt();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">             col[i]=in.nextInt();</span><br><span class="line">        flag[<span class="number">1</span>][<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line">        col[<span class="number">1</span>]--;</span><br><span class="line">        rol[<span class="number">1</span>]--;</span><br><span class="line">        resX[resCount]=<span class="number">1</span>;</span><br><span class="line">        resY[resCount++]=<span class="number">1</span>;</span><br><span class="line">        dfs(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="最大数字"><a href="#最大数字" class="headerlink" title="最大数字"></a>最大数字</h3><p>给定一个正整数 <em>N</em> 。你可以对 <em>N</em> 的任意一位数字执行任意次以下 22 种操 作：</p>
<ol>
<li>将该位数字加 11 。如果该位数字已经是 99 , 加 11 之后变成 00 。</li>
<li>将该位数字减 11 。如果该位数字已经是 00 , 减 11 之后变成 99 。</li>
</ol>
<p>你现在总共可以执行 11 号操作不超过 <em>A</em> 次, 22 号操作不超过 <em>B</em> 次。 请问你最大可以将 <em>N</em> 变成多少?</p>
<p><strong>解题思路:</strong></p>
<p>看上去 <em>N</em> 的范围貌似很大，达到了 <code>1e17</code> 的范围，但其实我们最多只需要考虑这最多 <code>17</code> 位数，所以可以想到爆搜得到答案。</p>
<p>一个数的大小是从左到右依次判断，所以我们从最左边开始枚举，我们无需关注后面的数，要利用自己的 <code>1</code> 号操作和 <code>2</code> 号操作 <strong>保证当前这个数位的数一定要尽可能最大</strong></p>
<p>然后分别考虑两种操作，首先两种操作不可能混用，因为它们是抵消的效果，所以要么对这个数全使用 <code>1</code> 操作，要么 <code>2</code> 操作。假设某个数位的值为 <code>x</code>,首先考虑 <code>1</code> 号操作，使用后可以让该数位变大，出于<strong>贪心</strong>考虑，我们想让它变成 <code>9</code>，那么需要进行 <code>9-x</code> 次 <code>1</code> 号操作，当然可能此时 <code>1</code> 号操作并不足以让我们将 <code>x</code> 变成 <code>9</code>，但我们还是使用剩余的全部的次数将其变大，所以每次考虑 <code>1</code> 号操作应该使用的操作数 <code>t</code> 应该为 <code>t=min(n,9-x)</code>,此时 <code>x</code> 将变为 <code>x+t</code>，然后进行下一位的判断。</p>
<p>其次我们考虑 <code>2</code> 号操作，这个的判断比较简单，它是让某个值减小，唯一能让某个数变大的机会就是将其减到 <code>0</code> 后再减就会变成 <code>9</code>。那么这样操作需要的次数就是 <code>x+1</code>，如果操作次数不够，那我们宁愿不使用，因为这只会让这个数位变得更小。</p>
<p>在深搜 <code>dfs</code> 的过程中，参数记录遍历到第几个数位以及此时累计的和，当搜索完所有数位后，将此时的和与答案进行一个取 <code>max</code>，最后的值则为答案。</p>
<p>C++ 语言描述：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> c[<span class="number">20</span>];</span><br><span class="line">LL ans=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//n:1号操作剩余次数  m:2号操作剩余次数</span></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i,LL v)</span>&#123;</span><br><span class="line">    <span class="type">int</span> x=c[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(c[i])&#123;</span><br><span class="line">        <span class="comment">//应该使用的操作次数</span></span><br><span class="line">        <span class="type">int</span> t=min(n,<span class="number">9</span>-x);</span><br><span class="line">        n-=t;</span><br><span class="line">        dfs(i+<span class="number">1</span>,v*<span class="number">10</span>+x+t);</span><br><span class="line">        <span class="comment">//回溯</span></span><br><span class="line">        n+=t;</span><br><span class="line">        <span class="comment">//考虑操作2是否能够使用</span></span><br><span class="line">        <span class="keyword">if</span>(m&gt;x)&#123;</span><br><span class="line">            m-=x+<span class="number">1</span>;</span><br><span class="line">            dfs(i+<span class="number">1</span>,v*<span class="number">10</span>+<span class="number">9</span>);</span><br><span class="line">            <span class="comment">//回溯</span></span><br><span class="line">            m+=x+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//答案取max</span></span><br><span class="line">        ans=max(ans,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s%d%d&quot;</span>,c,&amp;n,&amp;m);</span><br><span class="line">    dfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Java 语言描述:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">    <span class="keyword">static</span> <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out));</span><br><span class="line">    <span class="keyword">static</span> String t;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> a, b, m;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// i 表示考虑到第i位  v表示当前的值是多少</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">long</span> v)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == m) &#123;</span><br><span class="line">            ans = Math.max(ans, v);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> t.charAt(i) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="comment">//考虑第一种使用</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">g</span> <span class="operator">=</span> Math.min(a, <span class="number">9</span> - c);</span><br><span class="line">        a -= g;</span><br><span class="line">        dfs(i + <span class="number">1</span>, v * <span class="number">10</span> + c + g);</span><br><span class="line">        <span class="comment">//回溯</span></span><br><span class="line">        a += g;</span><br><span class="line">        <span class="comment">//考虑第二种使用   我一定要减到9  只有b&gt;c 才能减到9</span></span><br><span class="line">        <span class="keyword">if</span> (b &gt; c) &#123;</span><br><span class="line">            b -= c + <span class="number">1</span>;</span><br><span class="line">            dfs(i + <span class="number">1</span>, v * <span class="number">10</span> + <span class="number">9</span>);</span><br><span class="line">            <span class="comment">//回溯</span></span><br><span class="line">            b += c + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        String[] s = br.readLine().trim().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        t = s[<span class="number">0</span>];</span><br><span class="line">        m = t.length();</span><br><span class="line">        a = Integer.parseInt(s[<span class="number">1</span>]);</span><br><span class="line">        b = Integer.parseInt(s[<span class="number">2</span>]);</span><br><span class="line">        dfs(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        out.println(ans);</span><br><span class="line">        out.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Python 语言描述:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">t = <span class="string">&quot;&quot;</span></span><br><span class="line">a = <span class="number">0</span></span><br><span class="line">b = <span class="number">0</span></span><br><span class="line">m = <span class="number">0</span></span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i, v</span>):</span><br><span class="line">    <span class="keyword">global</span> ans, a, b, t</span><br><span class="line">    <span class="keyword">if</span> i == m:</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, v)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    c = <span class="built_in">int</span>(t[i])</span><br><span class="line">    <span class="comment"># 考虑第一种使用</span></span><br><span class="line">    g = <span class="built_in">min</span>(a, <span class="number">9</span> - c)</span><br><span class="line">    a -= g</span><br><span class="line">    dfs(i + <span class="number">1</span>, v * <span class="number">10</span> + c + g)</span><br><span class="line">    <span class="comment"># 回溯</span></span><br><span class="line">    a += g</span><br><span class="line">    <span class="comment"># 考虑第二种使用   我一定要减到9  只有b&gt;c 才能减到9</span></span><br><span class="line">    <span class="keyword">if</span> b &gt; c:</span><br><span class="line">        b -= c + <span class="number">1</span></span><br><span class="line">        dfs(i + <span class="number">1</span>, v * <span class="number">10</span> + <span class="number">9</span>)</span><br><span class="line">        <span class="comment"># 回溯</span></span><br><span class="line">        b += c + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">global</span> ans, a, b, t, m</span><br><span class="line">    line = sys.stdin.readline().strip()</span><br><span class="line">    s = line.split()</span><br><span class="line">    t = s[<span class="number">0</span>]</span><br><span class="line">    m = <span class="built_in">len</span>(t)</span><br><span class="line">    a = <span class="built_in">int</span>(s[<span class="number">1</span>])</span><br><span class="line">    b = <span class="built_in">int</span>(s[<span class="number">2</span>])</span><br><span class="line">    dfs(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(ans)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><p>DFS 是一种非常重要的回溯算法，它是通过递归设计转移状态，再加上边界判断，与结果检查，构成的基本搜索框架。</p>
<p>DFS 最重要的就是设计回溯，所谓回溯就是还原现场，保证在执行另一分支的时候能够确保所有的改变只受当前状态的影响，所以在一条路走不通时就要修改。特殊的修改可以达到特殊的回溯效果，回溯时剪枝，回溯时调整路线，都是可以的。</p>
<p>DFS 是算法学习的基础工具，很重要，必须要学会。</p>
<hr>
<p>show: step version: 1.0 enable_checker: true</p>
<hr>
<h1 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h1><p>BFS，其英文全称是 Breadth First Search，意为广度优先搜索，是所有的搜索手段之一。它是从某个状态开始，将所有节点加入一个先进先出的队列，然后一层一层进行状态转移，并且展开节点。</p>
<p>本章题目难度较大，请大家仔细研读讲解和代码。</p>
<h2 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h2><p>1.BFS 算法设计原理与实现方法 2.经典题型精讲</p>
<h2 id="广度优先搜索基本概念"><a href="#广度优先搜索基本概念" class="headerlink" title="广度优先搜索基本概念"></a>广度优先搜索基本概念</h2><p>作为搜索算法的一种，BFS 相较于 DFS 而言，BFS 是一层一层展开的，那么对于有多个终态时，最先找到的一定是最短的。</p>
<h2 id="广度优先搜索算法的设计步骤"><a href="#广度优先搜索算法的设计步骤" class="headerlink" title="广度优先搜索算法的设计步骤"></a>广度优先搜索算法的设计步骤</h2><p>按照定义设计：</p>
<ol>
<li>确定该题目的状态（包括边界）</li>
<li>找到状态转移方式</li>
<li>找到问题的出口，计数或者某个状态</li>
<li>设计搜索</li>
</ol>
<p>会发现我们前期要找到的参数基本一致，所以在一般情况下 BFS 和 DFS 可以相互转换。</p>
<p>伪代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">check</span><span class="params">(参数)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(满足条件)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">pd</span><span class="params">(参数)</span>&#123;</span><br><span class="line">    相应操作</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">bfs</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">1.</span> 把根节点放入队列尾端</span><br><span class="line">    <span class="number">2.</span> 每次从队列中取出一个节点</span><br><span class="line">    <span class="number">3.</span> Check 判断是不是答案，如果是结束算法 <span class="keyword">return</span>;</span><br><span class="line">    <span class="number">4.</span> 把当前取出的节点扩展，如果扩展后的节点经Pd()后符合要求，就放入队列，不符合就不放。</span><br><span class="line">    <span class="number">5.</span> 转到步骤<span class="number">2</span>，循环执行</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">如果所有节点被扩展完了，没有找到答案就无解。</span><br></pre></td></tr></table></figure>

<h3 id="长草"><a href="#长草" class="headerlink" title="长草"></a>长草</h3><p><a href="https://www.lanqiao.cn/problems/149/learning/">题目链接</a></p>
<p>难度: 简单</p>
<p>标签: 模拟, BFS, 2020, 省模拟赛</p>
<p><strong>题目描述:</strong></p>
<p>小明有一块空地，他将这块空地划分为 <em>n</em> 行 <em>m</em> 列的小块，每行和每列的长度都为 1。</p>
<p>小明选了其中的一些小块空地，种上了草，其他小块仍然保持是空地。</p>
<p>这些草长得很快，每个月，草都会向外长出一些，如果一个小块种了草，则它将向自己的上、下、左、右四小块空地扩展，</p>
<p>这四小块空地都将变为有草的小块。请告诉小明，<em>k</em> 个月后空地上哪些地方有草。</p>
<p><strong>输入描述:</strong></p>
<p>输入的第一行包含两个整数 ,<em>n</em>,<em>m</em>。</p>
<p>接下来 <em>n</em> 行，每行包含 <em>m</em> 个字母，表示初始的空地状态，字母之间没有空格。如果为小数点，表示为空地，如果字母为 <em>g</em>，表示种了草。</p>
<p>接下来包含一个整数 <em>k</em>。 其中，2≤,≤1000，1≤≤10002≤<em>n</em>,<em>m</em>≤1000，1≤<em>k</em>≤1000。</p>
<p><strong>输出描述:</strong></p>
<p>输出 <em>n</em> 行，每行包含 <em>m</em> 个字母，表示 <em>k</em> 个月后空地的状态。如果为小数点，表示为空地，如果字母为 <em>g</em>，表示长了草。</p>
<p><strong>输入输出样例:</strong></p>
<p><strong>示例:</strong></p>
<p><strong>输入:</strong></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">4 5</span><br><span class="line">.g...</span><br><span class="line">.....</span><br><span class="line">..g..</span><br><span class="line">.....</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<p><strong>输出:</strong></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">gggg.</span><br><span class="line">gggg.</span><br><span class="line">ggggg</span><br><span class="line">.ggg.</span><br></pre></td></tr></table></figure>

<p><strong>运行限制:</strong></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">最大运行时间：1s</span><br><span class="line">最大运行内存: 256M</span><br></pre></td></tr></table></figure>

<p><strong>解题思路:</strong></p>
<p>这个题目简直就是为了广度优先搜索设置模板题，由于这个题目时输出广度优先搜索 <code>K</code> 次扩展后的终态，那我们就不用设置 <code>Check</code> 函数。</p>
<p>这里用一个 ×<em>N</em>×<em>M</em> 的矩阵来表示草地。</p>
<ol>
<li><p>算法开始：</p>
<p>将字母为 <code>g</code> 的草地的位置加入队列，然后向下执行</p>
</li>
<li><p>判断边界：</p>
<p>判断是否已经长了草，判断是否超出边界范围</p>
</li>
<li><p>搜索过程：</p>
<p>不断从队列取出一个节点，进行上下左右的扩展，执行 <code>2</code> 判断边界，符合就放入队列，不符合就跳过。</p>
<p>执行 K 次扩展，输出草地状态。</p>
</li>
<li><p>check(参数)：</p>
<p>这里不需要进行 <code>Check</code></p>
</li>
</ol>
<p>C++ 语言描述:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">PII</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> first;</span><br><span class="line">    <span class="type">int</span> second;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// C++ 有个数据类型叫 pair 上面的就可以定义为 pair&lt;int,int&gt; 用起来比较方便。</span></span><br><span class="line">PII tempPair;<span class="comment">//临时结点</span></span><br><span class="line"><span class="type">char</span> Map[M][M];</span><br><span class="line"><span class="comment">//---------图的路径搜索常用方向移动表示-------</span></span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>]= &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> dy[<span class="number">4</span>]= &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="comment">// 两两组合形成上下左右四个方向</span></span><br><span class="line"><span class="comment">//      1------------------&gt; x</span></span><br><span class="line"><span class="comment">//      |</span></span><br><span class="line"><span class="comment">//      |</span></span><br><span class="line"><span class="comment">//      |</span></span><br><span class="line"><span class="comment">//      |</span></span><br><span class="line"><span class="comment">//      |</span></span><br><span class="line"><span class="comment">//      |</span></span><br><span class="line"><span class="comment">//      |</span></span><br><span class="line"><span class="comment">//      ↓</span></span><br><span class="line"><span class="comment">//      y</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// dx[0]=0 dy[0]=1 那么代表向下的方向</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// dx[1]=1 dy[1]=0 那么代表向右的方向</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// dx[2]=-1 dy[0]=0 那么代表向左的方向</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// dx[3]=0 dy[1]=-1 那么代表向上的方向</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;<span class="comment">// n 行</span></span><br><span class="line"><span class="type">int</span> m;<span class="comment">// m 列</span></span><br><span class="line"><span class="type">int</span> k;<span class="comment">// k 次</span></span><br><span class="line"></span><br><span class="line">queue&lt;PII &gt; q; <span class="comment">//广度优先搜索所用的队列</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> len;<span class="comment">//记录节点数量方便后续k的计算</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pd</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// /x 轴坐标 左侧越界</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x&gt;n)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//x 轴坐标 右侧越界</span></span><br><span class="line">    <span class="keyword">else</span>  <span class="keyword">if</span>(y&lt;<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//y 轴坐标 上侧越界</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(y&gt;m)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//y 轴坐标 下侧越界</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(Map[x][y]==<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//已经长草了</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 在范围内，且没长草</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFS</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//BFS</span></span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()&amp;&amp;k&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tempPair = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="comment">//这两步是取出队首的节点</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> x = tempPair.first;<span class="comment">//横坐标</span></span><br><span class="line">        <span class="type">int</span> y = tempPair.second;<span class="comment">//纵坐标</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> nowx = x+dx[i]; <span class="comment">//扩展后的横坐标</span></span><br><span class="line">            <span class="type">int</span> nowy = y+dy[i]; <span class="comment">//扩展后的纵坐标</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">pd</span>(nowx,nowy))</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(&#123;nowx,nowy&#125;);</span><br><span class="line">                Map[nowx][nowy]=<span class="string">&#x27;g&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//符合要求执行扩展，不符合要求，忽略即可。</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        len--; <span class="comment">//没取出一个节点len  -1</span></span><br><span class="line">        <span class="keyword">if</span>(len==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//当len =0 时，代表当前层扩展完了，那么就代表第一个月扩展完了</span></span><br><span class="line">            k--; <span class="comment">// 所以k--</span></span><br><span class="line">            len = q.<span class="built_in">size</span>(); <span class="comment">// 当前层扩展完了，那就该扩展下一层了，所以len又被赋值为下一层的节点数目的值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin&gt;&gt;Map[i][j];</span><br><span class="line">            <span class="keyword">if</span>(Map[i][j]==<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                tempPair.first=i;</span><br><span class="line">                tempPair.second=j;</span><br><span class="line">               <span class="comment">// cout&lt;&lt;i&lt;&lt;&quot;&quot;&lt;&lt;j&lt;&lt;endl;</span></span><br><span class="line">                q.<span class="built_in">push</span>(tempPair);<span class="comment">//将初始有树的结点加入队列</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    len = q.<span class="built_in">size</span>();<span class="comment">//记录第一层的节点数量方便后续k的计算</span></span><br><span class="line">    cin&gt;&gt;k;</span><br><span class="line">    <span class="built_in">BFS</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;Map[i][j];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Python 语言描述:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请在此输入您的代码</span></span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line">dx = [<span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">dy = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两两组合形成上下左右四个方向</span></span><br><span class="line"><span class="comment">#      1------------------&gt; x</span></span><br><span class="line"><span class="comment">#      |</span></span><br><span class="line"><span class="comment">#      |</span></span><br><span class="line"><span class="comment">#      |</span></span><br><span class="line"><span class="comment">#      |</span></span><br><span class="line"><span class="comment">#      |</span></span><br><span class="line"><span class="comment">#      |</span></span><br><span class="line"><span class="comment">#      |</span></span><br><span class="line"><span class="comment">#      ↓</span></span><br><span class="line"><span class="comment">#      y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dx[0]=0 dy[0]=1 那么代表向下的方向</span></span><br><span class="line"><span class="comment"># dx[1]=1 dy[1]=0 那么代表向右的方向</span></span><br><span class="line"><span class="comment"># dx[2]=-1 dy[0]=0 那么代表向左的方向</span></span><br><span class="line"><span class="comment"># dx[3]=0 dy[1]=-1 那么代表向上的方向</span></span><br><span class="line"></span><br><span class="line">Map = []</span><br><span class="line"></span><br><span class="line">q = Queue()</span><br><span class="line"></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line">m = <span class="number">0</span></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">length = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pd</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">global</span> n, m, Map</span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment"># x 轴坐标左侧越界</span></span><br><span class="line">    <span class="keyword">elif</span> x &gt;= n:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment"># x 轴坐标右侧越界</span></span><br><span class="line">    <span class="keyword">elif</span> y &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment"># y轴坐标上侧越界</span></span><br><span class="line">    <span class="keyword">elif</span> y &gt;= m:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment"># y 轴坐标下侧越界</span></span><br><span class="line">    <span class="keyword">elif</span> Map[x][y] == <span class="string">&#x27;g&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment"># 已经长草了</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 在范围内，且没长草</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">BFS</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">global</span> k, q, n, m, Map, length</span><br><span class="line">    <span class="keyword">while</span> k &gt; <span class="number">0</span> &amp; (<span class="keyword">not</span> q.empty()):</span><br><span class="line">        tempPair = q.get()</span><br><span class="line">        x = tempPair[<span class="number">0</span>]  <span class="comment"># 横坐标</span></span><br><span class="line">        y = tempPair[<span class="number">1</span>]  <span class="comment"># 纵坐标</span></span><br><span class="line">        nowx=x+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (pd(nowx, y)):</span><br><span class="line">            q.put((nowx, y))</span><br><span class="line">            Map[nowx][y] = <span class="string">&#x27;g&#x27;</span></span><br><span class="line"></span><br><span class="line">        nowx=x-<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (pd(nowx, y)):</span><br><span class="line">            q.put((nowx, y))</span><br><span class="line">            Map[nowx][y] = <span class="string">&#x27;g&#x27;</span></span><br><span class="line"></span><br><span class="line">        nowy=y+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (pd(x, nowy)):</span><br><span class="line">            q.put((nowx, nowy))</span><br><span class="line">            Map[x][nowy] = <span class="string">&#x27;g&#x27;</span></span><br><span class="line"></span><br><span class="line">        nowy=y-<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (pd(x, nowy)):</span><br><span class="line">            q.put((nowx, nowy))</span><br><span class="line">            Map[x][nowy] = <span class="string">&#x27;g&#x27;</span></span><br><span class="line"></span><br><span class="line">        length -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> length == <span class="number">0</span>:</span><br><span class="line">            k -= <span class="number">1</span></span><br><span class="line">            length = q.qsize()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    Map = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]  <span class="comment"># Python 动态开数组会减少运行时间</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        input_ = <span class="built_in">input</span>()</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            Map[i][j] = input_[j]</span><br><span class="line">            <span class="keyword">if</span> Map[i][j] == <span class="string">&#x27;g&#x27;</span>:</span><br><span class="line">                q.put((i, j))</span><br><span class="line"></span><br><span class="line">    k = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    length = q.qsize()</span><br><span class="line">    BFS()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        str_temp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            str_temp += Map[i][j]</span><br><span class="line">        <span class="built_in">print</span>(str_temp)</span><br></pre></td></tr></table></figure>

<p><strong>重点:</strong></p>
<p>Python 的 Queue 非常耗费时间，强烈建议大家使用 list 进行模拟</p>
<p>下面是用 List 模拟，使用 Queue 耗时 3000 ms , 使用 list 模拟仅消耗 54 ms 所以大家使用 Python 编写代码的时候还是使用 List 尽量避免 Queue 的使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请在此输入您的代码</span></span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line">dx = [<span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">dy = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两两组合形成上下左右四个方向</span></span><br><span class="line"><span class="comment">#      1------------------&gt; x</span></span><br><span class="line"><span class="comment">#      |</span></span><br><span class="line"><span class="comment">#      |</span></span><br><span class="line"><span class="comment">#      |</span></span><br><span class="line"><span class="comment">#      |</span></span><br><span class="line"><span class="comment">#      |</span></span><br><span class="line"><span class="comment">#      |</span></span><br><span class="line"><span class="comment">#      |</span></span><br><span class="line"><span class="comment">#      ↓</span></span><br><span class="line"><span class="comment">#      y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dx[0]=0 dy[0]=1 那么代表向下的方向</span></span><br><span class="line"><span class="comment"># dx[1]=1 dy[1]=0 那么代表向右的方向</span></span><br><span class="line"><span class="comment"># dx[2]=-1 dy[0]=0 那么代表向左的方向</span></span><br><span class="line"><span class="comment"># dx[3]=0 dy[1]=-1 那么代表向上的方向</span></span><br><span class="line"></span><br><span class="line">Map = []</span><br><span class="line"></span><br><span class="line">q = []</span><br><span class="line">qfront = <span class="number">0</span></span><br><span class="line">qend = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line">m = <span class="number">0</span></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">length = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pd</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment"># x 轴坐标左侧越界</span></span><br><span class="line">    <span class="keyword">elif</span> x &gt;= n:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment"># x 轴坐标右侧越界</span></span><br><span class="line">    <span class="keyword">elif</span> y &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment"># y轴坐标上侧越界</span></span><br><span class="line">    <span class="keyword">elif</span> y &gt;= m:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment"># y 轴坐标下侧越界</span></span><br><span class="line">    <span class="keyword">elif</span> Map[x][y] == <span class="string">&#x27;g&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment"># 已经长草了</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 在范围内，且没长草</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">BFS</span>():</span><br><span class="line">    <span class="keyword">global</span> k, q, n, m, Map, length, qend, qfront</span><br><span class="line">    <span class="comment"># print(&quot;K Length&quot;, k, length)</span></span><br><span class="line">    <span class="keyword">while</span> k &gt; <span class="number">0</span> <span class="keyword">and</span> length &gt; <span class="number">0</span>:</span><br><span class="line">        tempPair = q[qfront]</span><br><span class="line">        qfront += <span class="number">1</span></span><br><span class="line">        x = tempPair[<span class="number">0</span>]  <span class="comment"># 横坐标</span></span><br><span class="line">        y = tempPair[<span class="number">1</span>]  <span class="comment"># 纵坐标</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line"></span><br><span class="line">            nowx = x + dx[i]  <span class="comment"># 扩展后的横坐标</span></span><br><span class="line">            nowy = y + dy[i]  <span class="comment"># 扩展后的纵坐标</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (pd(nowx, nowy)):</span><br><span class="line">                q.append((nowx,nowy))</span><br><span class="line">                qend += <span class="number">1</span></span><br><span class="line">                Map[nowx][nowy] = <span class="string">&#x27;g&#x27;</span></span><br><span class="line">        length -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> length == <span class="number">0</span>:</span><br><span class="line">            k -= <span class="number">1</span></span><br><span class="line">            length = qend - qfront</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    Map = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]  <span class="comment"># Python 动态开数组会减少运行时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        input_ = <span class="built_in">input</span>()</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            Map[i][j] = input_[j]</span><br><span class="line">            <span class="keyword">if</span> Map[i][j] == <span class="string">&#x27;g&#x27;</span>:</span><br><span class="line">                q.append((i,j))</span><br><span class="line">                qend += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    k = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    length = qend - qfront</span><br><span class="line">    BFS()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        str_temp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            str_temp += Map[i][j]</span><br><span class="line">        <span class="built_in">print</span>(str_temp)</span><br></pre></td></tr></table></figure>

<p>Java 语言描述:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.abs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">M</span> <span class="operator">=</span> <span class="number">1005</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">PII</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> first;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> second;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> String Map[]=<span class="keyword">new</span> <span class="title class_">String</span>[M];</span><br><span class="line"><span class="comment">//---------图的路径搜索常用方向移动表示-------</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> dx[]= &#123;<span class="number">0</span>,<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">static</span>  <span class="type">int</span> dy[]= &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,-<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两两组合形成上下左右四个方向</span></span><br><span class="line"><span class="comment">//      1------------------&gt; x</span></span><br><span class="line"><span class="comment">//      |</span></span><br><span class="line"><span class="comment">//      |</span></span><br><span class="line"><span class="comment">//      |</span></span><br><span class="line"><span class="comment">//      |</span></span><br><span class="line"><span class="comment">//      |</span></span><br><span class="line"><span class="comment">//      |</span></span><br><span class="line"><span class="comment">//      |</span></span><br><span class="line"><span class="comment">//      ↓</span></span><br><span class="line"><span class="comment">//      y</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// dx[0]=0 dy[0]=1 那么代表向下的方向</span></span><br><span class="line"><span class="comment">// dx[1]=1 dy[1]=0 那么代表向右的方向</span></span><br><span class="line"><span class="comment">// dx[2]=-1 dy[0]=0 那么代表向左的方向</span></span><br><span class="line"><span class="comment">// dx[3]=0 dy[1]=-1 那么代表向上的方向</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> n;<span class="comment">// n 行</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> m;<span class="comment">// m 列</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> k;<span class="comment">// k 次</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Queue&lt;PII &gt; q= <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//广度优先搜索所用的队列</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> len;<span class="comment">//记录节点数量方便后续k的计算</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">pd</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">// /x 轴坐标 左侧越界</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x&gt;n)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//x 轴坐标 右侧越界</span></span><br><span class="line">        <span class="keyword">else</span>  <span class="keyword">if</span>(y&lt;<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//y 轴坐标 上侧越界</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(y&gt;m)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//y 轴坐标 下侧越界</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(Map[x].charAt(y)==<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//已经长草了</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 在范围内，且没长草</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">BFS</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//BFS</span></span><br><span class="line">        <span class="keyword">while</span>(q.size()!=<span class="number">0</span>&amp;&amp;k&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            PII tempPair= q.peek();</span><br><span class="line">            q.poll();</span><br><span class="line">            <span class="comment">//这两步是取出队首的节点</span></span><br><span class="line"><span class="comment">//            System.out.println(q.size());</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> tempPair.first;<span class="comment">//横坐标</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> tempPair.second;<span class="comment">//纵坐标</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">nowx</span> <span class="operator">=</span> x+dx[i]; <span class="comment">//扩展后的横坐标</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">nowy</span> <span class="operator">=</span> y+dy[i]; <span class="comment">//扩展后的纵坐标</span></span><br><span class="line">                <span class="keyword">if</span>(pd(nowx,nowy))</span><br><span class="line">                &#123;</span><br><span class="line">                    PII tempPair2=<span class="keyword">new</span> <span class="title class_">PII</span>();<span class="comment">//临时结点</span></span><br><span class="line">                    tempPair2.first=nowx;</span><br><span class="line">                    tempPair2.second=nowy;</span><br><span class="line">                    q.add(tempPair2);</span><br><span class="line">                    <span class="type">StringBuilder</span> <span class="variable">strBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(Map[nowx]);</span><br><span class="line">                    strBuilder.setCharAt(nowy, <span class="string">&#x27;g&#x27;</span>);</span><br><span class="line">                    Map[nowx]=strBuilder.toString();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//符合要求执行扩展，不符合要求，忽略即可。</span></span><br><span class="line">            &#125;</span><br><span class="line">            len--; <span class="comment">//没取出一个节点len  -1</span></span><br><span class="line">            <span class="keyword">if</span>(len==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//当len =0 时，代表当前层扩展完了，那么就代表第一个月扩展完了</span></span><br><span class="line">                k--; <span class="comment">// 所以k--</span></span><br><span class="line">                len = q.size(); <span class="comment">// 当前层扩展完了，那就该扩展下一层了，所以len又被赋值为下一层的节点数目的值</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        n = in.nextInt();</span><br><span class="line">        m = in.nextInt();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Map[i]=<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot; &quot;</span> +in.next());</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=m; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">char</span> <span class="variable">temChar</span> <span class="operator">=</span> Map[i].charAt(j);</span><br><span class="line">                <span class="keyword">if</span>(temChar==<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    PII tempPair=<span class="keyword">new</span> <span class="title class_">PII</span>();<span class="comment">//临时结点</span></span><br><span class="line">                    tempPair.first=i;</span><br><span class="line">                    tempPair.second=j;</span><br><span class="line">                    q.offer(tempPair);<span class="comment">//将初始有草的结点加入队列</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        len = q.size();<span class="comment">//记录第一层的节点数量方便后续k的计算</span></span><br><span class="line">        k= in.nextInt();</span><br><span class="line">        BFS();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(Map[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="走迷宫"><a href="#走迷宫" class="headerlink" title="走迷宫"></a>走迷宫</h3><p><a href="https://www.lanqiao.cn/problems/1216/learning/">题目链接</a></p>
<p>难度: 简单</p>
<p>标签: BFS</p>
<p><strong>题目描述:</strong></p>
<p>给定一个 ×<em>N</em>×<em>M</em> 的网格迷宫 <em>G</em>。<em>G</em> 的每个格子要么是道路，要么是障碍物（道路用 11 表示，障碍物用 00 表示）。</p>
<p>已知迷宫的入口位置为 (1,1)(<em>x</em>1,<em>y</em>1)，出口位置为 (2,2)(<em>x</em>2,<em>y</em>2)。问从入口走到出口，最少要走多少个格子。</p>
<p><strong>输入:</strong></p>
<p>输入第 11 行包含两个正整数 ,<em>N</em>,<em>M</em>，分别表示迷宫的大小。</p>
<p>接下来输入一个 ×<em>N</em>×<em>M</em> 的矩阵。若 ,&#x3D;1<em>G**i</em>,<em>j</em>&#x3D;1 表示其为道路，否则表示其为障碍物。</p>
<p>最后一行输入四个整数 1,1,2,2<em>x</em>1,<em>y</em>1,<em>x</em>2,<em>y</em>2，表示入口的位置和出口的位置。</p>
<p>1≤,≤1021≤<em>N</em>,<em>M</em>≤102，0≤,≤10≤<em>G**i</em>,<em>j</em>≤1，1≤1,2≤1≤<em>x</em>1,<em>x</em>2≤<em>N</em>，1≤1,2≤1≤<em>y</em>1,<em>y</em>2≤<em>M</em>。</p>
<p><strong>输出：</strong></p>
<p>输出仅一行，包含一个整数表示答案。</p>
<p>若无法从入口到出口，则输出 −1−1。</p>
<p><strong>输入输出样例：</strong></p>
<p>输入</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">5 5</span><br><span class="line">1 0 1 1 0</span><br><span class="line">1 1 0 1 1</span><br><span class="line">0 1 0 1 1</span><br><span class="line">1 1 1 1 1</span><br><span class="line">1 0 0 0 1</span><br><span class="line">1 1 5 5</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">8</span><br></pre></td></tr></table></figure>

<p><strong>运行限制:</strong></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">最大运行时间：1s</span><br><span class="line">最大运行内存: 128M</span><br></pre></td></tr></table></figure>

<p><strong>解题思路:</strong></p>
<ol>
<li><p><strong>算法开始：</strong></p>
<p>我们以起点开始做 BFS ，将入口压入栈开始执行 BFS 算法</p>
</li>
<li><p><strong>判断边界：</strong></p>
<p>在当前行，当前列的位置上判断是否满足条件，若不满足，跳到第 5 步，即不符合边界条件。 判断条件如下：</p>
<ol>
<li>[][]<em>v<strong>i</strong>s</em>[<em>x</em>][<em>y</em>] &gt;&#x3D; 1 标记数组已经被标记，已被走过，不能再走，超出边界</li>
<li>&lt;1<em>x</em>&lt;1 从左侧走出方格</li>
<li><blockquote>
<p><em>x</em>&gt;<em>n</em> 从右侧走出方格</p>
</blockquote>
</li>
<li>&lt;1<em>y</em>&lt;1 从上侧走出方格</li>
<li><blockquote>
<p><em>y</em>&gt;<em>n</em> 从下侧走出方格</p>
</blockquote>
</li>
<li>[][]<em>m<strong>a</strong>p</em>[<em>x</em>][<em>y</em>] !&#x3D; 1 没有路不能走</li>
</ol>
</li>
<li><p><strong>搜索过程：</strong></p>
<p>调用 Check 函数。</p>
<p>如果边界条件满足，就继续调用搜索，找到下一步的位置</p>
<p>每次找到下一个位置的时候，令其 [][]<em>V<strong>i</strong>s</em>[<em>n<strong>e</strong>x<strong>t</strong>x</em>][<em>n<strong>e</strong>x<strong>t</strong>y</em>] &#x3D; 当前 +1<em>V<strong>i</strong>s</em>+1</p>
<p>这样既能用 <em>v<strong>i</strong>s</em> 数组标记又能使用 <em>v<strong>i</strong>s</em> 数组存步数，从 11 开始，即开始节点是 11 ，所以最后要减去 11 。</p>
</li>
<li><p><strong>check(参数)：</strong></p>
<p>如果当搜索到 &#x3D;终点<em>x</em>&#x3D;终点<em>x</em>, &#x3D;终点<em>y</em>&#x3D;终点<em>y</em> 时，就找到了终点，此时他的 <em>V<strong>i</strong>s</em> 数组就存储了他的步数，但是是从 11 开始的。</p>
</li>
</ol>
<p>C++ 语言描述:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> vis[<span class="number">150</span>][<span class="number">150</span>]; <span class="comment">//用于存储是否访问过，并且存储长度</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> G[<span class="number">150</span>][<span class="number">150</span>]; <span class="comment">//用于存储题目给出的地图</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上下左右移动，不会的看前面的代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">node Start,End;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pd</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//从左侧走出方格</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x&gt;n)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//从右侧走出方格</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(y&lt;<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//从上侧走出方格</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(y&gt;m)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//从下侧走出方格</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( vis[x][y]!=<span class="number">0</span>)</span><br><span class="line">        <span class="comment">//已经访问了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(G[x][y]!=<span class="string">&#x27;1&#x27;</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//不是路不能走</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span>  <span class="title">check</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(x == End.x&amp;&amp; y == End.y)   <span class="comment">//找到终点，把距离给他</span></span><br><span class="line">    &#123;</span><br><span class="line">        ans  =  vis[x][ y];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;node&gt;q;</span><br><span class="line"></span><br><span class="line">    node now,next;</span><br><span class="line"></span><br><span class="line">    q.<span class="built_in">push</span>(Start);     <span class="comment">//将起点压人队列中</span></span><br><span class="line"></span><br><span class="line">    vis[Start.x][Start.y] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        now = q.<span class="built_in">front</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(now.x,now.y))</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">        q.<span class="built_in">pop</span>();     <span class="comment">//将队列最前面的弹出。</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)  <span class="comment">//四个方向</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> nextx = now.x + dx[i];</span><br><span class="line">            <span class="type">int</span> nexty = now.y + dy[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">pd</span>(nextx,nexty))  <span class="comment">//判断是否符合条件</span></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                next.x=nextx;</span><br><span class="line">                next.y=nexty;</span><br><span class="line"></span><br><span class="line">                q.<span class="built_in">push</span>(next);</span><br><span class="line"></span><br><span class="line">                vis[nextx][nexty] = vis[now.x][now.y]+<span class="number">1</span>; <span class="comment">//步数+1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="comment">//memset(vis,0,sizeof(vis));</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin&gt;&gt;G[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;Start.x&gt;&gt;Start.y&gt;&gt;End.x&gt;&gt;End.y;</span><br><span class="line"></span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">bfs</span>();</span><br><span class="line">    cout&lt;&lt;ans<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Python 语言描述:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dx = [<span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">dy = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">G = []</span><br><span class="line"></span><br><span class="line">Vis = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------队列模拟-----------</span></span><br><span class="line">q = []                   <span class="comment"># |</span></span><br><span class="line">                         <span class="comment"># |</span></span><br><span class="line">qfront = <span class="number">0</span>               <span class="comment"># |</span></span><br><span class="line">                         <span class="comment"># |</span></span><br><span class="line">qend = <span class="number">0</span>                 <span class="comment"># |</span></span><br><span class="line"><span class="comment"># --------队列模拟-----------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line">m = <span class="number">0</span></span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">startX=<span class="number">0</span></span><br><span class="line">startY=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">endX=<span class="number">0</span></span><br><span class="line">endY=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pd</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># x 轴坐标左侧越界</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> x &gt; n:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment"># x 轴坐标右侧越界</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> y &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment"># y轴坐标上侧越界</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> y &gt; m:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment"># y 轴坐标下侧越界</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> Vis[x][y]!=<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment">#已经访问了</span></span><br><span class="line">    <span class="keyword">elif</span> G[x][y] != <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment"># 已经访问了</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在范围内，且没长草</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params"> x,  y</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">global</span> ans</span><br><span class="line">    <span class="keyword">if</span> x == endX <span class="keyword">and</span> y == endY :  <span class="comment">#找到终点，把距离给他</span></span><br><span class="line"></span><br><span class="line">        ans  =  Vis[x][y];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>   :</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">BFS</span>():</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">global</span> qend ,qfront</span><br><span class="line"></span><br><span class="line">    q.append((startX,startY))</span><br><span class="line"></span><br><span class="line">    qend+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    Vis[startX][startY]=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> qend-qfront!=<span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">        tempPair = q[qfront]</span><br><span class="line">        qfront+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        x = tempPair[<span class="number">0</span>]  <span class="comment"># 横坐标</span></span><br><span class="line"></span><br><span class="line">        y = tempPair[<span class="number">1</span>]  <span class="comment"># 纵坐标</span></span><br><span class="line">        <span class="keyword">if</span> check(x,y):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line"></span><br><span class="line">            nowx = x + dx[i]  <span class="comment"># 扩展后的横坐标</span></span><br><span class="line"></span><br><span class="line">            nowy = y + dy[i]  <span class="comment"># 扩展后的纵坐标</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (pd(nowx, nowy)):</span><br><span class="line"></span><br><span class="line">                q.append((nowx,nowy))</span><br><span class="line">                qend+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">                Vis[nowx][nowy] = Vis[x][ y] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">    G = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">10</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">10</span>)]  <span class="comment"># Python 动态开数组会减少运行时间</span></span><br><span class="line"></span><br><span class="line">    Vis = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">10</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">10</span>)]  <span class="comment"># Python 动态开数组会减少运行时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        input_ = <span class="built_in">input</span>().split()</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            G[i+<span class="number">1</span>][j+<span class="number">1</span>] = input_[j]</span><br><span class="line"></span><br><span class="line">    startX ,startY , endX ,endY = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">    BFS()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(ans-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>Java 语言描述:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.abs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">M</span> <span class="operator">=</span> <span class="number">1005</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">node</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> x;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> y;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">node</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.x = x;</span><br><span class="line">            <span class="built_in">this</span>.y = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> n, m, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> vis[][] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">150</span>][<span class="number">150</span>]; <span class="comment">//用于存储是否访问过，并且存储长度</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> G[][] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">150</span>][<span class="number">150</span>];  <span class="comment">//用于存储题目给出的地图</span></span><br><span class="line">    <span class="keyword">static</span> node Start, End;</span><br><span class="line"><span class="comment">//---------图的路径搜索常用方向移动表示-------</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> dx[] = &#123;<span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> dy[] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">static</span> Queue&lt;node&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//广度优先搜索所用的队列</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">pd</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">// /x 轴坐标 左侧越界</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; n)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//x 轴坐标 右侧越界</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (y &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//y 轴坐标 上侧越界</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (y &gt; m)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//y 轴坐标 下侧越界</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (vis[x][y] != <span class="number">0</span>)</span><br><span class="line">            <span class="comment">//已经访问了</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (G[x][y] != <span class="number">1</span>)</span><br><span class="line">            <span class="comment">//不能走</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 在范围内，且没长草</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x == End.x &amp;&amp; y == End.y)   <span class="comment">//找到终点，把距离给他</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans = vis[x][y];</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">BFS</span><span class="params">()</span> &#123;</span><br><span class="line">        q.add(Start);</span><br><span class="line">        vis[Start.x][Start.y] = <span class="number">1</span>;</span><br><span class="line">        node now, next;</span><br><span class="line">        <span class="keyword">while</span> (q.size() != <span class="number">0</span>) &#123;</span><br><span class="line">            now = q.peek();</span><br><span class="line">            <span class="keyword">if</span> (check(now.x, now.y))</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            q.poll();</span><br><span class="line">            <span class="comment">//这两步是取出队首的节点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)  <span class="comment">//四个方向</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">nextx</span> <span class="operator">=</span> now.x + dx[i];</span><br><span class="line">                <span class="type">int</span> <span class="variable">nexty</span> <span class="operator">=</span> now.y + dy[i];</span><br><span class="line">                <span class="keyword">if</span> (pd(nextx, nexty))  <span class="comment">//判断是否符合条件</span></span><br><span class="line">                &#123;</span><br><span class="line">                    next = <span class="keyword">new</span> <span class="title class_">node</span>(nextx, nexty);</span><br><span class="line">                    q.add(next);</span><br><span class="line">                    vis[nextx][nexty] = vis[now.x][now.y] + <span class="number">1</span>; <span class="comment">//步数+1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        n = in.nextInt();</span><br><span class="line">        m = in.nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">                G[i][j] = in.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">startX</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">startY</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">endX</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">endY</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line"></span><br><span class="line">        Start=<span class="keyword">new</span> <span class="title class_">node</span>(startX,startY);</span><br><span class="line">        End=<span class="keyword">new</span> <span class="title class_">node</span>(endX,endY);</span><br><span class="line">        BFS();</span><br><span class="line"></span><br><span class="line">        System.out.println(ans-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="迷宫"><a href="#迷宫" class="headerlink" title="迷宫"></a>迷宫</h3><p>下图给出了一个迷宫的平面图，其中标记为 11 的为障碍，标记为 00 的为可以通行的地方。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">010000</span><br><span class="line">000100</span><br><span class="line">001001</span><br><span class="line">110000</span><br></pre></td></tr></table></figure>

<p>迷宫的入口为左上角，出口为右下角，在迷宫中，只能从一个位置走到这个它的上、下、左、右四个方向之一。</p>
<p>对于上面的迷宫，从入口开始，可以按 <code>DRRURRDDDR</code> 的顺序通过迷宫， 一共 1010 步。其中 、、、<em>D</em>、<em>U</em>、<em>L</em>、<em>R</em> 分别表示向下、向上、向左、向右走。 对于下面这个更复杂的迷宫（3030 行 5050 列），请找出一种通过迷宫的方式，其使用的步数最少，在步数最少的前提下，请找出字典序最小的一个作为答案。</p>
<p>请注意在字典序中 &lt;&lt;&lt;<em>D</em>&lt;<em>L</em>&lt;<em>R</em>&lt;<em>U</em>。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">01010101001011001001010110010110100100001000101010</span><br><span class="line">00001000100000101010010000100000001001100110100101</span><br><span class="line">01111011010010001000001101001011100011000000010000</span><br><span class="line">01000000001010100011010000101000001010101011001011</span><br><span class="line">00011111000000101000010010100010100000101100000000</span><br><span class="line">11001000110101000010101100011010011010101011110111</span><br><span class="line">00011011010101001001001010000001000101001110000000</span><br><span class="line">10100000101000100110101010111110011000010000111010</span><br><span class="line">00111000001010100001100010000001000101001100001001</span><br><span class="line">11000110100001110010001001010101010101010001101000</span><br><span class="line">00010000100100000101001010101110100010101010000101</span><br><span class="line">11100100101001001000010000010101010100100100010100</span><br><span class="line">00000010000000101011001111010001100000101010100011</span><br><span class="line">10101010011100001000011000010110011110110100001000</span><br><span class="line">10101010100001101010100101000010100000111011101001</span><br><span class="line">10000000101100010000101100101101001011100000000100</span><br><span class="line">10101001000000010100100001000100000100011110101001</span><br><span class="line">00101001010101101001010100011010101101110000110101</span><br><span class="line">11001010000100001100000010100101000001000111000010</span><br><span class="line">00001000110000110101101000000100101001001000011101</span><br><span class="line">10100101000101000000001110110010110101101010100001</span><br><span class="line">00101000010000110101010000100010001001000100010101</span><br><span class="line">10100001000110010001000010101001010101011111010010</span><br><span class="line">00000100101000000110010100101001000001000000000010</span><br><span class="line">11010000001001110111001001000011101001011011101000</span><br><span class="line">00000110100010001000100000001000011101000000110011</span><br><span class="line">10101000101000100010001111100010101001010000001000</span><br><span class="line">10000010100101001010110000000100101010001011101000</span><br><span class="line">00111100001000010000000110111000000001000000001011</span><br><span class="line">10000001100111010111010001000110111010101101111000</span><br></pre></td></tr></table></figure>

<p><strong>解题思路:</strong></p>
<p>本题是一道简单的搜索题，需要注意的是要按照题目给定的字典序进行搜索，最后输出路径。</p>
<p>我们使用 <em>B<strong>F</strong>S</em> 搜索记录路径，用 <em>D<strong>F</strong>S</em> 打印路径。</p>
<p>C++ 语言描述：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 2000</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> maze[maxn]= &#123;</span><br><span class="line">                  <span class="string">&quot;01010101001011001001010110010110100100001000101010&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;00001000100000101010010000100000001001100110100101&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;01111011010010001000001101001011100011000000010000&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;01000000001010100011010000101000001010101011001011&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;00011111000000101000010010100010100000101100000000&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;11001000110101000010101100011010011010101011110111&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;00011011010101001001001010000001000101001110000000&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;10100000101000100110101010111110011000010000111010&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;00111000001010100001100010000001000101001100001001&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;11000110100001110010001001010101010101010001101000&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;00010000100100000101001010101110100010101010000101&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;11100100101001001000010000010101010100100100010100&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;00000010000000101011001111010001100000101010100011&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;10101010011100001000011000010110011110110100001000&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;10101010100001101010100101000010100000111011101001&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;10000000101100010000101100101101001011100000000100&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;10101001000000010100100001000100000100011110101001&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;00101001010101101001010100011010101101110000110101&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;11001010000100001100000010100101000001000111000010&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;00001000110000110101101000000100101001001000011101&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;10100101000101000000001110110010110101101010100001&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;00101000010000110101010000100010001001000100010101&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;10100001000110010001000010101001010101011111010010&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;00000100101000000110010100101001000001000000000010&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;11010000001001110111001001000011101001011011101000&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;00000110100010001000100000001000011101000000110011&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;10101000101000100010001111100010101001010000001000&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;10000010100101001010110000000100101010001011101000&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;00111100001000010000000110111000000001000000001011&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;10000001100111010111010001000110111010101101111000&quot;</span>&#125;;</span><br><span class="line"><span class="type">bool</span> vis[maxn][maxn];<span class="comment">//标记</span></span><br><span class="line"><span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;&#125;;<span class="comment">//D L R U</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">in</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;<span class="number">30</span>&amp;&amp;x&gt;=<span class="number">0</span>&amp;&amp;y&gt;=<span class="number">0</span>&amp;&amp;y&lt;<span class="number">50</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> x,y,d;</span><br><span class="line">    <span class="type">char</span> pos;<span class="comment">//存储D L R U</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">node father[maxn][maxn];<span class="comment">//当前节点的父节点</span></span><br><span class="line">node now,nex;<span class="comment">//指向当前和下一个位置</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span><span class="comment">//递归打印</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">0</span>&amp;&amp;y==<span class="number">0</span>)<span class="comment">//找到起点开始正向打印路径</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        dfs(father[x][y].x,father[x][y].y);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;father[x][y].pos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">bfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node&gt; q;</span><br><span class="line"></span><br><span class="line">    now.x=x;</span><br><span class="line">    now.y=y;</span><br><span class="line">    now.d=<span class="number">0</span>;</span><br><span class="line">    q.push(now);</span><br><span class="line"></span><br><span class="line">    vis[x][y]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        now=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)<span class="comment">//走下左右上按字典序的四个方向</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> tx=now.x+dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> ty=now.y+dir[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(in(tx,ty)&amp;&amp;!vis[tx][ty]&amp;&amp;maze[tx][ty]!=<span class="string">&#x27;1&#x27;</span>)<span class="comment">//判断是否超出范围，是否用过，是否为1</span></span><br><span class="line">            &#123;</span><br><span class="line">                vis[tx][ty]=<span class="literal">true</span>;<span class="comment">//标记为用过</span></span><br><span class="line"></span><br><span class="line">                nex.x=tx;</span><br><span class="line">                nex.y=ty;</span><br><span class="line">                nex.d=now.d+<span class="number">1</span>;</span><br><span class="line">                q.push(nex);<span class="comment">//压入队列</span></span><br><span class="line"></span><br><span class="line">                father[tx][ty].x=now.x;<span class="comment">//存储父节点坐标</span></span><br><span class="line">                father[tx][ty].y=now.y;</span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">0</span>)<span class="comment">//存储路径</span></span><br><span class="line">                    father[tx][ty].pos=<span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">1</span>)</span><br><span class="line">                    father[tx][ty].pos=<span class="string">&#x27;L&#x27;</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">2</span>)</span><br><span class="line">                    father[tx][ty].pos=<span class="string">&#x27;R&#x27;</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">3</span>)</span><br><span class="line">                    father[tx][ty].pos=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    bfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    dfs(<span class="number">29</span>,<span class="number">49</span>);<span class="comment">//打印路径</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Java 语言描述:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] nn= &#123;</span><br><span class="line">                  <span class="string">&quot;01010101001011001001010110010110100100001000101010&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;00001000100000101010010000100000001001100110100101&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;01111011010010001000001101001011100011000000010000&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;01000000001010100011010000101000001010101011001011&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;00011111000000101000010010100010100000101100000000&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;11001000110101000010101100011010011010101011110111&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;00011011010101001001001010000001000101001110000000&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;10100000101000100110101010111110011000010000111010&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;00111000001010100001100010000001000101001100001001&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;11000110100001110010001001010101010101010001101000&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;00010000100100000101001010101110100010101010000101&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;11100100101001001000010000010101010100100100010100&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;00000010000000101011001111010001100000101010100011&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;10101010011100001000011000010110011110110100001000&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;10101010100001101010100101000010100000111011101001&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;10000000101100010000101100101101001011100000000100&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;10101001000000010100100001000100000100011110101001&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;00101001010101101001010100011010101101110000110101&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;11001010000100001100000010100101000001000111000010&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;00001000110000110101101000000100101001001000011101&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;10100101000101000000001110110010110101101010100001&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;00101000010000110101010000100010001001000100010101&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;10100001000110010001000010101001010101011111010010&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;00000100101000000110010100101001000001000000000010&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;11010000001001110111001001000011101001011011101000&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;00000110100010001000100000001000011101000000110011&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;10101000101000100010001111100010101001010000001000&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;10000010100101001010110000000100101010001011101000&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;00111100001000010000000110111000000001000000001011&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;10000001100111010111010001000110111010101101111000&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">char</span>[][] tu=<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">30</span>][<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[][] dis=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">30</span>][<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[][] step= &#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">char</span>[] direction= &#123;<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;U&#x27;</span>&#125;;</span><br><span class="line"><span class="comment">//    保存经过的每一个点位置信息，采用(x)*m+y的公式表示(x,y);x,y从0开始，位置也是从来开始。m:大于最长边的随便一个数</span></span><br><span class="line"><span class="comment">//    起点:0;终点:29*50-49</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Queue&lt;Integer&gt; location=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;();</span><br><span class="line"><span class="comment">//    广度优先遍历求每一个位置到终点的距离，并存放在dis中</span></span><br><span class="line"><span class="comment">//    广度优先遍历寻找所有从终点到起点的路线</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bfs</span><span class="params">()</span> &#123;<span class="comment">//x,y当前位置;</span></span><br><span class="line">        <span class="type">int</span> x,y;<span class="comment">//当前位置坐标</span></span><br><span class="line">        <span class="comment">//不为空，继续循环</span></span><br><span class="line">        <span class="keyword">while</span>(!location.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> l=location.poll();<span class="comment">//获取当前位置的坐标</span></span><br><span class="line">            x=l/<span class="number">50</span>;<span class="comment">//获取当前位置x</span></span><br><span class="line">            y=l%<span class="number">50</span>;<span class="comment">//获取当前位置y</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++) &#123;<span class="comment">//探索四个方向</span></span><br><span class="line">                <span class="type">int</span> xx=x+step[i][<span class="number">0</span>];</span><br><span class="line">                <span class="type">int</span> yy=y+step[i][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span>(xx&gt;=<span class="number">0</span>&amp;&amp;xx&lt;<span class="number">30</span>&amp;&amp;yy&gt;=<span class="number">0</span>&amp;&amp;yy&lt;<span class="number">50</span>&amp;&amp;tu[xx][yy]==<span class="string">&#x27;0&#x27;</span>&amp;&amp;dis[xx][yy]==<span class="number">0</span>) &#123;</span><br><span class="line">                    dis[xx][yy]=dis[x][y]+<span class="number">1</span>;<span class="comment">//当前位置的距离+1等于本次探索位置的距离</span></span><br><span class="line">                    location.add(xx*<span class="number">50</span>+yy);</span><br><span class="line">                    <span class="keyword">if</span>(xx==<span class="number">0</span>&amp;&amp;yy==<span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    深度优先遍历，从起点到终点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">dfs</span><span class="params">()</span> &#123;</span><br><span class="line">        dis[<span class="number">29</span>][<span class="number">49</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//        起点</span></span><br><span class="line">        <span class="type">int</span> x=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> y=<span class="number">0</span>;</span><br><span class="line">        String route=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span>(x!=<span class="number">29</span>||y!=<span class="number">49</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++) &#123;</span><br><span class="line">                <span class="type">int</span> xx=x+step[i][<span class="number">0</span>];</span><br><span class="line">                <span class="type">int</span> yy=y+step[i][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span>(xx&gt;=<span class="number">0</span>&amp;&amp;xx&lt;<span class="number">30</span>&amp;&amp;yy&gt;=<span class="number">0</span>&amp;&amp;yy&lt;<span class="number">50</span>&amp;&amp;tu[xx][yy]==<span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(dis[x][y]==dis[xx][yy]+<span class="number">1</span>) &#123;</span><br><span class="line">                        x=xx;</span><br><span class="line">                        y=yy;</span><br><span class="line">                        route+=direction[i];</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> route;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">long</span> num=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">30</span>;i++) &#123;</span><br><span class="line">            tu[i]=nn[i].toCharArray();</span><br><span class="line">        &#125;</span><br><span class="line">        location.add(<span class="number">29</span>*<span class="number">50</span>+<span class="number">49</span>);</span><br><span class="line">        bfs();</span><br><span class="line">        String route=dfs();</span><br><span class="line">        System.out.println(route);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Python 语言描述:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">n,m=<span class="number">30</span>,<span class="number">50</span></span><br><span class="line">M=[[<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">input</span>()]<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">vis=[[<span class="number">0</span>]*m <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">go=[[<span class="string">&#x27;&#x27;</span>]*m <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">q=deque([(<span class="number">0</span>,<span class="number">0</span>)])</span><br><span class="line">vis[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> q:</span><br><span class="line">    x,y=q.popleft()</span><br><span class="line">    <span class="keyword">if</span> x==n-<span class="number">1</span> <span class="keyword">and</span> y==m-<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(go[-<span class="number">1</span>][-<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> i,j,k <span class="keyword">in</span> [[<span class="number">1</span>,<span class="number">0</span>,<span class="string">&#x27;D&#x27;</span>],[<span class="number">0</span>,-<span class="number">1</span>,<span class="string">&#x27;L&#x27;</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="string">&#x27;R&#x27;</span>],[-<span class="number">1</span>,<span class="number">0</span>,<span class="string">&#x27;U&#x27;</span>]]:</span><br><span class="line">        a,b=x+i,y+j</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span>&lt;=a&lt;n <span class="keyword">and</span> <span class="number">0</span>&lt;=b&lt;m <span class="keyword">and</span> M[a][b]==<span class="number">0</span> <span class="keyword">and</span> vis[a][b]==<span class="number">0</span>:</span><br><span class="line">            vis[a][b]=<span class="number">1</span></span><br><span class="line">            q.append((a,b))</span><br><span class="line">            go[a][b]=go[x][y]+k</span><br></pre></td></tr></table></figure>

<h2 id="实验总结-1"><a href="#实验总结-1" class="headerlink" title="实验总结"></a>实验总结</h2><p>BFS 是广度优先搜索，是将某节点所有的“枝蔓”加入搜索队列，然后去除队列的首部的节点，重复进行该动作，这样就能由开始状态“一圈一圈的查找”。 BFS 拥有一个性质，那么就是先找到的节点，所经过的步骤一定最短。它一般用于寻找在近的状态，也是一个非常基础的算法，希望大家认真学习。</p>
]]></content>
      <categories>
        <category>蓝桥杯冲刺营</category>
        <category>3.搜索算法</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>枚举</title>
    <url>/2024/02/21/%E6%9E%9A%E4%B8%BE/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E6%9E%9A%E4%B8%BE/image-20240221230115927.png'><img src="/./../imgs/%E6%9E%9A%E4%B8%BE/image-20240221230115927.png" alt="image-20240221230115927"><img src="/./../imgs/%E6%9E%9A%E4%B8%BE/image-20240221230120545.png" alt="image-20240221230120545" class='item-img' data-src='/./../imgs/%E6%9E%9A%E4%B8%BE/image-20240221230120545.png'><img src="/./../imgs/%E6%9E%9A%E4%B8%BE/image-20240221230120545.png" alt="image-20240221230120545"><img src="/./../imgs/%E6%9E%9A%E4%B8%BE/image-20240221230130289.png" alt="image-20240221230130289"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第二章：基础算法</category>
        <category>基础算法</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>桶排序</title>
    <url>/2024/02/21/%E6%A1%B6%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E6%A1%B6%E6%8E%92%E5%BA%8F/image-20240221225325636.png'><img src="/./../imgs/%E6%A1%B6%E6%8E%92%E5%BA%8F/image-20240221225325636.png" alt="image-20240221225325636"><img src="/./../imgs/%E6%A1%B6%E6%8E%92%E5%BA%8F/image-20240221225330375.png" alt="image-20240221225330375" class='item-img' data-src='/./../imgs/%E6%A1%B6%E6%8E%92%E5%BA%8F/image-20240221225330375.png'><img src="/./../imgs/%E6%A1%B6%E6%8E%92%E5%BA%8F/image-20240221225330375.png" alt="image-20240221225330375"><img src="/./../imgs/%E6%A1%B6%E6%8E%92%E5%BA%8F/image-20240221225338480.png" alt="image-20240221225338480" class='item-img' data-src='/./../imgs/%E6%A1%B6%E6%8E%92%E5%BA%8F/image-20240221225338480.png'><img src="/./../imgs/%E6%A1%B6%E6%8E%92%E5%BA%8F/image-20240221225338480.png" alt="image-20240221225338480"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第二章：基础算法</category>
        <category>排序</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>模拟</title>
    <url>/2024/02/21/%E6%A8%A1%E6%8B%9F/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E6%A8%A1%E6%8B%9F/image-20240221230203001.png'><img src="/./../imgs/%E6%A8%A1%E6%8B%9F/image-20240221230203001.png" alt="image-20240221230203001"><img src="/./../imgs/%E6%A8%A1%E6%8B%9F/image-20240221230207880.png" alt="image-20240221230207880" class='item-img' data-src='/./../imgs/%E6%A8%A1%E6%8B%9F/image-20240221230207880.png'><img src="/./../imgs/%E6%A8%A1%E6%8B%9F/image-20240221230207880.png" alt="image-20240221230207880"><img src="/./../imgs/%E6%A8%A1%E6%8B%9F/image-20240221230217450.png" alt="image-20240221230217450" class='item-img' data-src='/./../imgs/%E6%A8%A1%E6%8B%9F/image-20240221230217450.png'><img src="/./../imgs/%E6%A8%A1%E6%8B%9F/image-20240221230217450.png" alt="image-20240221230217450"><img src="/./../imgs/%E6%A8%A1%E6%8B%9F/image-20240221230225216.png" alt="image-20240221230225216" class='item-img' data-src='/./../imgs/%E6%A8%A1%E6%8B%9F/image-20240221230225216.png'><img src="/./../imgs/%E6%A8%A1%E6%8B%9F/image-20240221230225216.png" alt="image-20240221230225216"><img src="/./../imgs/%E6%A8%A1%E6%8B%9F/image-20240221230237070.png" alt="image-20240221230237070"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第二章：基础算法</category>
        <category>基础算法</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>离散化</title>
    <url>/2024/02/21/%E7%A6%BB%E6%95%A3%E5%8C%96/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E7%A6%BB%E6%95%A3%E5%8C%96/image-20240221231005259.png'><img src="/./../imgs/%E7%A6%BB%E6%95%A3%E5%8C%96/image-20240221231005259.png" alt="image-20240221231005259"></p>
<p class='item-img' data-src='/./../imgs/%E7%A6%BB%E6%95%A3%E5%8C%96/image-20240221231015772.png'><img src="/./../imgs/%E7%A6%BB%E6%95%A3%E5%8C%96/image-20240221231015772.png" alt="image-20240221231015772"><img src="/./../imgs/%E7%A6%BB%E6%95%A3%E5%8C%96/image-20240221231020473.png" alt="image-20240221231020473" class='item-img' data-src='/./../imgs/%E7%A6%BB%E6%95%A3%E5%8C%96/image-20240221231020473.png'><img src="/./../imgs/%E7%A6%BB%E6%95%A3%E5%8C%96/image-20240221231020473.png" alt="image-20240221231020473"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第二章：基础算法</category>
        <category>基础算法</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>类的定义和使用</title>
    <url>/2024/02/21/%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E4%BD%BF%E7%94%A8/image-20240221224039181.png'><img src="/./../imgs/%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E4%BD%BF%E7%94%A8/image-20240221224039181.png" alt="image-20240221224039181"><img src="/./../imgs/%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E4%BD%BF%E7%94%A8/image-20240221224043734.png" alt="image-20240221224043734" class='item-img' data-src='/./../imgs/%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E4%BD%BF%E7%94%A8/image-20240221224043734.png'><img src="/./../imgs/%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E4%BD%BF%E7%94%A8/image-20240221224043734.png" alt="image-20240221224043734"><img src="/./../imgs/%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E4%BD%BF%E7%94%A8/image-20240221224051336.png" alt="image-20240221224051336" class='item-img' data-src='/./../imgs/%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E4%BD%BF%E7%94%A8/image-20240221224051336.png'><img src="/./../imgs/%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E4%BD%BF%E7%94%A8/image-20240221224051336.png" alt="image-20240221224051336"><img src="/./../imgs/%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E4%BD%BF%E7%94%A8/image-20240221224059622.png" alt="image-20240221224059622" class='item-img' data-src='/./../imgs/%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E4%BD%BF%E7%94%A8/image-20240221224059622.png'><img src="/./../imgs/%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E4%BD%BF%E7%94%A8/image-20240221224059622.png" alt="image-20240221224059622"><img src="/./../imgs/%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E4%BD%BF%E7%94%A8/image-20240221224107024.png" alt="image-20240221224107024" class='item-img' data-src='/./../imgs/%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E4%BD%BF%E7%94%A8/image-20240221224107024.png'><img src="/./../imgs/%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E4%BD%BF%E7%94%A8/image-20240221224107024.png" alt="image-20240221224107024"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第一章：语言基础</category>
        <category>类的定义和使用</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>线性DP</title>
    <url>/2024/02/22/%E7%BA%BF%E6%80%A7DP/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E7%BA%BF%E6%80%A7DP/image-20240222140917600.png'><img src="/./../imgs/%E7%BA%BF%E6%80%A7DP/image-20240222140917600.png" alt="image-20240222140917600"><img src="/./../imgs/%E7%BA%BF%E6%80%A7DP/image-20240222141001854.png" alt="image-20240222141001854" class='item-img' data-src='/./../imgs/%E7%BA%BF%E6%80%A7DP/image-20240222141001854.png'><img src="/./../imgs/%E7%BA%BF%E6%80%A7DP/image-20240222141001854.png" alt="image-20240222141001854"><img src="/./../imgs/%E7%BA%BF%E6%80%A7DP/image-20240222141300407.png" alt="image-20240222141300407" class='item-img' data-src='/./../imgs/%E7%BA%BF%E6%80%A7DP/image-20240222141300407.png'><img src="/./../imgs/%E7%BA%BF%E6%80%A7DP/image-20240222141300407.png" alt="image-20240222141300407"><img src="/./../imgs/%E7%BA%BF%E6%80%A7DP/image-20240222141408804.png" alt="image-20240222141408804" class='item-img' data-src='/./../imgs/%E7%BA%BF%E6%80%A7DP/image-20240222141408804.png'><img src="/./../imgs/%E7%BA%BF%E6%80%A7DP/image-20240222141408804.png" alt="image-20240222141408804"><img src="/./../imgs/%E7%BA%BF%E6%80%A7DP/image-20240222142402147.png" alt="image-20240222142402147"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第四章：动态规划</category>
        <category>动态规划基础</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>自上而下树形DP</title>
    <url>/2024/02/22/%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E6%A0%91%E5%BD%A2DP/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E6%A0%91%E5%BD%A2DP/image-20240222144835991.png'><img src="/./../imgs/%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E6%A0%91%E5%BD%A2DP/image-20240222144835991.png" alt="image-20240222144835991"><img src="/./../imgs/%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E6%A0%91%E5%BD%A2DP/image-20240222144845577.png" alt="image-20240222144845577" class='item-img' data-src='/./../imgs/%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E6%A0%91%E5%BD%A2DP/image-20240222144845577.png'><img src="/./../imgs/%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E6%A0%91%E5%BD%A2DP/image-20240222144845577.png" alt="image-20240222144845577"><img src="/./../imgs/%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E6%A0%91%E5%BD%A2DP/image-20240222144905501.png" alt="image-20240222144905501" class='item-img' data-src='/./../imgs/%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E6%A0%91%E5%BD%A2DP/image-20240222144905501.png'><img src="/./../imgs/%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E6%A0%91%E5%BD%A2DP/image-20240222144905501.png" alt="image-20240222144905501"><img src="/./../imgs/%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E6%A0%91%E5%BD%A2DP/image-20240222144919160.png" alt="image-20240222144919160" class='item-img' data-src='/./../imgs/%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E6%A0%91%E5%BD%A2DP/image-20240222144919160.png'><img src="/./../imgs/%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E6%A0%91%E5%BD%A2DP/image-20240222144919160.png" alt="image-20240222144919160"><img src="/./../imgs/%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E6%A0%91%E5%BD%A2DP/image-20240222144934794.png" alt="image-20240222144934794">	<strong>本节内容属于算法提高知识，由专属金牌选手录制，由于视频时长有限，所以视频中例题讲解主要以 C++ 为主讲解，大家可正常学习。算法思维是共通的，例题的其他语言解题代码，我们也在下方提供了，大家可以参考哦～</strong></p>
<ul>
<li>C++</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 110000</span></span><br><span class="line"><span class="type">int</span> n, val[maxn];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> nex, to;</span><br><span class="line">&#125;edge[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> head[maxn], cnt;</span><br><span class="line"><span class="type">int</span> f[maxn][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++cnt].nex = head[from];</span><br><span class="line">    head[from] = cnt;</span><br><span class="line">    edge[cnt].to = to;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = edge[i].nex)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v != fa)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v, u);</span><br><span class="line">        f[u][<span class="number">0</span>] += <span class="built_in">max</span>(f[v][<span class="number">0</span>], f[v][<span class="number">1</span>]);</span><br><span class="line">        f[u][<span class="number">1</span>] += f[v][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i )</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;val[i]), f[i][<span class="number">1</span>] = val[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++ i )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        <span class="built_in">add</span>(u, v), <span class="built_in">add</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">max</span>(f[<span class="number">1</span>][<span class="number">0</span>], f[<span class="number">1</span>][<span class="number">1</span>]));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeDP</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">maxn</span> <span class="operator">=</span> <span class="number">110000</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] val = <span class="keyword">new</span> <span class="title class_">int</span>[maxn];</span><br><span class="line">    <span class="keyword">static</span> Edge[] edges = <span class="keyword">new</span> <span class="title class_">Edge</span>[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] head = <span class="keyword">new</span> <span class="title class_">int</span>[maxn];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> cnt;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[][] f = <span class="keyword">new</span> <span class="title class_">int</span>[maxn][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> next, to;</span><br><span class="line"></span><br><span class="line">        Edge(<span class="type">int</span> next, <span class="type">int</span> to) &#123;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">            <span class="built_in">this</span>.to = to;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to)</span> &#123;</span><br><span class="line">        edges[++cnt] = <span class="keyword">new</span> <span class="title class_">Edge</span>(head[from], to);</span><br><span class="line">        head[from] = cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> fa)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> head[u]; i != <span class="number">0</span>; i = edges[i].next) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> edges[i].to;</span><br><span class="line">            <span class="keyword">if</span> (v == fa)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            dfs(v, u);</span><br><span class="line">            f[u][<span class="number">0</span>] += Math.max(f[v][<span class="number">0</span>], f[v][<span class="number">1</span>]);</span><br><span class="line">            f[u][<span class="number">1</span>] += f[v][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        n = sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            val[i] = sc.nextInt();</span><br><span class="line">            f[i][<span class="number">1</span>] = val[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            add(u, v);</span><br><span class="line">            add(v, u);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        System.out.println(Math.max(f[<span class="number">1</span>][<span class="number">0</span>], f[<span class="number">1</span>][<span class="number">1</span>]));</span><br><span class="line">        sc.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Python</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">val = [<span class="number">0</span>] + [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">input</span>().split()]</span><br><span class="line">edges = defaultdict(<span class="built_in">list</span>)</span><br><span class="line">f = [[<span class="number">0</span>, val[i]] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_edge</span>(<span class="params">from_node, to_node</span>):</span><br><span class="line">    edges[from_node].append(to_node)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">u, fa</span>):</span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> edges[u]:</span><br><span class="line">        <span class="keyword">if</span> v == fa:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        dfs(v, u)</span><br><span class="line">        f[u][<span class="number">0</span>] += <span class="built_in">max</span>(f[v][<span class="number">0</span>], f[v][<span class="number">1</span>])</span><br><span class="line">        f[u][<span class="number">1</span>] += f[v][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">    u, v = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    add_edge(u, v)</span><br><span class="line">    add_edge(v, u)</span><br><span class="line"></span><br><span class="line">dfs(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(f[<span class="number">1</span>][<span class="number">0</span>], f[<span class="number">1</span>][<span class="number">1</span>]))</span><br></pre></td></tr></table></figure>

<ul>
<li>C++</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 110</span></span><br><span class="line"><span class="type">int</span> n, v;</span><br><span class="line"><span class="type">int</span> f[maxn][maxn];</span><br><span class="line"><span class="type">int</span> w[maxn], v[maxn];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[maxn];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> nex, to;</span><br><span class="line">&#125;edge[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> head[maxn], cnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++ cnt].nex = head[from];</span><br><span class="line">    head[from] = cnt;</span><br><span class="line">    edge[cnt.to] = to;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f[u], <span class="number">-0x3f</span>, <span class="keyword">sizeof</span> f[u]);</span><br><span class="line">    <span class="keyword">if</span> (v[u] &lt;= V)</span><br><span class="line">        f[u][v[u]] = w[u];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = edge[i].nex)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == fa)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v, u);</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nf</span><span class="params">(f[u], f[u] + V + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v1 = <span class="number">0</span>; v1 &lt;= V; v1 ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> v2 = <span class="number">0</span>; v1 + v2 &lt;= V; v2 ++ )</span><br><span class="line">            &#123;</span><br><span class="line">                nf[v1 + v2] = <span class="built_in">max</span>(nf[v1 + v2], f[u][v1] + f[v][v2]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">0</span>; v &lt;= V; v ++ )</span><br><span class="line">            f[u][v] = nf[v];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;v);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++ i )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        <span class="built_in">add</span>(u, v), <span class="built_in">add</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= V; ++ i )</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, f[<span class="number">1</span>][i]);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeDP</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">maxn</span> <span class="operator">=</span> <span class="number">110</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> n, V;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[][] f = <span class="keyword">new</span> <span class="title class_">int</span>[maxn][maxn];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] w = <span class="keyword">new</span> <span class="title class_">int</span>[maxn], val = <span class="keyword">new</span> <span class="title class_">int</span>[maxn];</span><br><span class="line">    <span class="keyword">static</span> List&lt;Integer&gt;[] g = <span class="keyword">new</span> <span class="title class_">ArrayList</span>[maxn];</span><br><span class="line">    <span class="keyword">static</span> Edge[] edges = <span class="keyword">new</span> <span class="title class_">Edge</span>[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] head = <span class="keyword">new</span> <span class="title class_">int</span>[maxn];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> cnt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> next, to;</span><br><span class="line"></span><br><span class="line">        Edge(<span class="type">int</span> next, <span class="type">int</span> to) &#123;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">            <span class="built_in">this</span>.to = to;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to)</span> &#123;</span><br><span class="line">        edges[++cnt] = <span class="keyword">new</span> <span class="title class_">Edge</span>(head[from], to);</span><br><span class="line">        head[from] = cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> fa)</span> &#123;</span><br><span class="line">        Arrays.fill(f[u], Integer.MIN_VALUE);</span><br><span class="line">        <span class="keyword">if</span> (val[u] &lt;= V)</span><br><span class="line">            f[u][val[u]] = w[u];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> head[u]; i != <span class="number">0</span>; i = edges[i].next) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> edges[i].to;</span><br><span class="line">            <span class="keyword">if</span> (v == fa)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            dfs(v, u);</span><br><span class="line">            <span class="type">int</span>[] nf = Arrays.copyOf(f[u], V + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">v1</span> <span class="operator">=</span> <span class="number">0</span>; v1 &lt;= V; v1++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">v2</span> <span class="operator">=</span> <span class="number">0</span>; v1 + v2 &lt;= V; v2++) &#123;</span><br><span class="line">                    nf[v1 + v2] = Math.max(nf[v1 + v2], f[u][v1] + f[v][v2]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> <span class="number">0</span>; v &lt;= V; v++)</span><br><span class="line">                f[u][v] = nf[v];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        n = sc.nextInt();</span><br><span class="line">        V = sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            w[i] = sc.nextInt(); <span class="comment">// Assuming input for weights w is provided</span></span><br><span class="line">            val[i] = sc.nextInt(); <span class="comment">// Assuming input for values val is provided</span></span><br><span class="line">            g[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            add(u, v);</span><br><span class="line">            add(v, u);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= V; ++i)</span><br><span class="line">            ans = Math.max(ans, f[<span class="number">1</span>][i]);</span><br><span class="line">        System.out.println(ans);</span><br><span class="line">        sc.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Python</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">n, V = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">w = [<span class="number">0</span>] + [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">input</span>().split()]</span><br><span class="line">val = [<span class="number">0</span>] + [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">input</span>().split()]</span><br><span class="line">edges = defaultdict(<span class="built_in">list</span>)</span><br><span class="line">f = [[<span class="built_in">float</span>(<span class="string">&#x27;-inf&#x27;</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(V+<span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_edge</span>(<span class="params">from_node, to_node</span>):</span><br><span class="line">    edges[from_node].append(to_node)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">u, fa</span>):</span><br><span class="line">    f[u] = [<span class="built_in">float</span>(<span class="string">&#x27;-inf&#x27;</span>)] * (V+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> val[u] &lt;= V:</span><br><span class="line">        f[u][val[u]] = w[u]</span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> edges[u]:</span><br><span class="line">        <span class="keyword">if</span> v == fa:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        dfs(v, u)</span><br><span class="line">        nf = f[u][:]</span><br><span class="line">        <span class="keyword">for</span> v1 <span class="keyword">in</span> <span class="built_in">range</span>(V + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> v2 <span class="keyword">in</span> <span class="built_in">range</span>(V - v1 + <span class="number">1</span>):</span><br><span class="line">                nf[v1 + v2] = <span class="built_in">max</span>(nf[v1 + v2], f[u][v1] + f[v][v2])</span><br><span class="line">        f[u] = nf</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">    u, v = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    add_edge(u, v)</span><br><span class="line">    add_edge(v, u)</span><br><span class="line"></span><br><span class="line">dfs(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">ans = <span class="built_in">max</span>(f[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第四章：动态规划</category>
        <category>树形DP</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义排序</title>
    <url>/2024/02/21/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/image-20240221224337491.png'><img src="/./../imgs/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/image-20240221224337491.png" alt="image-20240221224337491"><img src="/./../imgs/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/image-20240221224346170.png" alt="image-20240221224346170" class='item-img' data-src='/./../imgs/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/image-20240221224346170.png'><img src="/./../imgs/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/image-20240221224346170.png" alt="image-20240221224346170"><img src="/./../imgs/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/image-20240221224354361.png" alt="image-20240221224354361" class='item-img' data-src='/./../imgs/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/image-20240221224354361.png'><img src="/./../imgs/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/image-20240221224354361.png" alt="image-20240221224354361"><img src="/./../imgs/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/image-20240221224403413.png" alt="image-20240221224403413" class='item-img' data-src='/./../imgs/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/image-20240221224403413.png'><img src="/./../imgs/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/image-20240221224403413.png" alt="image-20240221224403413"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第一章：语言基础</category>
        <category>实践应用</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>贪心</title>
    <url>/2024/02/21/%E8%B4%AA%E5%BF%83/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E8%B4%AA%E5%BF%83/image-20240221231105941.png'><img src="/./../imgs/%E8%B4%AA%E5%BF%83/image-20240221231105941.png" alt="image-20240221231105941"><img src="/./../imgs/%E8%B4%AA%E5%BF%83/image-20240221231111146.png" alt="image-20240221231111146" class='item-img' data-src='/./../imgs/%E8%B4%AA%E5%BF%83/image-20240221231111146.png'><img src="/./../imgs/%E8%B4%AA%E5%BF%83/image-20240221231111146.png" alt="image-20240221231111146"><img src="/./../imgs/%E8%B4%AA%E5%BF%83/image-20240221231119591.png" alt="image-20240221231119591" class='item-img' data-src='/./../imgs/%E8%B4%AA%E5%BF%83/image-20240221231119591.png'><img src="/./../imgs/%E8%B4%AA%E5%BF%83/image-20240221231119591.png" alt="image-20240221231119591"><img src="/./../imgs/%E8%B4%AA%E5%BF%83/image-20240221231128186.png" alt="image-20240221231128186" class='item-img' data-src='/./../imgs/%E8%B4%AA%E5%BF%83/image-20240221231128186.png'><img src="/./../imgs/%E8%B4%AA%E5%BF%83/image-20240221231128186.png" alt="image-20240221231128186"><img src="/./../imgs/%E8%B4%AA%E5%BF%83/image-20240221231135198.png" alt="image-20240221231135198" class='item-img' data-src='/./../imgs/%E8%B4%AA%E5%BF%83/image-20240221231135198.png'><img src="/./../imgs/%E8%B4%AA%E5%BF%83/image-20240221231135198.png" alt="image-20240221231135198"><img src="/./../imgs/%E8%B4%AA%E5%BF%83/image-20240221231145742.png" alt="image-20240221231145742" class='item-img' data-src='/./../imgs/%E8%B4%AA%E5%BF%83/image-20240221231145742.png'><img src="/./../imgs/%E8%B4%AA%E5%BF%83/image-20240221231145742.png" alt="image-20240221231145742">  <img src="/./../imgs/%E8%B4%AA%E5%BF%83/image-20240221231207419.png" alt="image-20240221231207419"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第二章：基础算法</category>
        <category>基础算法</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯知识记录</title>
    <url>/2024/02/21/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/$%7Bfiilename%7D/image-20240221204217791-1708519354510-1.png'><img src="/./../imgs/$%7Bfiilename%7D/image-20240221204217791-1708519354510-1.png" alt="image-20240221204217791"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>A学习路线</category>
      </categories>
      <tags>
        <tag>蓝桥杯学习路线</tag>
      </tags>
  </entry>
  <entry>
    <title>选择排序</title>
    <url>/2024/02/21/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/image-20240221224930479.png'><img src="/./../imgs/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/image-20240221224930479.png" alt="image-20240221224930479"><img src="/./../imgs/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/image-20240221224934777.png" alt="image-20240221224934777" class='item-img' data-src='/./../imgs/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/image-20240221224934777.png'><img src="/./../imgs/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/image-20240221224934777.png" alt="image-20240221224934777"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第二章：基础算法</category>
        <category>排序</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>进制转换</title>
    <url>/2024/02/21/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/image-20240221230520575.png'><img src="/./../imgs/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/image-20240221230520575.png" alt="image-20240221230520575"><img src="/./../imgs/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/image-20240221230524404.png" alt="image-20240221230524404" class='item-img' data-src='/./../imgs/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/image-20240221230524404.png'><img src="/./../imgs/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/image-20240221230524404.png" alt="image-20240221230524404"><img src="/./../imgs/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/image-20240221230531369.png" alt="image-20240221230531369" class='item-img' data-src='/./../imgs/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/image-20240221230531369.png'><img src="/./../imgs/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/image-20240221230531369.png" alt="image-20240221230531369"><img src="/./../imgs/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/image-20240221230538824.png" alt="image-20240221230538824" class='item-img' data-src='/./../imgs/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/image-20240221230538824.png'><img src="/./../imgs/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/image-20240221230538824.png" alt="image-20240221230538824"><img src="/./../imgs/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/image-20240221230545088.png" alt="image-20240221230545088" class='item-img' data-src='/./../imgs/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/image-20240221230545088.png'><img src="/./../imgs/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/image-20240221230545088.png" alt="image-20240221230545088"><img src="/./../imgs/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/image-20240221230554787.png" alt="image-20240221230554787" class='item-img' data-src='/./../imgs/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/image-20240221230554787.png'><img src="/./../imgs/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/image-20240221230554787.png" alt="image-20240221230554787"><img src="/./../imgs/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/image-20240221230601706.png" alt="image-20240221230601706"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第二章：基础算法</category>
        <category>基础算法</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>递归</title>
    <url>/2024/02/21/%E9%80%92%E5%BD%92/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E9%80%92%E5%BD%92/image-20240221230319996.png'><img src="/./../imgs/%E9%80%92%E5%BD%92/image-20240221230319996.png" alt="image-20240221230319996"><img src="/./../imgs/%E9%80%92%E5%BD%92/image-20240221230326745.png" alt="image-20240221230326745" class='item-img' data-src='/./../imgs/%E9%80%92%E5%BD%92/image-20240221230326745.png'><img src="/./../imgs/%E9%80%92%E5%BD%92/image-20240221230326745.png" alt="image-20240221230326745"><img src="/./../imgs/%E9%80%92%E5%BD%92/image-20240221230334716.png" alt="image-20240221230334716" class='item-img' data-src='/./../imgs/%E9%80%92%E5%BD%92/image-20240221230334716.png'><img src="/./../imgs/%E9%80%92%E5%BD%92/image-20240221230334716.png" alt="image-20240221230334716"><img src="/./../imgs/%E9%80%92%E5%BD%92/image-20240221230342790.png" alt="image-20240221230342790" class='item-img' data-src='/./../imgs/%E9%80%92%E5%BD%92/image-20240221230342790.png'><img src="/./../imgs/%E9%80%92%E5%BD%92/image-20240221230342790.png" alt="image-20240221230342790"><img src="/./../imgs/%E9%80%92%E5%BD%92/image-20240221230352241.png" alt="image-20240221230352241" class='item-img' data-src='/./../imgs/%E9%80%92%E5%BD%92/image-20240221230352241.png'><img src="/./../imgs/%E9%80%92%E5%BD%92/image-20240221230352241.png" alt="image-20240221230352241"><img src="/./../imgs/%E9%80%92%E5%BD%92/image-20240221230401685.png" alt="image-20240221230401685" class='item-img' data-src='/./../imgs/%E9%80%92%E5%BD%92/image-20240221230401685.png'><img src="/./../imgs/%E9%80%92%E5%BD%92/image-20240221230401685.png" alt="image-20240221230401685"><img src="/./../imgs/%E9%80%92%E5%BD%92/image-20240221230426028.png" alt="image-20240221230426028"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第二章：基础算法</category>
        <category>基础算法</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>递归与递推</title>
    <url>/2024/02/22/%E9%80%92%E5%BD%92%E4%B8%8E%E9%80%92%E6%8E%A8/</url>
    <content><![CDATA[<h1 id="递推法与递归法"><a href="#递推法与递归法" class="headerlink" title="递推法与递归法"></a>递推法与递归法</h1><p><strong>递推法：</strong></p>
<p>递推法是一种在数学和其他领域广泛应用的重要方法，它在计算机科学中被用作一种关键的数值求解算法。</p>
<p><strong>知识点：</strong></p>
<ul>
<li>递推算法</li>
<li>递归算法</li>
</ul>
<h2 id="递推算法的特点"><a href="#递推算法的特点" class="headerlink" title="递推算法的特点"></a>递推算法的特点</h2><p>递推法的核心在于找到递推关系式。这种方法可以将复杂的计算过程转化为简单的重复步骤，充分利用计算机在运行程序时的时间局部性和空间局部性。</p>
<p><strong>递推算法的思想：</strong></p>
<ol>
<li>首先找到各个相邻数据项之间的递推关系；</li>
<li>递推关系避开了求通项公式的麻烦，尤其是对于那些难以或无法求解通项公式的题目；</li>
<li>将复杂问题分解为若干步骤的简单运算；</li>
<li>一般来说，递推算法可以视为一种特殊的迭代算法。</li>
</ol>
<p><strong>递推算法解题的基本思路：</strong></p>
<ol>
<li>将复杂计算转换为简单重复运算；</li>
<li>通过找到递推关系式进行简化运算；</li>
<li>利用计算机的特性，减少运行时间。</li>
</ol>
<p><strong>递推算法的一般步骤：</strong></p>
<ol>
<li>根据题目确定数据项，并找到符合要求的递推关系式；</li>
<li>根据递推关系式设计递推程序；</li>
<li>根据题目找到递推的终点；</li>
<li>单次查询可以不进行存储，多次查询都要进行存储；</li>
<li>按要求输出答案即可。</li>
</ol>
<p><strong>递归算法：</strong></p>
<p>递归算法是一种自顶向下的算法，它通过不断地直接或间接调用自身的函数，通过每次改变变量完成多个过程的重复计算，直到到达边界之后，结束调用。</p>
<p>与递推法相似的是，递归与递推都是将一个复杂过程分解为几个简单重复步骤进行计算。</p>
<p>递归算法的实现的核心是分治策略，即分而治之，将复杂过程分解为规模较小的同类问题，通过解决若干个小问题，进而解决整个复杂问题。</p>
<p><strong>递归算法的思想：</strong></p>
<ol>
<li>将复杂计算过程转换为简单重复子过程；</li>
<li>找到递归公式，即能够将大问题转化为小问题的公式；</li>
<li>自上而下计算，在返回完成递归过程。</li>
</ol>
<p><strong>递归算法设计的一般步骤：</strong></p>
<ol>
<li>根据题目设计递归函数中的运算部分；</li>
<li>根据题目找到递归公式，题目可能会隐含给出，也可能需要自己进行推导；</li>
<li>找到递归出口，即递归的终止条件。</li>
</ol>
<p>递归法和递推法的思路已经给大家讲解得差不多了，接下来我们将结合真实的大赛题目进行讲解。这将有助于我们更好地理解和应用这两种方法。</p>
<h3 id="斐波纳契数列-fibonacci-问题"><a href="#斐波纳契数列-fibonacci-问题" class="headerlink" title="斐波纳契数列 fibonacci 问题"></a>斐波纳契数列 fibonacci 问题</h3><p>在一定情况下，同一个问题可以使用用递归也可以使用递推解答。一般一个问题的递推关系和递归关系都好求的话就都可以解题。</p>
<p>当然如果题目只有一个关系好求，那就最好采用关系好求的办法。</p>
<p><strong>题目描述:</strong></p>
<p>斐波那契数列（Fibonacci sequence），又称黄金分割数列，因数学家莱昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”。</p>
<p>指的是这样一个数列：0、1、1、2、3、5、8、13、21、34、…0、1、1、2、3、5、8、13、21、34、…</p>
<p>在数学上，斐波那契数列以如下被以递推的方法定义：(0)&#x3D;0<em>F</em>(0)&#x3D;0，(1)&#x3D;1<em>F</em>(1)&#x3D;1，()&#x3D;(−1)+(−2)<em>F</em>(<em>n</em>)&#x3D;<em>F</em>(<em>n</em>−1)+<em>F</em>(<em>n</em>−2)（≥2，∈∗<em>n</em>≥2，<em>n</em>∈<em>N</em>∗）</p>
<p>请求出该数列中第 <em>n</em> 个数字（<em>n</em> 从11开始计数）是多少。</p>
<p><strong>样例:</strong></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">输入样例</span><br><span class="line"></span><br><span class="line">样例1输入</span><br><span class="line">6</span><br><span class="line"></span><br><span class="line">样例2输入</span><br><span class="line">4</span><br><span class="line"></span><br><span class="line">输出样例</span><br><span class="line"></span><br><span class="line">样例1输出</span><br><span class="line">8</span><br><span class="line"></span><br><span class="line">样例2输出</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<p>对于上面的样例我们进行了如下计算；</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">[0]=0</span><br><span class="line"></span><br><span class="line">[1]=1</span><br><span class="line"></span><br><span class="line">[2]=0+1</span><br><span class="line"></span><br><span class="line">[3]=1+1=2</span><br><span class="line"></span><br><span class="line">[4]=1+2=3</span><br><span class="line"></span><br><span class="line">[5]=2+3=5</span><br><span class="line"></span><br><span class="line">[6]=5+3=8</span><br></pre></td></tr></table></figure>

<p><strong>运行限制:</strong></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">1. 最大运行时间：1s</span><br><span class="line">2. 最大运行内存：128M</span><br></pre></td></tr></table></figure>

<p><strong>题目解析：</strong></p>
<ul>
<li>这个题给出递推式 ()&#x3D;(−1)+(−2)<em>F</em>(<em>n</em>)&#x3D;<em>F</em>(<em>n</em>−1)+<em>F</em>(<em>n</em>−2)</li>
<li>转化为可用的递推关系，即()+(+1)&#x3D;(+2)<em>F</em>(<em>n</em>)+<em>F</em>(<em>n</em>+1)&#x3D;<em>F</em>(<em>n</em>+2)</li>
</ul>
<p>这一通过从 &#x3D;1<em>n</em>&#x3D;1 开始循环即可完成递推，当然也可以使用递归法。</p>
<p>首先我们写找出递归式，()&#x3D;(−1)+(−2)<em>F</em>(<em>n</em>)&#x3D;<em>F</em>(<em>n</em>−1)+<em>F</em>(<em>n</em>−2)。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">F(n)= F(n<span class="number">-1</span>) + F(n<span class="number">-2</span>)</span><br><span class="line">    = F(n<span class="number">-2</span>)+F(n<span class="number">-3</span>)+F(n<span class="number">-3</span>)+F(n<span class="number">-4</span>)</span><br><span class="line"><span class="comment">//重复调用</span></span><br></pre></td></tr></table></figure>

<p>这样我们找到了递归式，然后我们应该找到递归出口。</p>
<p>我们可以知道 ()&#x3D;0&#x3D;0,()&#x3D;1&#x3D;1<em>F</em>(<em>n</em>)&#x3D;0<em>n</em>&#x3D;0,<em>F</em>(<em>n</em>)&#x3D;1<em>n</em>&#x3D;1 这就是递归出口，能让递归停止的条件。</p>
<p>递归算法的通用框架如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">do</span>(a,b,c...)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//递归终止条件，即出口</span></span><br><span class="line">    <span class="keyword">if</span>(a==? ,b==? ,....) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//递归条件</span></span><br><span class="line">    <span class="keyword">if</span>(条件<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">do</span>(参数<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">else</span>(条件<span class="number">2</span>)</span><br><span class="line">        <span class="built_in">do</span>(参数<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">如本题，各子式间存在计算关系，可以化为：</span><br><span class="line"></span><br><span class="line"><span class="built_in">do</span>(a)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">do</span>(a<span class="number">-1</span>)+<span class="built_in">do</span>(a<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这道题不是多次询问问题，不需要存储直接计算的复杂度是最低的。</p>
<h4 id="答案解析"><a href="#答案解析" class="headerlink" title="答案解析"></a>答案解析</h4><p>C++ 代码：</p>
<ul>
<li>递推算法代码</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n; <span class="comment">//第几个数</span></span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>; <span class="comment">//F(n)</span></span><br><span class="line">    <span class="type">int</span> y=<span class="number">1</span>; <span class="comment">//F(n+1)</span></span><br><span class="line">    <span class="type">int</span> ans; <span class="comment">//F(n+2）</span></span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>) ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">1</span>) ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ans=x+y;</span><br><span class="line">            x=y;</span><br><span class="line">            y=ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>递归算法代码</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fn</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//递归出口1</span></span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//递归出口2</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">1</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fn</span>(n<span class="number">-1</span>)+<span class="built_in">fn</span>(n<span class="number">-2</span>); <span class="comment">//递归关系式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n; <span class="comment">//第几个数</span></span><br><span class="line">    <span class="type">int</span> ans;</span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    ans=<span class="built_in">fn</span>(n);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Python 解题代码</strong></p>
<ul>
<li>递推算法代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    n =<span class="built_in">int</span>( <span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">    x=<span class="number">0</span> <span class="comment"># F(n)</span></span><br><span class="line">    y=<span class="number">1</span> <span class="comment">#F(n+1)</span></span><br><span class="line">    ans=<span class="number">0</span> <span class="comment">#F(n+2）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">0</span> :</span><br><span class="line">        ans=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> n==<span class="number">1</span>:</span><br><span class="line">        ans=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (n-<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">            ans=x+y</span><br><span class="line">            x=y</span><br><span class="line">            y=ans</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure>

<ul>
<li>递归算法代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="comment"># 递归出口1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 递归出口2</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> f(n - <span class="number">1</span>) + f(n - <span class="number">2</span>)  <span class="comment"># 递归关系式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    ans = f(n)</span><br><span class="line">    <span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure>

<p><strong>Java 解题代码</strong></p>
<p>递推算法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n; <span class="comment">//第几个数</span></span><br><span class="line">        <span class="type">int</span> x=<span class="number">0</span>; <span class="comment">//F(n)</span></span><br><span class="line">        <span class="type">int</span> y=<span class="number">1</span>; <span class="comment">//F(n+1)</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//F(n+2）</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        n = in.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">1</span>) ans=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                ans=x+y;</span><br><span class="line">                x=y;</span><br><span class="line">                y=ans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>递归算法代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>  <span class="type">int</span> <span class="title function_">fn</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//递归出口2</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">1</span> )</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> fn(n-<span class="number">1</span>)+fn(n-<span class="number">2</span>); <span class="comment">//递归关系式</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n; <span class="comment">//第几个数</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        n = in.nextInt();</span><br><span class="line"></span><br><span class="line">        ans=fn(n);</span><br><span class="line"></span><br><span class="line">        System.out.println(ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="存储型的递推与递归"><a href="#存储型的递推与递归" class="headerlink" title="存储型的递推与递归"></a>存储型的递推与递归</h3><p>我们在开始就讲过题目十分存储和非存储的，上面那个题目就是此询问，如果改为多次询问我们该怎么办，我们会采用存储的方式，存储的方式适用于大部分的的多次查询问题。</p>
<p>我们看一下修改后的题目。</p>
<p><strong>题目描述：</strong></p>
<p>斐波那契数列（Fibonacci sequence），又称黄金分割数列，因数学家莱昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”。</p>
<p>指的是这样一个数列：0、1、1、2、3、5、8、13、21、34、…0、1、1、2、3、5、8、13、21、34、…</p>
<p>在数学上，斐波那契数列以如下被以递推的方法定义：(0)&#x3D;0<em>F</em>(0)&#x3D;0，(1)&#x3D;1<em>F</em>(1)&#x3D;1，()&#x3D;(−1)+(−2)<em>F</em>(<em>n</em>)&#x3D;<em>F</em>(<em>n</em>−1)+<em>F</em>(<em>n</em>−2)（≥2，∈∗<em>n</em>≥2，<em>n</em>∈<em>N</em>∗）</p>
<p>我们将进行M次查询，每次输入一个<em>N</em>，其中<em>n</em>小于3030。</p>
<p>请求出该数列中第<em>n</em>个数字（<em>n</em>从11开始计数）是多少?</p>
<p><strong>样例:</strong></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">输入样例</span><br><span class="line"></span><br><span class="line">样例1输入：</span><br><span class="line"></span><br><span class="line">6</span><br><span class="line">4</span><br><span class="line">2</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">8</span><br><span class="line">10</span><br><span class="line"></span><br><span class="line">样例2输入：</span><br><span class="line"></span><br><span class="line">8</span><br><span class="line">13</span><br><span class="line">23</span><br><span class="line">14</span><br><span class="line">17</span><br><span class="line">24</span><br><span class="line">16</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line"></span><br><span class="line">输出样例</span><br><span class="line"></span><br><span class="line">样例1输出：</span><br><span class="line"></span><br><span class="line">3</span><br><span class="line">1</span><br><span class="line">13</span><br><span class="line">21</span><br><span class="line">21</span><br><span class="line">55</span><br><span class="line"></span><br><span class="line">样例2输出：</span><br><span class="line"></span><br><span class="line">233</span><br><span class="line">28657</span><br><span class="line">377</span><br><span class="line">1597</span><br><span class="line">46368</span><br><span class="line">987</span><br><span class="line">55</span><br><span class="line">89</span><br></pre></td></tr></table></figure>

<p><strong>运行限制:</strong></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">1. 最大运行时间：1s</span><br><span class="line">2. 最大运行内存：128M</span><br></pre></td></tr></table></figure>

<p><strong>题目解析：</strong></p>
<p>这道题跟上面一道题的算法原理相同，只是增加了多次查询的复杂度，所以仅需修改这一点即可。</p>
<p>再有的是有的同学担心自己的输入输出是在一个屏幕上的，评测的时候会不会出现问题。</p>
<p class='item-img' data-src='/./../imgs/%E9%80%92%E5%BD%92%E4%B8%8E%E9%80%92%E6%8E%A8/40a8cde4be1c5946317ab844a61f697f-0.png'><img src="/./../imgs/%E9%80%92%E5%BD%92%E4%B8%8E%E9%80%92%E6%8E%A8/40a8cde4be1c5946317ab844a61f697f-0.png" alt="图片描述"></p>
<p>类似这样的情况，这一点是不用担心的，只要不是交互题，评测机的输入与输出是分开的，只有你的输出会用来跟答案比较，所以我们只用关心我们的输出即可。</p>
<p>比如有一道题让你计算 +<em>x</em>+<em>y</em> 的值，如果你知道每答案，就可以直接输出，都不用进行读入。</p>
<p>然后我们来看一下需要多次询问的题目该怎么解决。</p>
<h4 id="答案解析-1"><a href="#答案解析-1" class="headerlink" title="答案解析"></a>答案解析</h4><p>C++ 代码：</p>
<ul>
<li>递推算法代码</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> F[<span class="number">35</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    F[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    F[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">30</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        F[i]=F[i<span class="number">-1</span>]+F[i<span class="number">-2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> m; <span class="comment">//m次查询</span></span><br><span class="line">    <span class="type">int</span> n; <span class="comment">//第几个数</span></span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(m&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        m-=<span class="number">1</span>;</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        cout&lt;&lt;F[n]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>存储答案的递推法，才是最常使用的递推法。</p>
<ul>
<li>递归算法代码</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> F[<span class="number">35</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fn</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//递归出口1</span></span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        F[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//递归出口2</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        F[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        F[n]=<span class="built_in">fn</span>(n<span class="number">-1</span>)+<span class="built_in">fn</span>(n<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">return</span> F[n]; <span class="comment">//递归关系式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> m; <span class="comment">//m次查询</span></span><br><span class="line">    <span class="type">int</span> n; <span class="comment">//第几个数</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">fn</span>(<span class="number">30</span>);</span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(m&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        m-=<span class="number">1</span>;</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        cout&lt;&lt;F[n]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Python 解题代码</strong></p>
<p>递推算法代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">F = [<span class="number">0</span>]*<span class="number">35</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>():</span><br><span class="line"></span><br><span class="line">    F[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    F[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">30</span>):</span><br><span class="line">        F[i] = F[i-<span class="number">1</span>]+F[i-<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    m = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    init()</span><br><span class="line">    <span class="keyword">while</span> m &gt; <span class="number">0</span>:</span><br><span class="line">        m -= <span class="number">1</span></span><br><span class="line">        n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">        <span class="built_in">print</span>(F[n])</span><br><span class="line">    <span class="comment"># print(F)</span></span><br></pre></td></tr></table></figure>

<p>递归算法代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">F = [<span class="number">0</span>] * <span class="number">35</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="comment"># 递归出口1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        F[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="comment"># 递归出口2</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">        F[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        F[n] = f(n - <span class="number">1</span>) + f(n - <span class="number">2</span>) <span class="comment"># 递归关系式</span></span><br><span class="line">        <span class="keyword">return</span> F[n]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    m = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    f(<span class="number">30</span>)</span><br><span class="line">    <span class="keyword">while</span> m &gt; <span class="number">0</span>:</span><br><span class="line">        m -= <span class="number">1</span></span><br><span class="line">        n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">        <span class="built_in">print</span>(F[n])</span><br><span class="line">    <span class="comment"># print(F)</span></span><br></pre></td></tr></table></figure>

<p><strong>Java 解题代码</strong></p>
<p>递推算法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> []F=<span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">35</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        F[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        F[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">30</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            F[i]=F[i-<span class="number">1</span>]+F[i-<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> m; <span class="comment">//m次查询</span></span><br><span class="line">        <span class="type">int</span> n; <span class="comment">//第几个数</span></span><br><span class="line">        init();</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        m = in.nextInt();</span><br><span class="line">        <span class="keyword">while</span>(m&gt;<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">            m-=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            n= in.nextInt();</span><br><span class="line"></span><br><span class="line">            System.out.println(F[n]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>递归算法代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> []F=<span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">35</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fn</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//递归出口1</span></span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            F[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//递归出口2</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            F[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            F[n]=fn(n-<span class="number">1</span>)+fn(n-<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">return</span> F[n]; <span class="comment">//递归关系式</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> m; <span class="comment">//m次查询</span></span><br><span class="line">        <span class="type">int</span> n; <span class="comment">//第几个数</span></span><br><span class="line">        fn(<span class="number">30</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        m = in.nextInt();</span><br><span class="line">        <span class="keyword">while</span>(m&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            m-=<span class="number">1</span>;</span><br><span class="line">            n= in.nextInt();</span><br><span class="line">            System.out.println(F[n]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数字三角形问题"><a href="#数字三角形问题" class="headerlink" title="数字三角形问题"></a>数字三角形问题</h3><p><strong>题目描述:</strong></p>
<p class='item-img' data-src='/./../imgs/%E9%80%92%E5%BD%92%E4%B8%8E%E9%80%92%E6%8E%A8/06b8663e2aceb6c87e0913d2fe0710f2-0.png'><img src="/./../imgs/%E9%80%92%E5%BD%92%E4%B8%8E%E9%80%92%E6%8E%A8/06b8663e2aceb6c87e0913d2fe0710f2-0.png" alt="图片描述"></p>
<p>如图数字三角形。如下所示为一个数字三角形。请编一个程序计算从顶到底的某处的一条路径，使该路径所经过的数字总和最大。只要求输出总和。 　</p>
<ol>
<li>一步可沿左斜线向下或右斜线向下走；</li>
<li>三角形行数小于等于 100100；</li>
<li>三角形中的数字为 0，1，…，990，1，…，99；</li>
</ol>
<p>测试数据通过键盘逐行输入。</p>
<p>如上例数据应以样例所示格式输入：</p>
<p><strong>样例:</strong></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line"></span><br><span class="line">5</span><br><span class="line">7</span><br><span class="line">3 8</span><br><span class="line">8 1 0</span><br><span class="line">2 7 4 4</span><br><span class="line">4 5 2 6 5</span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">30</span><br></pre></td></tr></table></figure>

<p><strong>运行限制:</strong></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">1. 最大运行时间：1s</span><br><span class="line">2. 最大运行内存：128M</span><br></pre></td></tr></table></figure>

<p><strong>题目分析:</strong></p>
<p>解决该题目的方式有很多，包括动态规划， 枚举都可以解决这个问题。</p>
<p>我们从递推的思想出发，假设我们从顶层沿着某条路径已经走到了第 <em>i</em> 层，正向着 +1<em>i</em>+1 层前进， 两条可行路径中我们肯定会选择最大的方向前进，为此我们可以采用递推中的反向递推，即逆推的方式解决，设 [][]<em>a</em>[<em>i</em>][<em>j</em>] 存放从 ,<em>i</em>,<em>j</em> 出发到达第 <em>n</em> 层的最大值。</p>
<p>我们可以写出递推式：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">a[i][j] = max&#123;a[i][j]+a[i+1][j]，a[i][j]+a[i+1][j+1]&#125;</span><br></pre></td></tr></table></figure>

<p>则 逆推到出发点 [1][1]<em>a</em>[1][1] 为题目所求答案，即第一层到第 <em>N</em> 层的最大值。</p>
<h4 id="答案解析-2"><a href="#答案解析-2" class="headerlink" title="答案解析"></a>答案解析</h4><p>C++ 代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n; <span class="comment">//n层</span></span><br><span class="line">    <span class="type">int</span> a[<span class="number">101</span>][<span class="number">101</span>]; <span class="comment">//路径矩阵</span></span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输入数字三角形的值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>; j&lt;=i; j++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        cin&gt;&gt;a[i][j]; <span class="comment">//输入原始数据</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//递推开始</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=n<span class="number">-1</span>; i&gt;=<span class="number">1</span>; i--)<span class="comment">//从最后一层逆推</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>; j&lt;=i; j++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (a[i+<span class="number">1</span>][j]&gt;=a[i+<span class="number">1</span>][j+<span class="number">1</span>])</span><br><span class="line">                a[i][j]+=a[i+<span class="number">1</span>][j];     <span class="comment">//路径选择</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                a[i][j]+=a[i+<span class="number">1</span>][j+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;a[<span class="number">1</span>][<span class="number">1</span>]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Python 解题代码</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [[<span class="number">0</span>] * <span class="number">101</span>] * <span class="number">101</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">  n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 输入数字三角形的值</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">      a[i] = <span class="built_in">input</span>().split()</span><br><span class="line">      a[i] = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, a[i]))  <span class="comment"># split 分割后都是 字符 这里是转化成数字</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># for i in range(1, n + 1):</span></span><br><span class="line">  <span class="comment">#     print(a[i])</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># a = list(map(int, a)) # split 分割后都是 字符 这里是转化成数字</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 递推开始</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">      <span class="comment"># 最后一层逆推</span></span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, i):</span><br><span class="line"></span><br><span class="line">          <span class="comment"># 路径选择</span></span><br><span class="line">          <span class="keyword">if</span> a[i + <span class="number">1</span>][j] &gt;= a[i + <span class="number">1</span>][j + <span class="number">1</span>]:</span><br><span class="line">              a[i][j] += a[i + <span class="number">1</span>][j]</span><br><span class="line"></span><br><span class="line">          <span class="keyword">else</span>:</span><br><span class="line">              a[i][j] += a[i + <span class="number">1</span>][j + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># for i in range(1, n + 1):</span></span><br><span class="line">  <span class="comment">#     print(a[i])</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(a[<span class="number">1</span>][<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<p><strong>Java 解题代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="type">int</span> [][]a=<span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="type">int</span> n;</span><br><span class="line">      <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">      n = in.nextInt();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//输入数字三角形的值</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>; j&lt;=i; j++)</span><br><span class="line">          &#123;</span><br><span class="line">              a[i][j]=in.nextInt(); <span class="comment">//输入原始数据</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//递推开始</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i=n-<span class="number">1</span>; i&gt;=<span class="number">1</span>; i--)<span class="comment">//从最后一层逆推</span></span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>; j&lt;=i; j++)</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">if</span> (a[i+<span class="number">1</span>][j]&gt;=a[i+<span class="number">1</span>][j+<span class="number">1</span>])</span><br><span class="line">                  a[i][j]+=a[i+<span class="number">1</span>][j];     <span class="comment">//路径选择</span></span><br><span class="line"></span><br><span class="line">              <span class="keyword">else</span>  a[i][j]+=a[i+<span class="number">1</span>][j+<span class="number">1</span>];</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(a[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我们这节课讲了递推与递归的知识点，并且也讲了何时采用递归设计程序，何时采用递推设计程序。对于多次询问的题目，也为大家展示了一种解决方法。</p>
<p>对于递推算法，我们覆盖了正推和逆推两种方式。无论是递推和递归的关键在于找到关系式。</p>
<p>希望同学能够独立完成题目进行练习。并且在后面的学习中会多次用到递归与递推设计其他算法。</p>
]]></content>
      <categories>
        <category>蓝桥杯冲刺营</category>
        <category>2.递归与递推</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
  <entry>
    <title>集合</title>
    <url>/2024/02/21/%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<p class='item-img' data-src='/./../imgs/%E9%9B%86%E5%90%88/image-20240221222542051.png'><img src="/./../imgs/%E9%9B%86%E5%90%88/image-20240221222542051.png" alt="image-20240221222542051"><img src="/./../imgs/%E9%9B%86%E5%90%88/image-20240221222547184.png" alt="image-20240221222547184" class='item-img' data-src='/./../imgs/%E9%9B%86%E5%90%88/image-20240221222547184.png'><img src="/./../imgs/%E9%9B%86%E5%90%88/image-20240221222547184.png" alt="image-20240221222547184"><img src="/./../imgs/%E9%9B%86%E5%90%88/image-20240221222559249.png" alt="image-20240221222559249" class='item-img' data-src='/./../imgs/%E9%9B%86%E5%90%88/image-20240221222559249.png'><img src="/./../imgs/%E9%9B%86%E5%90%88/image-20240221222559249.png" alt="image-20240221222559249"><img src="/./../imgs/%E9%9B%86%E5%90%88/image-20240221222609307.png" alt="image-20240221222609307" class='item-img' data-src='/./../imgs/%E9%9B%86%E5%90%88/image-20240221222609307.png'><img src="/./../imgs/%E9%9B%86%E5%90%88/image-20240221222609307.png" alt="image-20240221222609307"><img src="/./../imgs/%E9%9B%86%E5%90%88/image-20240221222617689.png" alt="image-20240221222617689" class='item-img' data-src='/./../imgs/%E9%9B%86%E5%90%88/image-20240221222617689.png'><img src="/./../imgs/%E9%9B%86%E5%90%88/image-20240221222617689.png" alt="image-20240221222617689"><img src="/./../imgs/%E9%9B%86%E5%90%88/image-20240221222627329.png" alt="image-20240221222627329"></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
        <category>第一章：语言基础</category>
        <category>基础数据结构</category>
      </categories>
      <tags>
        <tag>蓝桥杯备赛</tag>
      </tags>
  </entry>
</search>
